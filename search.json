[
  {
    "url": "/blog/hello-world/",
    "title": "Hello World",
    "index": " quartafeira dia 12 agosto quando estava conversando com grandeamigo Jo√£ Luiz entusiasmado framework nodejs que acab√°vamos fazer funcionar como foi sofrido reconfigur√°lo pois nem elelembramos anotar passos ent√£ surgiu ideia anota√ß√µes sobre que aprendemos facilitar encontrar essas informa√ß√µes depois isso ideia blogResolvi bater aposta comigo mesmo em manter regularidade posts nesseblog escrevendo coisas tenho mais interesse: computadores webAinda tem muito melhorar por aqui mas come√ß est√° bom"
  },
  {
    "url": "/blog/porque-voce-deveria-aprender-javascript/",
    "title": "Porque voc√™ deveria aprender JavaScript",
    "index": " web se tornou plataforma padr√£ desenvolvimento nos √∫ltimos anos Isso √©evidenciado pelo tanto ferramentasambientes gr√°ficosplataformas sistemas operacionais que utilizam suastecnologias apresentar conte√∫do Hoje at√© aplica√ß√µes dispositivosm√≥veis nativas incorporam tecnologias do HTML CSS JavaScript Nem hardwaretem escapado dessa mudan√ß Projetos comoArduinoNodeBots Tessel vislumbram em futuro pr√≥ximo poderemos ter JavaScript como linguagem comum sistemas embarcadosNo entanto ainda existe certa barreira aprender essa linguagem Ela j√°foi considerada brinquedo tinha somente fun√ß√£ criaralguns efeitos na interface usu√°rio adicionar alguma intera√ß√£ Hoje essasitua√ß√£ mudou aurora novo tempoEm meados 2004 Google lan√ß Gmail servi√ß mail ganhou destaquepor garantir espa√ß quase ilimitado gratuitamente Alm disso interfacetinha caracter√≠stica interessante: partes da carregadasdinamicamente sem necessidade redirecionamento p√°gina inteira cliente Gmail foi desenvolvido utilizando AJAX ingl√™s &lt;ilang=en&gt;Asynchronous Javascript And XML permitia troca informa√ß√µes com servidor forma ass√≠ncrona XMLHttpRequest seja AJAX conte√∫do fosse carregado acordo demanda usu√°rio recarregamento advento provocou mudan√ß profundas no aplica√ß√µesadicionando dinamismo interatividade permitindo fossemcompetitivas nativas&lt;blockquotecite=http://wwwadaptivepathcom/ideas/ajaxnewapproachwebapplications/&gt; √© tecnologia Na verdade muitas tecnologias cada florescendo por conta pr√≥pria trabalhando juntas poderosa &lt;href=http://wwwadaptivepathcom/ideas/ajaxnewapproachwebapplications/&gt;Jesse James Garrett J√° em 2009 lan√ßamento Nodejs permitiu JavaScript aliado I/ bloqueante orientado eventosganhasse lado das aplica√ß√µes ado√ß√£ muito r√°pidaprincipalmente atender nova demanda aplicativos mobile queexigiam grandes quantidades respostas tempo real Dois anos mais tarde em2011 lan√ßado NPM gerenciador pacotes bibliotecas Node causando explos√£ popularidade Atualmente NPM reposit√≥rio maior quantidade m√≥dulos dispon√≠veisVantagensPerformanceNos navegadores ambientes modernos maioria dos c√≥digos √©executado forma bastante otimizadaApesar ser script isso utilizar m√°quina virtual execu√ß√£ possui desempenho√≥timo aplica√ß√µesMultiparadigma multiparadigma aumenta flexibilidade dodesenvolvimento Caso voc√™ queira trabalhar orienta√ß√£ √† objetos linguagem modelo heran√ß baseada prot√≥tipo √â poss√≠vel tambmutilizar conceitos encapsulamento polimorfismo composi√ß√£ formabastante simplesNo prefere abordagem funcional contmv√°rias caracter√≠sticas herdadas linguagens funcionais incluem: fun√ß√µes alta ordem closures Alguns mtodos cl√°ssicos daslinguagens est√£ presentes JavaScript tais &lt;spanlang=en&gt;Array#map&lt;spanlang=en&gt;Array#filter &lt;spanlang=en&gt;Array#reduceReusabilidadeC√≥digo escrito port√°vel facilmente reus√°vel outros locais segue princ√≠pio forte retrocompatibilidade ent√£ bemposs√≠vel pegar c√≥digo dez atr√°s execut√°lo sucesso emqualquer recenteAlm possibilidade executar mesmo cliente quanto emservidores permite ganho produtividade imenso Outro destaque dalinguagem facilidade disponibilidade utilizar terceiros com utiliza√ß√£ NPMConclus√£Hoje Lei Atwood nunca pareceu t√£ verdadeira temdominado todas √°reas aplica√ß√µes desdeaplicativos sociaissu√≠tes programas escrit√≥rio jogos grande processamento gr√°fico Qualquer aplica√ß√£ possa escrita eventualmente ser√°escrita &lt;href=http://blogcodinghorrorcom/theprincipleofleastpower/&gt; Jeff Atwood Aprender pode lhe abrir v√°rias oportunidades alm √©demais possuir habilidade invent√°rio"
  },
  {
    "url": "/blog/javascript-basico-1/",
    "title": "JavaScript B√°sico #1",
    "index": " JavaScript √© linguagem programa√ß√£ criada em 1995 com objetivo adicionar dinamicidade aos documentos HTML no navegador Netscape JavaScriptjunto CSS constituem tr√™s pilares tecnol√≥gicos da web JavaScript permite que c√≥digo seja executado nos navegadores dos usu√°rios queacessam p√°gina web adicionando interatividade permitindo constru√ß√£ aplica√ß√µes ricas linguagem scriptdin√¢mica comfun√ß√µes primeira classe suporta cria√ß√£ objetos baseados emprot√≥tipos Poressas caracter√≠sticas considerada multiparadigmaoferecendo suporte estiloimperativoorientado objetos funcionalMas se preocupe entender todos esses conceitos por agora script programa√ß√£ desenvolvida ambiente execu√ß√£ espec√≠fico Apesar ter nascimento navegadores atualmente habita tambm lado do servidor Por exemplo engineV8 utilizada Google Chromemas utilizado pelo NodejsVoltando 1995 Netscape contrata Brendan Eich liderar desenvolvimento novalinguagem permitiria nov√≠ssimo Navegador √†linguagem Java tornasse mais acess√≠vel decide script tipagem fraca seria ideal p√∫blico alvo da√©poca: web designers desejavam adicionar algumas funcionalidades p√°ginasweb sem necessidade compilar bytecode conhecimentoavan√ßado orienta√ß√£ objetosEssa vers√£ foi chamada ‚ÄúMocha‚Äù No entanto lan√ßamento oficial ela nomeada ‚ÄúLiveScript‚ÄùPosteriormente rebatizada iniciativa setor marketing isso revelaria erro assombraria web muitos anos‚Ä¶ Em 4 Dezembro 1995 NetScape junto Sunanunciam JavaScript nova tinha √∫nico objetivo: ser complemento Java rapidamente ganhou vida pr√≥pria sendo cada vez adicionar √† controlar appletsJava sucesso como curva aprendizagem baixa precisava compilador nem processo build IDE combinado falhas seguran√ß descobertasnos meses seguintes constru√≠ram imagem sria suficiente complexasMas passou despercebido pela Microsoft empresa portr√°s Internet Explorer Microsoft respondeu ao Netscapelan√ßando VBScript permitia intera√ß√£ componentes das p√°ginas HTMLjunto sistema operacional Windows Alm disso 16 Julho 1996 Microsoft lan√ß ‚Äúvers√£ JavaScript‚Äù Explorer 30 batiza JScript JScript totalmente compat√≠vel JavaScript C√≥digos feitos funcionavam na outra grande parte vezes Isso acirrouainda disputa entre ambos navegadores comum alguns desenvolvedores abandonassem outro invs escrever ambosEm Novembro 1997 Sun iniciam padronizar linguagem ajuda European Computer Manufacturers Association (ECMA) d√£ novo nome: ECMAScript padroniza√ß√£ durou v√°riosanos ECMAScript 2 Junho 1998 3 1994 trabalhos come√ßaram 2000Nos anos seguintes perdeu for√ß applets VBScript foidescontinuado batalha contra Netscape Navigator dom√≠nio 95% mercado in√≠ciodos 2000 fez tornase padr√£ facto ‚Äúdocumentos din√¢micos‚Äù Eventualmente Microsoftque inicialmente participava ativamente padroniza√ß√£ parou contribuir projeto arquivado per√≠odo indefinido hist√≥ria come√ß mudar 2004 quando Mozilla sucessora Netscapelan√ß Firefox abocanha pequena mas significativa doInternet 2005 Mozilla juntase ECMA International come√ß trabalhar Macromedia desejava linguagemActionScript Flash reviver 4Nos pr√≥ximos anos Chrome m√°quina virtual JavaScript pr√≥pria V8 utilizar tradu√ß√£din√¢mica popularizouse ainda diversas bibliotecas ferramentas disponibilizadas c√≥digolivre prometiam acabar incompatibilidade diversosnavegadores tais JQuery MooTools Eventualmente chegouse consenso que necess√°rio linguagem Assim 2009 quinta definitiva finalmente lan√ßada partir v√°rios esfor√ß foram tomados melhorar aumentar capacidade 2015 sexta lan√ßada commuitas novas funcionalidades tornandose definitivamente maduraAtualmente considerado implementa√ß√£ ECMAScript assimcomo ActionScript JScriptSrie sobre JavaScriptPretendo iniciar essa srie artigos compartilhar pouco conhecimento adquiri √∫ltimos pois acredito somenteaprendese coisa verdade voc√™ ensinase ela Sei h√° muitoconte√∫do qualidade basta pesquisada noGoogle muito conte√∫do relevante dado l√≠ngua inglesa apresentamconceitos j√° obsoletos seja obst√°culo desenvolvedoresiniciantes aspirantes querem aprender poderosalinguagemNessa srie vou exibir aspectos prim√°rios aospoucos ir revelando detalhes importantes complexos conforme avan√ßamos Vou meesfor√ßar tratar assunto maneira f√°cil compreender √©importante tenha algum entendimento codifica√ß√£ l√≥gica programa√ß√£ Fa√ß sempre uso quantidade exemplos afinal melhor forma codificar codificando Talk is cheap show me the code Linus Torvalds Quer come√ßar j√° Pois ent√£ vamos l√°! Caso esteja num atualizado aperte &lt;kbdclass=key&gt;Ctrl + Shift &lt;kbdclass=key&gt;J ver√° tela cursor Bem vindo aoConsole navegador! Tente digitar seguinte express√£abaixo Enter:var foo = Ol√° Mundo!;Em seguida digite pr√≥xima express√£ novamente Enter:consolelog(foo);Viu resultado Parabns! Voc√™ atribui√ß√£ valor vari√°vel imprimiu resultado tela Simples Esse s√≥ exemplob√°sico console lhe auxiliar nesse aprendizado ele companheiro melhor ferramenta aprenderJavaScriptTente agora pouco complexa escreva fun√ß√£ abaixo noconsole Dica: for pular linha use &lt;kbdclass=key&gt;Shift Enter ap√≥s digitartudo Enterfunction fac(n) { if (n === 0) return 1; n * fac(n 1);}Ap√≥s isso execute comandos:fac(1);fac(2);fac(3);fac(6);Viu valores tela notou padr√£ Compreendeu fun√ß√£faz üòÑLivrosJavaScript CatsEloquent JavaScriptLinksLearn EssentialsJavaScript: The Right WayHow to Learn ProperlyV√≠deosDesvendando JavaScriptCode School: Road Trip Part 1AgradecimentosAgrade√ß Suzani Cristina pelarevis√£ texto informa√ß√µes Obrigado!"
  },
  {
    "url": "/blog/javascript-basico-2/",
    "title": "JavaScript B√°sico #2",
    "index": "Valores elementos mais simples dentro linguagem: express√µes que podem ser reduzidas nenhuma outra seja est√£ em forma normal Por exemplo: 2 √© valor ele autocontido h√° comosimplificar J√° (1+2) express√£ representa pois pode serderivado reduzido como 3 Em l√≥gica matem√°tica objeto encontrase formanormal se este reescrito forma simples Todo valor deve armazenado local na mem√≥ria do computador ocupaalgum espa√ß bits JavaScript possui duas categorias valores:primitivos objetos Nesse artigo vamos focar nos valores tipoprimitivo primitivos representam dados ter tipos:N√∫meroStringBooleanoExistem outros tipos avan√ßados mas introdu√ß√£ √†linguagem esses tr√™s suficientesN√∫meroValores tipo n√∫mero surpreendentemente numricos JavaScriptarmazena qualquer ponto flutuante precis√£ dupla seja cada utiliza 64 bits da armazenadoAlguns utilizados identificar n√∫meros negativos tambm indicar fra√ß√£ decimal n√∫mero Na verdade maior numrico inteiro est√° pr√≥ximo aos 9 quadrilh√µesAbra console navegador Ctrl +Shift + J experimenteentrar com inteiros 0 3 16 apertado &lt;kbdclass=key&gt;Enter ap√≥s deles Voc√™ ver sempreir√° retornar voc√™ informada caso ela sejaavaliada valor; contr√°rio retorna undefined preocupeem entender significa isso por agora tratar sobre esse valorespecial daqui pouco Computadores deuses Velho Testamento: muitasregras piedade Joseph Campbell The Power of Myth representar base decimal j√° visto bastaescrev√™los sem usar zero esquerda N√∫meros fracionais escritos componto ent√£ 15 escrito 15 podeomitir parte inteira quando nula assim 078 como078 78; No entando sempre recomendado adicione zero Voc√™tambm escrever muito grandes pequenos atravs nota√ß√£ cient√≠ficausando indicar expoente 10 Veja abaixo diferentesformas mesmo n√∫mero:01; // ‚Üí 0101; 011e1; 01H√° possibilidade baseshexadecimal(16) octal (8) bin√°ria(2) hexadecimal basta adicionar 0x √† frente n√∫mero d√≠gitos 01234567890ABCDF octalprecedese 0 seguida d√≠gito 01234567 porisso 014 diferente 14 JavaScript primeiro indica segundo decimalN√∫meros bin√°rios 0b digitos 01 mostrar diferen√ß escrita 42 nas diferentes bases escritocomo:42; 420b101010; 42052; 420x2a; 42Opera√ß√µes matem√°ticas quatro opera√ß√µes aritmticas b√°sicas: adi√ß√£ subtra√ß√£multiplica√ß√£ divis√£; dadas no pelos s√≠mbolos + * / respectivamente Esses chamados operadores sempre utilizam dos direita esquerda realizar opera√ß√£ Outro operador importante m√≥dulo resto dadivis√£ % Experimente executar seguintes express√µes noconsole1 4; 59 / 10; 093 15; 42(20 5) 62510 % 9; 1Como esperado multiplica√ß√£ divis√£ tem prioridade seguindo ordem preced√™nciaCaso precise ordem explicita utilizar par√™ntesesValores numricos especiaisH√° comportam n√∫meroscomuns primeiros infinitos positivo negativo representados linguagem Infinity Infinity apesar poderem aritmticas comparados outrosn√∫meros √∫teis resolver alguns problemas terceiro NaN ingl√™s Not Number valordo n√∫mero Opera√ß√µes aritmticasindefinidas malformadas resultam veja exemplos:Infinity Infinity; NaN0 NaNInfinity Infinity; NaN 2; NaNStringsStrings cadeia caracteres utilizadas texto escrito representa√ß√£ dada pelo conte√∫do par aspasduplas () aspas () exemplo:√Ä noite vov√¥ Kowalsky v√™ √≠m√£ cair p√© pinguim queixoso vov√≥ p√µ √ß√∫car ch√° t√¢maras jabuti feliz;Gazeta publica hoje jornal breve nota faxina quermesse;Qualquer caractere colocado entre encarrega atribuir elas entanto especiais como indicam nova linha tabula√ß√£ precisam serrepresentados diferente especiaisutilizamos nota√ß√£ contrabarra ( &lt;ilang=en&gt;character escaping) encontrada texto seguinteindica especial exemplo string contenha n indicaque quebra linha lista principais caracteresespeciais:n Quebra linha Aspas duplas simples Contrabarrat Espa√ß tabula√ß√£ frase Usamos linha necess√°rio escrev√™la seguinte forma:Usamos n linha;Strings adicionadas divididas multiplicas subtra√≠das Maspodem concatenadas + express√£ja va script produz resultado javascriptBooleanosMuitas vezes precisamos t√£ indiquem somente decis√£: ligado desligado ativo inativo outrosValores booleanos exatamente representados true false homenagem ao matem√°ticoGeorge Boole grande contribuidornos campos matem√°tica √°lgebra abstrata Apesar serem simples essenciais estamos lidando estruturas controle la√ß dentroda linguagemOpera√ß√µes booleanasValores operados operadores l√≥gicos nega√ß√£ escritosrespectivamente || ! Note nega√ß√£ ! √©un√°rio inverte booleano informado Exemplos:true true; truetrue false; falsetrue truefalse false!true; false!false; trueCompara√ß√µes ordena√ß√£ total possuem ideia outro precede outro avaliar essarela√ß√£ utilizamos compara√ß√£ valorbooleano false compara√ß√£ : que;= igual ;== ;= menor ; que;!= ;Alguns exemplos:1 = true1 1; false3 === true4 !== 12 3; falseAlvar Zoink; trueJaiko &gt;= Jaik; &gt; trueN√∫meros acordo real Strings comparadas pelaordem lexicogr√°fica booleanos sucede false ambos nunca iguais exce√ß√£ essa regra NaN maioria das igual mesmo NaN acontece == NaNsempre justificativa normalmente computa√ß√£ aritmtica indefinida seja outracomputa√ß√£ inv√°lidaValores indefinidosH√° dois especiais null undefined indicar falta pr√≥prio informa√ß√£Muitas v√°lido produzem valorundefined obrigadas valor Contextualmente h√°diferen√ß consider√°los sin√¥nimosna vezesAlguns autores chegam afirmar acidente projeto dalinguagem Houve proposta unificar valores foirejeitadaPodemos notar operadortypeof linguagem fornece nomeando dopr√≥ximo dado ela exemplo:typeof 32; numbertypeof ; stringtypeof (true true); booleantypeof null; objecttypeof undefined; undefinedConclus√£Esse ficou pouco longo acho entendimentoinicial b√°sicas compreens√£ JavaScript pr√≥ximos artigos trataremos assuntos vari√°veis atribui√ß√µes suasespecialidades"
  },
  {
    "url": "/blog/javascript-basico-3/",
    "title": "JavaScript B√°sico #3",
    "index": "Noartigo anteriorvemos como manipular basicamente valores tipo primitivo da linguagementre : n√∫meros strings booleanos indefinidos Tambm vimos comofazer algumas opera√ß√µes aritmticas compara√ß√£ entre express√µes Noentanto somente suficientes expressar algoritmoscomplexos √â necess√°rio utilizar mem√≥ria do computador armazenar valorescomputados acess√°los depois Nesse texto vamos ver atribuir nomearvalores por meio uso vari√°veis va¬∑ri¬∑√°¬∑vel: (1) Em matem√°tica algo que podeassumir valor conjunto valores; (2) computa√ß√£ espa√ß reservadona computador capaz determinado dado quepode alterarse durante execu√ß√£ programa Vari√°veisTodo JavaScript precisa ser armazenado em local na docomputador identificarmos tal utilizamos vari√°veis defini√ß√£ bem simples vari√°veis nomes locais onde armazenados representa√ß√£ √© ess√™ncia programa√ß√£ FredBrooks The Mythical ManMonth definirmos vari√°vel palavra var seguida nomeescolhido vari√°vel Vari√°veis podem ter qualquer nome com exce√ß√£ palavras reservadas exemplo reservada voc√™ pode dar nome vari√°vel var Outras palavras reservadas incluem controles fluxo defini√ß√µes pr√≥prio JavaScript Nomes tambm podemconter espa√ß come√ßar mas conter n√∫meros depoisdo primeiro caracter Alguns s√≠mbolos utilizados $ _ Por exemplo:var = 3;var $b * ;consolelog(Valor : ); // ‚Üí Valor 3consolelog(Valor $b: $b); 9√â importante mente devem interpretadas como‚Äúcaixas‚Äù guardam valores ‚Äúplacas‚Äù apontam valores est√£ Assim placas mudar posi√ß√£ apontada vari√°vel isso reutilizar outros valores Veja abaixo:var tempo Sol;var temperatura 22;consolelog(Tempo agora: %s %d¬∞ tempo temperatura);tempo Nublado;temperatura 2;consolelog(Tempo temperatura);Podemos mudamos Sol NubladoJ√° temperatura 22 20 vez atribui√ß√£ Percebeu utilizamos chave quando atribu√≠mos segundo valor Isso √©poss√≠vel porque j√° foi declarada s√≥ queremos ela declarar nova vari√°vel dentro string fun√ß√£ consolelog utilizadas &lt;href=https://enwikipediaorg/wiki/String_interpolation&gt;interpola√ß√£ string Interpola√ß√£ tcnica substitui s√≠mbolosespeciais passados Cada s√≠mbolo indica formata√ß√£especial No exemplo stringenquanto %d n√∫mero Atalhos atribui√ß√£Muitas vezes mesma fornece recebe express√£ como√© caso anterior h√° algunsatalhos operador atribui√ß√£ diminuem quantidade escrita c√≥digo Veja seguir:var += nuvens;temperatura = temperatura);Na utilizando += executa concatena√ß√£ valor direita depois atribui resultado tempo Algo similaracontece = nesse faz subtra√ß√£ atribu√≠do vari√°veltemperatura Esses atalhos funcionam operadores aritmticos* / %Outros dois incremento (++) decremento() Ambos inteiros possuem comportamentosimples: adicionam subtraem n√∫mero unidade atribuem resultado pr√≥pria t1 22;var t2 11;t1++;t2;consolelog(Temperatura 1: t1); Temperatura 23¬∞consolelog(Temperatura 2: t2); 10¬∞Atribui√ß√µes ++ retornam valor ent√£ podereescrever c√≥digo acima como:var 11;consolelog(Temperatura t1++); 22¬∞consolelog(Temperatura t2); 11¬∞consolelog(Temperatura 10¬∞No entanto atribui√ß√µes tem comportamento diferente dependendo daposi√ß√£ colocados Quando precedem valorap√≥s incremento/decremento; sucedam antes doincremento/decremento Assim:var ++t1); t2); 10¬∞consolelog(Temperatura 10¬∞Atribui√ß√£ condicional√â poss√≠vel var√°veis forma condicional operador tern√°rio possui sintaxe similar :[condi√ß√£] [valor verdadeiro] : falso]Vamos entender melhor exemploSuponha queira exibir se n par √≠mpar verificar √≠mpar testar m√≥dulo √©zero ( seja sobra resto divis√£ dois) Se essacondi√ß√£ verdadeira atribuiremos par ao resultado Caso contr√°rioatribu√≠remos √≠mpar esse pequeno algoritmo poderia ser:var 11; n√∫merovar % 2 == 0 √≠mpar;consolelog(resultado);Teste veja resultadosConclus√£Vari√°veis principal acesso √† que utilizadas juntascom fundamento darepresenta√ß√£ dos dados algoritmo pr√≥ximo artigo veremos declara√ß√µes controle fluxo execu√ß√£ condicionais repeti√ß√µes evoluirmos ainda mais nossa capacidade desenvolver c√≥digosem JavaScript"
  },
  {
    "url": "/blog/introducao-ao-node.js/",
    "title": "Introdu√ß√£o ao Node.js",
    "index": " Nodejs popularmente conhecido apenas como Node √© ambiente execu√ß√£ JavaScript que acompanha navegador Node utiliza V8 motor execu√ß√£ mesmoutilizado pelo navegador Google Chrome tambm possui sistemagerenciador pacotes NPM contm algunsmilhares m√≥dulos opensource dispon√≠veis em reposit√≥rioUtilizando mesmos princ√≠pios do JavaScript modelo concorr√™ncia baseado emla√ß eventos queroda thread √∫nica No entanto grande parte das opera√ß√µes podembloquear la√ß por muito tempo implementadas forma ass√≠ncrona evitandoque c√≥digo bloqueie tempoConvencionalmente implementa√ß√µes servidores linguagens Java PHPutilizam estratgia criar cada conex√£ cria√ß√£ thread aloca√ß√£ mem√≥ria chega at√© alguns megabytesIsso pode se tornar custoso medida n√∫mero conex√µes paralelas aumentaPragmaticamente quando Nodejs precisa executar opera√ß√£ entrada sa√≠da leituras arquivos rede banco dados entre outras ao invs bloquear fluxo resultado esteja dispon√≠vel ele escala em fila tarefas volta ser executado estiverdispon√≠velEsse concorr√™ncia ass√≠ncrono permite sejacapaz manipular v√°rios fluxos diferentes sem necessidade gerenciar threads paralelas tarefa √°rdua prop√≠cia bugsNo essa caracter√≠stica ass√≠ncrona parecer estranha desenvolvedores est√£ acostumados com ambientes fazemopera√ß√µes s√≠ncronas Ainda assim filosofia todas coisas chave sucesso Node Enquanto servidoresconvencionais for√ßam manterem linha enquanto arquivos carregados no servidor requisi√ß√µes rede executadas despachacada conex√£ recebida continua aceitar pr√≥ximas eventosass√≠ncronos fazem trabalho tr√°s √∫nico adotar estratgia Outras plataformas quecompartilham similar caso doTwisted Python doTornado linguagem Python alm daespecifica√ß√£Servlets 30 linguagem JavaInstalando NodejsVamos instalar atravs NVM Noterminal digite:curl https://rawgithubusercontentcom/nvmsh/nvm/v0352/installsh |Rodando comando acima ir√° fazer download script instala NVM execut√°lo Esse clona reposit√≥rio pasta tempor√°ria~/nvm coloca vari√°veis ambiente algum arquivo perfil doterminal (~/_profile ~/zshrc ~/profile ~/rc)Voc√™ verificar foi instalado utilizando commando abaixo:command v nvmSe tudo deu certo sa√≠da deve nvmVamos agora rodar √∫ltima vers√£ vel execute commando seguir:nvm install stableAp√≥s isso ative utilizandonvm use stableVoc√™ aprender mais sobre nap√°gina GitHub projeto instala√ß√£ digite abaixonode v pequeno exemplo exemplificar facilidade HTTP vamos fazer minutos Vamos web server responde Hello World emformato texto simples qualquer requisi√ß√£ Exemplo tirado dap√°gina oficialvar http = require(http);http createServer(function (req res) { reswriteHead(200 ContentType: text/plain }); resend(Hello Worldn); }) listen(1337 127001);consolelog(Servidor rodando http://127001:1337/); rodar salve nome exemplo examplejs executecom terminal da seguinte forma:node examplejsVoc√™ receber mensagem Servidor emhttp://127001:1337/ Com navegador na barra endere√ß endere√ß http://127001:1337/ veja mensagemConclus√£ resolveu muitos problemas novas aplica√ß√µes mobiledemandavam mas bala prata serve aplica√ß√£Certos requerem solu√ß√µes difernetes funcionar muitobem √≥tima ferramenta ter invent√°rio"
  },
  {
    "url": "/blog/javascript-basico-4/",
    "title": "JavaScript B√°sico #4",
    "index": "No artigo anteriorvimos como criar vari√°veis atribuir valores √† elas Tambm foi mostrado algunsatalhos atribui√ß√£ formas modificar das vari√°veis Nessetexto vamos aumentar nossa compreens√£ c√≥digos em JavaScript entender declara√ß√µes controle que linguagem possui ¬∑cla¬∑ra¬∑√ß√£: (1) √ß√£ efeito declarar; (2)Afirma√ß√£ formal; (3) Asser√ß√£ expl√≠cita; partir agora nossos come√ßam ficar mais extensos contendo v√°riaslinhas console dos navegadores √© adequado essassitua√ß√µes Salvar arquivos execut√°los no Nodejs √© boa op√ß√£ executar por exemplo arquivo chamado examplejs noNode voc√™ pode acessar diret√≥rio do terminal digitar:node examplejsExpress√µes Declara√ß√µesExpress√µes declara√ß√µes c√≥digo produzem valor Como vistoanteriormente utilizamos express√µes todo momento JavaScript: atribui√ß√£ express√£ compara√ß√£ opera√ß√£aritmtica entre outrasTodavia somente resolvem problemas precisamos lidarquando estamos codificando Por muitas vezes queremos fragmentodo seja executado dada condi√ß√£; ainda trecho c√≥digo m√∫ltiplas vezes isso declara√ß√µes fluxoDeclara√ß√µes fluxo tambm chamadas &lt;ilang=en&gt;statements palavras chaves descrevem comportamento doc√≥digo possui conjunto compacto podem sercombinadas adicionar complexidade c√≥digo Express√µes declara√ß√µes mas possuem diferen√ß sempre retornam valorDeclara√ß√£ bloco b√°sicas da defini√ß√£ blocoutilizada agrupar outras declara√ß√µes Todo bloco √©delimitado par {‚Ä¶}{ [declara√ß√£ 1] 2] 3] [‚Ä¶]}Importante: Diferente linguagens C Java JavaScript define escopo declaradas com var est√°intimamente ligado declara√ß√£ fun√ß√µes Vamos aprofundar assunto escopo artigos futuros veja exemplo abaixo entendermelhor:var = 0;{ consolelog(); // ‚Üí 0 var 1; 1}consolelog(); 1 vari√°vel oculta pela segunda mesmonome Ambas mesma vari√°vel isso ap√≥s sa√≠da dobloco valor alterado dentro mantidoDeclara√ß√µes condicionais condicional fluxo executa dependendo condi√ß√£ booleana ser avaliadaCondicional √∫nica if ‚Ä¶ else tem executar pr√≥xima bloco declara√ß√µes se avaliada true pareado com else assim sucede forfalse Voc√™ encadear v√°rios if ser√£ testados cadavez Veja exemplo:if (condicao1) consolelog(Condi√ß√£ 1 verdadeira);if (condicao2) { consolelog(Bloco declara√ß√µes); 2 verdadeira);} falsa);if (condicao3) 3 (condicao4) falsa 4 falsas);}Falsy TruthyNas condicionais express√£ true false entanto mesmo tipo booleano JavaScript coers√£ tipos trata alguns especiais avaliacomo false quando utilizados contexto booleano Esses chamados falsy :Valores indefinidos undefined null;N√∫meros NaN;String vazia Qualquer outro incluindo objetos avaliadoscomo true chamados truthy preciso aten√ß√£ especialcom primitivos inst√¢ncias Boolean exemplo abaixo:var p false;var new Boolean(false);if (p) consolelog( falsa pois boolean);if () verdadeira c objeto);Condicional m√∫ltipla switch case poderosa complexa permite desenvolvedor escreva combine valor enumerado Se houver combina√ß√£ ativado seguem sintaxe resumida em:switch ([express√£]) case [express√£o1]: [declara√ß√£] [express√£o2]: default: [declara√ß√£]} mecanismo fallthrough seja partir combina valor todas pr√≥ximasdeclara√ß√µes executadas tambm temperatura 20;switch (temperatura) 0: consolelog(Temperatura: graus); 20: 20 30: 30 acima graus);}var clima Nublado;switch (clima) Sol: consolelog(Hoje est√° dia sol); Nublado: cu nublado); Chuva: chuvoso); consolelog(Clima informado);}Podemos ver desse abaixo:Temperatura: grausTemperatura: grausHoje nubladoHoje chuvosoClima informado ao deparar primeiramente avalia express√£ inicia cadeia busca r√≥tulos combinem condi√ß√£ Caso associadas ele executadas Alm disso fallthrough √©ativado Assim combinado executadas inclusive defaultCaso queira tenhaefeito utilizar break for√ß doswitch anterior utilizando cada dascondi√ß√µes:var break; break;}var informado); break;}Que vai ter esperado sa√≠da:Temperatura: nubladoPor utilidade default colocado final bloco precisanecessariamente assim colateral colocar antes dofinal que ativar fallthroughqualquer ser√° executada raramente desejadoDeclara√ß√µes la√ßDeclara√ß√µes la√ß utilizadas repetido H√° tr√™sprincipais for while whileTambm poss√≠vel dar esses la√ß localiz√°los atravs nomecom label continueLa√ß simples while la√ß pr√≥ximadeclara√ß√£ enquanto for forfalse segue declara√ß√£ap√≥s la√ß testada declara√ß√µesserem executadas fazer infinitos nunca parambasta trueVamos calcular 2102^{10}210 resultado 1;var expoente 0;while (expoente 10) * 2; expoente++;}consolelog(resultado); 1024La√ß do‚Ä¶while do‚Ä¶while parecido while: enquanto while do‚Ä¶while ordem avalia√ß√£ expre ss√£ rela√ß√£ declara√ß√£ Enquanto false chega nem do‚Ä¶while executada aomenos vez indepentende La√ß infinitostambm feitos bastando trueUsando anterior do 0;do += 1;} 10);consolelog(resultado); 1024La√ß completos for repete at√© dadaavaliada Porm junto condi√ß√£ ela carrega duasdeclara√ß√µes: inicializa√ß√£ passo executado faz seguintes passos ordenadamente:Executa inicializa√ß√£Se true correspondente; falsesai sem passo;Executa passo volta item n√∫mero 2 normalmente utilizada iniciais √†svari√°veis controle J√° passo indica qual ritmo deve terLembrese vaziastambm infinitosVamos c√°lculo escrito for:var 1;for (var 0; 10; 1) 2;}consolelog(resultado); 1024Veja declarada na passo dado 1Declara√ß√µes r√≥tulo quebra fluxo cria√ß√£ identificam declara√ß√£Qualquer rotulada porm esse recurso emla√ß aninhados Dessa forma interromper execu√ß√£ la√ßaninhados espec√≠ficos forma declarativaDeclara√ß√µes r√≥tuloDeclara√ß√£ rotula√ß√£ marca posi√ß√£ mesmas regras nomes dados Dada sintaxe:[r√≥tulo]: [declara√ß√£]Quebra breakComo j√° vimos switch r√≥tulointerrompe atual Em caso la√ß declara√ß√£break faz atual pare imediatamente continue execu√ß√£ Podemos breakacompanhado interrompida primeira r√≥tulo simples:breakbreak [r√≥tulo]Quebra continue execu√ß√£ s√≥ serutilizado la√ß continuequebra itera√ß√£ nova condi√ß√£ novamente executadotambm Quando acompanhado r√≥tulo comportamentomas rotulado √©continuecontinue [r√≥tulo] modo ruim pouco eficiente exibir naturais menoresque 100 auxilia r√≥tulomostradosvar j 0;lacoExterno: i ; (i &gt;= 100) lacoExterno; (true) (j consolelog(j + i); j++; } }}Conclus√£Declara√ß√µes blocos constru√ß√£ linguagem Utilizar emsequ√™ncia d√° novas maneiras permitindointerferir instru√ß√µes acordo condi√ß√µes desejar valores sempreresultam outrasdeclara√ß√µes"
  },
  {
    "url": "/blog/javascript-basico-5/",
    "title": "JavaScript B√°sico #5",
    "index": "Anteriormente aprendemos comocontrolar execu√ß√£ do fluxo c√≥digo JavaScript atravs declara√ß√µesTambm vimoscomo atribuir valores primitivos vari√°veis como manipul√°los no c√≥digoEntretanto somente arranhamos superf√≠cie das funcionalidades que linguagemoferece Nessa publica√ß√£ vamos entender melhor sobre objetosPropriedadesTodo valor em exceto null undefined possui propriedadesque podem ser acessadas por chave meio operador Propriedades valores recebem nome objeto Veja exemplo abaixo:var str = javascript;strlenght; // ‚Üí 10var num 3;numtoFixed; function toFixed propriedade lenght armazena n√∫mero representa quantidade caracteres essa string possui seja comprimento da cadeia J√° propriedade toFixed √© refer√™ncia fun√ß√£ Em JavaScript fun√ß√µes tratadas isso atribu√≠das proprieades √â comumchamar propriedades mtodosObjetosAlm tipo primitivo tambm tipoObjeto Objetos permitem agrupamento outros valoresidentificados chave ess√™ncia objetos arranjos associativos tambm chamados mapas tabelas s√≠mbolos dicion√°rios onde cada √© √∫nica apontam valores &lt;img src=/images/20151015javascriptbasico5/objectsvg alt=objeto com apontando seus respectivos valoresdecoding=async loading=lazy /&gt; objeto conjunto v√°rios pares chavevalor Cada aponta valor Declarando objetosEm normalmente declarados literal objeto{‚Ä¶} contm chavevalor separadas v√≠rgulasDesde ECMAScript 2015 √∫ltima pode sucedida v√≠rgula chaves ter qualquer valor mas seguem mesmas regras nomes vari√°veisvar passaro { nome: Corru√≠ra nomeCientifico: Troglodytes musculus};Acessando propriedadesComo outro voc√™ acessar operador continua√ß√£ anterior:consolelog(passaronome); Corru√≠raconsolelog(passaronomeCientifico); Troglodytes musculusVoc√™ mesma forma feitocom vari√°veispassaronome Bemtevi;passaronomeCientifico Pitangus sulphuratus;consolelog(passaronome); Bemteviconsolelog(passaronomeCientifico); Pitangus sulphuratus√â poss√≠vel utilizar strings objetos Utilizar comochave permite vantagem escrever segue dosidentificadores vari√°veis come√ßando comn√∫mero contendo espa√ß exemplo No entanto definidas stringspossuem sintaxe pouco diferente veja Trincaferro nome cientifico: Saltator similis};H√° diferen√ß ao regras identificadores Nesses casos necess√°rio operador acesso [‚Ä¶] acessos anterior abaixo:consolelog(passaronome); Trincaferroconsolelog(passaro[nome]); Trincaferroconsolelog(passaro[nome cientifico]); Saltator similispassaronome Ticotico;passaro[nome cientifico] Zonotrichia capensis;consolelog(passaronome); Ticoticoconsolelog(passaro[nome]); Zonotrichia capensisconsolelog(passaro[nome similisAdicionando propriedadesPor serem arranjos associativos inser√ß√£ propriedadesap√≥s declara√ß√£ Assim podemos reescrever seguinteforma:var {}; Objeto sem declaradaspassaronome Sabi√°laranjeira;passaro[nome Turdus rufiventris;consolelog(passaro[nome]); Sabi√°laranjeiraconsolelog(passaro[nome Turdus rufiventrisVerificando exist√™ncia propriedadeQuando acessamos existe objeto recebemos comoresultado undefined Agora se undefinedacess√°la resulta Verificar propriedade√© garantia exista objeto verificar utilizamos operadorin retorna true caso esquerda falsecaso contr√°riovar cor;consolelog(chave in passaro); falseconsolelog(passaro[chave]); undefinedpassarocor Amarelo;consolelog(chave trueconsolelog(passaro[chave]); AmareloRemovendo propriedades delete remove objetoconsolelog(cor truedelete passarocor;consolelog(cor falseIterando for‚Ä¶in√â iterar todas declara√ß√£for‚Ä¶in itera√ß√£ visitada pelo la√ß declara√ß√£for‚Ä¶in itera enumer√°veis ordemarbitr√°ria Veja:var Patativa Sporophila leucoptera id: 1 extinct: false};for (var passaro) consolelog(Propriedade %s Tipo: %s chave typeof passaro[chave]);} resultado acima igual escrito abaixo ter ordem diferente Propriedade extinct boolean cientifico string id number stringDiferen√ß entre objetosNo categorizados seguinte forma:Valores booleano n√∫mero valoresnull undefined;Qualquer objeto grande modo comparados mutabilidade conte√∫dosCompara√ß√£ comparados ‚Äúconte√∫do‚Äù doisvalores tem mesmo conte√∫do iguaisvar tres 3;consolelog(3 == 4); falseconsolelog(tres 3); trueconsolelog(xyz xyz); trueJ√° refer√™ncia identidade si mesmo conte√∫do considerados obj1 prop: 1 };var obj2 };obj1 obj2; falseobj1 obj1; trueobj1 Atribu√≠mos obj1obj1 trueMutabilidadeValores imut√°veis imposs√≠vel mudar esses tipos dados Toda vez manipula na verdade gera novos partir dos antigos quesejam id√™nticosvar string;consolelog(lenght); 6alenght 9;consolelog(lenght); 6a outra string;consolelog(lenght); 12Por lado mut√°veis Alterar adicionar remover propriedade novo antigo mesmoobjeto modificado quando atribu√≠mos propriedades objetos estamos indicando refer√™ncia Se duas refer√™ncias diferentes direcionam valoralterar reflete mudan√ß todos ‚Äúapontam‚Äù elevar Patativa ave passaro;consolelog(avenome); Patativaavenome Patativadocampo;consolelog(passaronome); PatativadocampoConclus√£Objetos fornecem modos agrupar s√≥ conjunto dasestruturas dados mais b√°sicas JavaScript Quase todo elemento dentro dalinguagem objetoApesar possu√≠rem nome devem confundidos conceito programa√ß√£ orientada definido comoinst√¢ncia classeComo dito anteriormente Javascript associativosdin√¢micos maioria pessoas acredita ci√™ncia computa√ß√£ arte g√™nios Na realidade oposto muitas pessoasdesenvolvendo coisas outras muro pequenas pedras Donald Knuth"
  },
  {
    "url": "/blog/javascript-basico-6/",
    "title": "JavaScript B√°sico #6",
    "index": "J√° vimos funcionamento objetos estruturas controleem JavaScript ambos conceitos essenciais aprendizagem da linguagem escrita algoritmos Agora vamos aprofundar nosso entendimento sobre unidade computa√ß√£ JavaScript: fun√ß√µes fun√ß√£ √© trecho c√≥digo que pode ser chamado por fluxo execu√ß√£ incluindo si mesma vari√°vel referencia Quando fun√ß√£√© chamada argumentos passados como entrada poderetornar opcionalmente valor qualquer fun√ß√£: (1) alguma coisa faz usada; (2) Em matem√°tica rela√ß√£ qual elemento conjunto √©associado exatamente outro conjunto (3) computa√ß√£ rotina retornar resultado Fun√ß√µes extremamente √∫teis podem utilizadas reutiliza√ß√£ c√≥digo encapsulamento composi√ß√£ dados em diversas linguagens programa√ß√£ No entanto modo fun√ß√µes tratadas JavaScript serestranha maioria dos desenvolvedores Por isso importante ter bomentendimento trabalham voc√™ possaextrair m√°ximo linguagemDeclarando executando fun√ß√£ declarada com aux√≠lio palavrachave function seguido: nome fun√ß√£; lista par√¢metros entre par√™nteses separado v√≠rgulas ; declara√ß√µes definem essa par chaves {‚Ä¶}Por exemplo abaixo define chamada quadradofunction quadrado(numero) { return numero * numero;} quadrado tem √∫nico par√¢metro definida por √∫nica declara√ß√£ consiste do multiplicadopor ele mesmo Entretanto definir significa executar c√≥digodeclarado Definir dar queser√° quando for requisitadoChamar realmente c√≥digo chamar utiliza seguido dosargumentos entrada par√™nteses exemplo anterior podemoschamar segue:quadrado(3);Nesta assume 3 fun√ß√£ executada resultado 9 retornado fun√ß√£ visualizaresse atribu√≠lo mostrar no consolevar resultado = quadrado(3);consolelog(resultado); // ‚Üí 9Valores primitivos caso valores tipo n√∫mero fun√ß√µes valor seja c√≥pia co passada quandoela chamada original argumento alterado Veja exemploabaixo:function somaUm(numero) ++numero; consolelog(numero dentro numero);}var 0;consolelog(numero antes numero);somaUm(numero);consolelog(numero depois numero); sa√≠da desse ser√°:numero 0numero 1numero 0No objetos refer√™ncia mesmo objeto√© passado Dessa forma mutar objeto efeitos colaterais fora Veja:function ativar(cupom) cupomativo true;}var cupom codigo: 000X ativo: false };consolelog(cupom %s %s cupomcodigo cupomativo);ativar(cupom);consolelog(cupom cupomativo); ser√°:cupom 000X falsecupom trueDevido caracter√≠sticas mais especificamente &lt;ilang=en&gt;hoisting condicionalmenteQuando temos duas nome h√° conflito refer√™ncia issocausa erro poss√≠vel escrever abaixo:if (nota 7) resultado() Reprovado; }} else Aprovado; }}consolelog( √©: + resultado());Aridade passagem argumentosDiferente muitas linguagens restringe quantidade argumentos receber dada aridade fun√ß√£Supondo acima chamadas completamente v√°lidas JavaScript:function numero;}consolelog(quadrado(2)); 4consolelog(quadrado(5 1 8)); 25consolelog(quadrado()); NaN oficialmente aceita argumento executamos fun√ß√£passando fun√ß√£ ignora; Sepassamos menos atribuiundefined faltantes &lt;href=https://ptwikipediaorg/wiki/Aridade&gt;aridade fun√ß√£ n√∫mero recebe par√¢metro√© denominada un√°ria; dois par√¢metros bin√°ria; tr√™s tern√°ria; assim diante Caso receba denominadanul√°ria primeiraclasseFun√ß√µes valores primeira classe tratadas qualquer na linguagem Assim serpassadas retornadas Fun√ß√µespodem tambm serem atribu√≠das vari√°veisAlm disso toda objeto propriedades mtodos associados Apesar typeof function sempre inst√¢ncia objeto abaixo:function numero;}function informacoes(funcao) consolelog(typeof funcao); consolelog(funcao instanceof Object); Function); consolelog(funcaoname);}var funcao quadrado;informacoes(funcao); acima ter√° sa√≠dafunctiontruetruequadradoExpress√µes funcionaisEm declara√ß√£ retornada valor seja express√£ funcional Podemos atribuir potencia2 seguinte forma:var numero;};consolelog(quadrado(2)); 4consolelog(potencia2(2)); 4 permite express√µes funcionais sejam an√¥nimas seja requerem definidas Mais vez podemos reescrevernossa funcional:var (numero) numero;};consolelog(quadrado(6)); 36Apesar muito semelhante utilizar funcionalan√¥nima significado diferente resultadointeressante condicionamentediferente das declaradas agora v√°lido emJavaScript:var resultado;if () };} };}consolelog( resultado());Fun√ß√µes an√¥nimas frequentemente permitem escrever coeso expressivo algumas refer√™ncias chamadas apenas lambdasFun√ß√µes alta ordemPor classe fun√ß√µes ordem sejapodemos ent√£ passar outra fun√ß√µescomo exemplo:function multipliquePor(n) (x) x n; };}var dobro multipliquePor(2);var triplo multipliquePor(3);consolelog(dobro(6)); 12consolelog(dobro(9)); 18consolelog(triplo(3)); 9consolelog(triplo(4)); 12Note multipliquePor pega n retorna novafun√ß√£ ent√£ multiplica xpor n criar fun√ß√µes doisque chamamos dobro; tr√™s triplo Ao final algunsdiferentes argumentosFun√ß√µes ordem JavaScriptprincipalmente desejamos codificar estilo pr√≥ximo paradigmafuncional Entender entender maisfundamentais closuresConclus√£ agradecimentosNesse epis√≥dio aprendemos declar√°las suas principaiscaracter√≠sticas utilizada tanto declara√ß√£ quanto √â fundamentalcompreender classeChegamos ao fim srie B√°sico mas conte√∫do dalinguagem funcionalidades Com visto at√© aqui j√° podecriar programas simples algoritmos JavaScript Gostaria agradecer amigo Guilherme minha amiga Mariana pela revis√£ textos que permitiram melhor leitura blogPretendo lan√ßar outros falando aspectos profundos masincrivelmente termos tcnicos tais processo hoisting closures opera√ß√µes bin√°riasentre outros Tambm quero programa√ß√£ paradigmaorientado funcional"
  },
  {
    "url": "/blog/javascript-intermediario-1/",
    "title": "JavaScript Intermedi√°rio #1",
    "index": "Nessa publica√ß√£ vamos focar em dos aspectos que mais geram confus√£ entre desenvolvedores est√£ iniciando aprendizado JavaScript: escopolxico vari√°veis Mas √© escopo lxico vari√°vel vari√°vel definida c√≥digo recebe identificador √∫nico nome que√© utilizado quando queremos referenciar valor essa aponta trecho do qualquer identificada por √©definido como da vari√°vel Fora desse bloco √©indefinida outro identificado esse nome l√©¬∑xi¬∑co: (1) voc√°bulos l√≠ngua; (2) Voc√°bulosusados num dom√≠nio especializado Na maioria das linguagens descendentes C pelo bloco ela foi declarada Lembrando sequ√™ncia declara√ß√µes entre par chaves {‚Ä¶} No JavaScript nem sempre quem define vari√°vel tudo depende forma com vari√°vel declaradaAntes ECMAScript 2015 s√≥ existia declarar vari√°veis: utilizandoda palavra chave var 2015 trouxe duas alternativas let const definem diferente tambm ditam mutabilidade declaradaDeclara√ß√£ vari√°veis varDeclara√ß√µes var fun√ß√£ seja fun√ß√£ local nome Essa abordagem bastante peculiar difere linguagensveja exemplo abaixo:var x = foobar;consolelog(x); // ‚Üí foobarfunction exemplo() { foo; consolelog(x); foo for (var i 0; 1; i++) bar; bar } bar}exemplo();consolelog(x); foobarNotase que apesar declarada dentro serredeclarada novamente la√ß altera√ß√µes feitas no la√ß se mantmmesmo ap√≥s conclus√£ J√° fora fun√ß√£exemplo alterado Podemos ver definiu escopoda x mas corpo Declara√ß√µes let declara√ß√£ let adicionada ao permitir declara√ß√£ tenham assim ter comportamento semelhante C Java Veja mesmoexemplo anterior porm agora utilizando na vari√°veis:let (let foo}exemplo();consolelog(x); foobar diferen√ß resultados d√° principalmente onde bloco delimita fun√ß√£Declara√ß√µes const padronizada naECMAScript declara porm refer√™ncia fixa seja const pode ser atribu√≠da novamenteap√≥s declara√ß√£ abaixo:const 42;const y name: foo };x 42; Erro!y bar }; Erro!√â importante mente poder dar ideia essadeclara√ß√£ cria constante constante refer√™ncia davari√°vel Por isso caso seja objeto voc√™ mut√°lo sem qualquererro Veja:const };yname bar;consolelog(y); {name: bar}y foobar Erro!Caso deseje construir objeto imut√°vel necess√°rio utilizar Objectfreeze &lt;img src=/images/illustrations/turtlesvg alt= tartaruga decoding=async loading=lazy /&gt;Conclus√£Como bom programador coisas importantes aprender√© sempre manter simplicidade Quando estamos falando sobre c√≥digo podemossimplific√°lo utilizamos apenas conceitoAlgumas vezes podemos tentados reutilizar representardois conceitos diferentes pr√°tica deve evitada pois leva c√≥digo efetivo dif√≠cil leitura recomendo utiliza√ß√£ const quanto estiver permita uso queutilize ES6 Caso tenha precise sejareatribu√≠do fa√ß escolha padr√£ fica limpo declarativo reatribu√≠√ß√£ necess√°ria contadoresacumuladores outros mecanismos loops utilize let Tambm vai indicarque somente utilizada declarada nafun√ß√£ inteiraSiga princ√≠pio representar conceito torne leg√≠vel declarativo Linguagens servem expressar pensamentos mas possibilitar pensamentos quais existiriam fossem elas Bertrand Russel "
  },
  {
    "url": "/blog/javascript-intermediario-2/",
    "title": "JavaScript Intermedi√°rio #2",
    "index": " srie JavaScript Intermedi√°rio busca passar maneira s√≥lida gradualcaracter√≠sticas fundamentais da linguagem Neste cap√≠tulo vamos voltar nossaaten√ß√£ importante esquecido quase mitol√≥gico aspecto linguagem: closures tambm conhecidas como fechos lxicos clausurasMesmo que voc√™ programe h√° muito tempo em nunca tenha ouvido nuncafalar aqui vai revela√ß√£: elas est√£ todolugar Closure √© tipo op√ß√£ especial linguagemnem declara√ß√£ padr√£ desenvolvimento falar verdade closures existem apenas no JavaScript &lt;ilang=en&gt;Closure conceito bem mais amplo com base na teoria implementa√ß√£ linguanges programa√ß√£ Justamente por isso necess√°rioentend√™las se possa compreender todas consequ√™ncias utiliza√ß√£Contudo antes entender precisamos dar passo atr√°s linguagens programa√ß√£ executadas utilizam mem√≥ria do computador pilha execu√ß√£ grande maioria das utiliza estrutura registrar subrotinas ativas programaEssa normalmente implementada pilhaEssa tem v√°rias responsabilidades incluem: armazenar ponto execu√ß√£ atual endere√ß qual subrotina ativa deve retornar valor quando terminar execu√ß√£ vari√°veis locais entreoutras forma geral podemos resumir funcionamento execu√ß√£como:Toda chamada empilha novo quadro contexto;Quadros permanecem at√© fim execu√ß√£ subrotina;Quando termina desempilhado liberando pr√≥xima estiver vazia considerado programa chegou ao execu√ß√£ estouro (stack overflow) ocorre quando quadros quantidade dispon√≠velpermite Em JavaScript consideramos fun√ß√µes subrotinas Veja c√≥digo abaixo quecontm tr√™s declara√ß√µes delas:function add(x y) { return x + y;}function div(x / avg(x var sum = y); div(sum 2);}consolelog(avg(4 5)); // ‚Üí 45 acima far√° tenha formasimplificada estados dado pela figura abaixo &lt;img src=/images/20160113javascriptintermediario2/stack1svg alt=Sequ√™ncia empilhamento dos acima decoding=async loading=lazy /&gt;Temos fun√ß√£ avg respectivo contendo par√¢metros 4 y 5; partir ponto chama add vezempilha contexto par√¢metros y 5;Ao executar add retorna 9 vari√°vel noquadro avg; ent√£ div vez respectivoquadro contexto 2; div termina vari√°velan√¥nima representada ~; resultado escopoglobal ~ impressa consoleAgora ver outro exemplo pouco complexo Considere c√≥digoabaixo:function mul(x) function (y) * y; };}var double mul(2);consolelog(double(2)); 4 desse ter√° simplificada seguintes dapilha: src=/images/20160113javascriptintermediario2/stack2svg mul par√¢metro 2;Ao refer√™ncia an√¥nima # contexto global; global double quadro par√¢metro 2;Mas espere √≠‚Ä¶ concluir apontada doubleprecisa x pertencia mul Noentanto j√° foi desempilhado porque execu√ß√£ finalizada Onde parar xBem senhoras senhores lhes apresento closure Muitoprazer!ClosuresClosures nada armazenam contextolxico interno possam ser utilizadas mesmo contextoj√° existe mais closure acontece declarada dentro doescopo outra alm disso interior referencia locais dafun√ß√£ exterior Quando exterior executada criadacontendo refer√™ncias quaisquervari√°veis necessita Closures capazes ‚Äúlembrar‚Äù vari√°veis pertencente escopo lxico onde foram declaradas quandoexecutadas fora Dessa forma redesenhar nosso esquema simplificado estado contemplando heap: src=/images/20160113javascriptintermediario2/stack3svg &lt;ilang=en&gt;closure an√¥nima vari√°vel pega dopar√¢metro 2 salvo multiplica pelo 2 valor multiplica√ß√£ retornado exibido console src=/images/illustrations/locksvg alt= s√≠mbolo enclausurado /&gt;Teoria propriedades closures linguagem consegue implementar closuresse modelo gerenciar mem√≥ria Em tais linguagens automaticamente desalocadasquando execu√ß√£ Entretanto closurerequer capturadas sobrevivam fun√ß√£original Por essas precisam alocadas sejam maisnecess√°rias utilizando mem√≥ria din√¢mica comumente heap invs pilha vida dessas controlado perman√ßam acess√≠veis enquanto houveralguma referencieIsso explica suportam &lt;ilang=en&gt;closures acompanham coletor lixoAlternativas uso coletor lixo gerenciamento seria controle manual continuar usando espa√ß closure mas ambas estratgias podem ter comportamento indefinido vez acontecer‚Äúrefer√™ncias selvagens‚Äù ProblemaFunarg descreve essa dificuldade alta ordem progra√ß√£ baseada pilhatais C C++ √â importante lembrar √©imune interfer√™ncia externa pr√≥pria Issogarante √°rea oculta pode √∫til representar privado Alm serem objetos identificadas refer√™ncia queambas apontem mesma fun√ß√£ Vide anterior temos:function mul(2);var triple mul(3);consolelog(double(6)); 12consolelog(triple(4)); 12consolelog(double == triple); falseConclus√£ utilize potencial m√°ximo √©fundamental closures √â voc√™consegue criar encapsulamento dados programar orientado eventos forma simples declarativa daqueles conceitoscuriosos paradoxalmente dif√≠ceis ub√≠quosdemais toda parte Mas programador torne apto utiliz√°lo favor solu√ß√µes concisas desenvolvidas conclus√µes chegamos objeto precisa primitivo programa√ß√£; comportamento constru√≠do meio valores algumas boas velhas express√µes lambdas &lt;href=https://wwwdreamsongscom/ObjectsHaveNotFailedNarrhtml&gt;Guy LSteele "
  },
  {
    "url": "/blog/javascript-intermediario-3/",
    "title": "JavaScript Intermedi√°rio #3",
    "index": "Nesse texto vamos compreender pouco mais sobre paradigma importantequando estamos programando em JavaScript alm disso entender dasprincipais caracter√≠sticas que levaram ao sucesso da linguagem: modelo concorr√™ncia ¬∑sin¬∑cro¬∑nis¬∑mo: 1 Qualidade estado ass√≠ncrono; 2 Aus√™ncia concorr√™ncia no tempo Assincronia JavaScriptPrograma√ß√£ ass√≠ncrona √© programa√ß√£ onde c√≥digo pode seguir fluxo execu√ß√£ ‚Äúpadr√£‚Äù Alm ass√≠ncrono podetratar interrup√ß√µes externas programa tais como chegada eventosinal temporizador entre outrasEm JavaScript podemos escrever forma f√°cil utilizando fun√ß√£setTimeoutque recebe dois par√¢metros: fun√ß√£ ser executada quantidade milissegundos indica tempo espera iniciar dessa fun√ß√£Veja exemplo abaixo:function foo() { setTimeout(function () consolelog(without one); } 1000); consolelog(fully dressed); 0); consolelog(You know);}consolelog(Smile my dear!);foo();consolelog(you are not); sa√≠da do acima ser√° escrita como:Smile dear!You knowyou notfully dressedwithout oneApesar dos logs serem colocados fora ordem alguns foramcolocados fun√ß√µes foram passadas setTimeout ser√£executadas somente ap√≥s for esgotado Vamos ver outro exemplo complexo Considere asyncCountTo(x) (var i = 0; x; i++) consolelog(i); (x i) * }}asyncCountTo(4);Qual acima Temos la√ß dispara v√°rias pormeio imprimem vari√°vel i Por maior seja surpresa exibe sa√≠da:4444Por qu√™ raz√£ desse comportamento se deve √† closureassociada passada setTimeout compartilhadapor todas closures por isso tem esse comportamento continuasendo executado continua sendo incrementada at√© chegue valorquatro quando condi√ß√£ falha S√≥ ent√£ &lt;ilang=en&gt;callbacks executados Caso voc√™ tenha familiaridade com closures &lt;href=https://maxroeckergithubio/blog/javascriptintermediario2/&gt;essapublica√ß√£ blog lhe ajudar No entanto percebeu mesmo zero fun√ß√£ imediatamente Bem aqui frente efeitos domodelo entrar detalhes partir agoraPrograma√ß√£ Orientada Eventos linguagem foi inicialmente desenvolvida adicionarfuncionalidades p√°ginas HTML navegador Netscape √â linguagemmultiparadigma suporta programa√ß√£proceduralorientada objetos funcional mas foiespecialmente atender programa√ß√£ orientada eventos queira saber hist√≥ria linguagemleia essa outrapublica√ß√£ blog eventos ajusta programa acordo comeventos seja podem feitas qualquer momento necessitam ‚Äúrea√ß√µes‚Äù parte programa muito utilizado desenvolvimento drivers sensores microcontroladores tambm predomina nodesenvolvimento aplica√ß√µes GUI pois requerem aplica√ß√£ reaja acordo intera√ß√£ usu√°rio coincid√™ncia ela seriautilizada ‚Äú quer adicionar algumas funcionalidades emp√°ginas HTML‚Äù certoEm eventos normalmente temos La√ß Eventos comumente chamado event loop aguarda acontecerem chamarfun√ß√µes designadas responder evento espec√≠fico comportamento qual detalhar daqui diante &lt;img src=/images/illustrations/steamenginesvg alt=M√°quina ciclos vapor decoding=async loading=lazy /&gt; Event Loop JavaScriptToda m√°quina possui √∫nicoque captura disparados pelo usu√°rio ambiente m√°quinaest√° alocada Se capturado possuiralgum callback associado executadaquando ocorrer tarefa enfileirada na fila tarefas ir√° motor execu√ß√£ JavaScript tarefas chamada job queue estrutura quearmazena refer√™ncia devem executadas geral motor algoritmo bastante simples:Aguarde ter tarefas;Execute primeira fim isto √© pilha esteja vaziaRetorne passo 1Na verdade vimos anteriormente ‚Äúexecuta fun√ß√£ tempo‚Äù adiciona eventloop sinal temporizador disparado segunto par√¢metroExistem outras formas tarefas fila elas:Adicionar listeners comaddEventListener;UtilizandosetIntervalpostMessage;Respostas requisi√ß√µes HTTP APIsXMLHttpRequest fetch dosnavegadores preemptivo √©poss√≠vel interromper corrente retornar posteriormenteSomente vez vez computa√ß√£ √©iniciada interrompida Assim h√° paralelismo dasfun√ß√µes loop &lt;href=https://ptwikipediaorg/wiki/Preemptividade&gt;Preemptividade capacidade sistema temporariamente execu√ß√£sem exigir coopera√ß√£ inten√ß√£ retomar posteriormente √â isso que colocado zero imediatamente Ainda necess√°rioterminar atual ent√£ &lt;ilang=en&gt;callback executado Isso explica comportamendo doc√≥digo anterior Na realidade garante fun√ß√£ vai per√≠odo mas ser√°enfileiradaOutro efeito colateral alguma tarefademanda muita computa√ß√£ inevitavelmente bloquear pormuito assim nenhuma outra poder√° iniciada est√° bloqueada callbacks das √ß√µes dousu√°rio respondidos adequado GUI apresenta estar‚Äútravada‚Äù exemploIndo almAgora j√° entende concorr√™ncia questionamentos podemestar perambulando pela cabe√ß: Mas fazemos requisi√ß√£ API fetch ainda capaz interagir tela demorev√°rios segundos conclu√≠da‚Ä¶ Como acontece bloqueado Diferentes m√°quinas virtuais implementam emfluxos paralelos fila Normalmente est√£relacionadas opera√ß√µes entrada comumente opera√ß√µes‚Äúlentas‚Äù Alguns exemplos executadas paralelamente incluem: leitura escrita arquivos rede stream multim√≠diaacesso banco dados outrosEssa publica√ß√£ apresentou vers√£ simplificada &lt;ilang=en&gt;event funciona v√°rios pontos queforam deixados lado bem sanidade explica√ß√£ No entantoacredito conseguido funcionamento m√°quinasvirtuais compreendido consequ√™ncias surgem uso interesse vis√£ completa recomendo ler sobre: microtarefas &lt;href=https://developermozillaorg/enUS/docs/Web/JavaScript/Reference/Global_Objects/Promise&gt;promises; instancia√ß√£ loops comWorkers;etapas apresenta√ß√£nos navegadores"
  },
  {
    "url": "/blog/javascript-intermediario-4/",
    "title": "JavaScript Intermedi√°rio #4",
    "index": "Hoje veremos caracter√≠stica bastante peculiar do JavaScript quenormalmente √© causa pequenos erros quanto estamos trabalhando com linguagem: hasteamento vari√°veis comumente chamado &lt;ilang=en&gt;hoisting has¬∑te¬∑ar: (1) Elevar prender ao topo haste (2) Altear i√ßar levantar Hasteamento vari√°veisNo momento execu√ß√£ c√≥digo JavaScript toda declara√ß√£ vari√°velpassam por processo hasteamento isto √© da vari√°vel √©elevada escopo atribu√≠do forma autom√°tica Esse √©comumente hoisting conceito pode ser poucoconfuso princ√≠pio ent√£ vamos exemplo pr√°tico Em √©poss√≠vel declarar fun√ß√£ cham√°la logo em seguida como no abaixo:function hello(name) { consolelog(Hello + name !);}hello(Max); // ‚Üí Hello Max!Entretanto voc√™ tambm chamar que ainda foi declarada seja acima reescrito abaixo assim continuafuncionando:hello(Max); Max!function !);}Isso acontece porque hello hasteada doc√≥digo compilador faz esse autom√°tica isso c√≥digocontinua funcionando normalmente mesmo vari√°veis declaradas comvar Veja:consolelog(x); undefinedvar x = 6;consolelog(x); 6 erro aconteceu entanto primeira sa√≠da undefined se vari√°vel declarada valor 6 Bem isso mecanismo hoisting somente eleva declara√ß√µes das vari√°veismas atribu√≠√ß√µes inicializam seja tem comportamento equivalente abaixo:var x;consolelog(x); undefinedx 6Declara√ß√µes locais passam pelo processo doc√≥digo x;consolelog(x);x 1;foo();consolelog(x);function foo() consolelog(x); var 2; consolelog(x);}Ser√° igual :undefinedundefined21No hoisting aplicado queutilizam var let const permite refer√™ncia ir√°lan√ßar tipoReferenceErrorConclus√£Podemos resumir essa publica√ß√£ como: eleva declara√ß√£ mas defini√ß√£; enquanto hasteamento fun√ß√µes tanto quando defini√ß√£ &lt;img src=/images/illustrations/hoistingsvg alt=Mecanismo elevar √°gua decoding=async loading=lazy /&gt;Ainda assim pelos exemplos anteriores comportamento hastear declara√ß√µes podem levar resultados confusos proporcionar dif√≠cil leitura √â importante siga algumasboas pr√°ticas escrita c√≥digo suasvari√°veis respectivo evita confus√£ hoisting pois deixa expl√≠citoOutra pr√°tica inicializa√ß√£ na sempre queposs√≠vel Dessa forma evitase valores indefinidos durante surpresas indesejadas"
  },
  {
    "url": "/blog/javascript-intermediario-5/",
    "title": "JavaScript Intermedi√°rio #5",
    "index": "Hoje iremos abordar IIFE pr√°tica muito utilizada no JavaScript quandoestamos desenvolvendo aplica√ß√µes m√≥dulos na linguagem j√° que ela garante c√≥digo cause seja afetado por efeitos colaterais externosIntrodu√ß√£ entender precisamos relembrar express√µes funcionais &lt;ilang=en&gt;closures em JavaScriptFun√ß√µes tratadas como qualquer outro valor JavaScript isso podemser atribu√≠das vari√°veis passadas par√¢metro retornadas comoresultado Toda vez express√£ resulta fun√ß√£ dizemos temos funcional declara√ß√£ fun√ß√£ utilizando palavrachavefunction sempre retorna refer√™ncia definida por tambm √© considerada vari√°vel podeexecutar referencia par par√™nteses (‚Ä¶)entre par√¢metros da fun√ß√£ Caso voc√™ queira ler mais sobre comportamento express√µesfuncionais recomendo leitura &lt;href=https://maxroeckergithubio/blog/javascriptbasico6/&gt;dessapublica√ß√£ blog Alm disso toda internamente escopo outra alm vari√°veis locais externa; closure closurearmazena lxico externa capaz acess√°lo mesmo quando execu√ß√£ tenha sido finalizada closure estadoprivado nada tem acesso esse estado exceto outras fun√ß√µesdefinidas closure Se quiser melhor &lt;ilang=en&gt;closures &lt;href=https://maxroeckergithubio/blog/javascriptintermediario2/&gt;essa outrapublica√ß√£ do blog pode lhe ajudar Padr√£ IIFECom conceitos relembrados introdu√ß√£ podemos criar IIFE IIFE express√£ funcional executada imediatamente ap√≥s ser definidaNormalmente (do ingl√™s ImmediatelyInvoked FunctionExpression) escrita defini√ß√£ consequenteexpress√£ seguida imediata execu√ß√£ Voc√™ utilizar padr√£ palavra chave function seguinte forma:(function () { // })();Veja entre primeiro externos estamos definindo fun√ß√£ logo seguida segundopar externos invocandoVamos aplicar exemplo pr√°tico Suponha queremos definir contador global √∫nico somente acess√≠vel via tr√™s fun√ß√µes: read queretorna atual contador; count incrementa docontador reset reinicializa contador poderia implementar solu√ß√£ tal c√≥digo abaixo:var state = 0;function read() return state;}function count() + 1; reset() 0; state;}count();count();consolelog(read()); ‚Üí 2reset();consolelog(read()); 0Apesar state armazena contador global √∫nica essa solu√ß√£ possui problemas: est√° dispon√≠vel todo subrotina globalmente Alm vari√°vel ‚Äúpolui‚Äù c√≥digo levar conflito nomes bugs dif√≠ceis serem encontradosPodemos proteger utilizando Vamos ent√£ refatorar acima pr√°tica:var counter (function var read: state; } count: reset: };})();countercount();countercount();consolelog(counterread()); 2counterreset();consolelog(counterread()); 0Agora acima protegida &lt;ilang=en&gt;closure dessa forma nenhuma fun√ß√£exceto reset tenhamos essas fun√ß√µes retorno objeto contm refer√™ncias fun√ß√µes acessamstate Por isso utiliza√ß√£ delas pouco modificada refatora√ß√£final encontrado pelo nome SEAF &lt;ilang=en&gt;SelfExecuting Anonymous Function) No entanto termo &lt;href=http://benalmancom/news/2010/11/immediatelyinvokedfunctionexpression/#iife&gt;introduzidopor Ben Alman considerado semanticamente adequado Afinal pr√°tica requer an√¥nimas Conclus√µes polui√ß√£ conflito vari√°veis permite aliviar confus√£ escopos bloco/fun√ß√£ dados pelomecanismo hasteamento JavaScriptOutra comum constru√ß√£ privado encapsulado utilizadas pelas fun√ß√µesretornadas ficam alocadas somenteessas possuem elas vimos exemplo post hoje ficou curto mas lembrese IIFEs das poucasalternativas simula√ß√£ √©poca anterior aoES2015 √â bom ter conhecimento invent√°rio"
  },
  {
    "url": "/blog/javascript-intermediario-6/",
    "title": "JavaScript Intermedi√°rio #6",
    "index": "No √∫ltimo texto da srie iremos abordar dos conceitos que mais causamconfus√£ em desenvolvedores est√£ iniciando na linguagem prot√≥tiposNo entanto espero ao fim dessa publica√ß√£ voc√™ compreenda mecanismo prot√≥tipos √© simples mas muito poderoso pro¬∑t√≥¬∑ti¬∑po: (1) Primeiro tipo criado original;(2) Algo feito pela primeira vez muitas vezes copiado imitado; (3)Nodelo padr√£ c√¢none Mtodos objetosEm JavaScript objetos estruturas dados agrupam duplas chavevalordenominadas propriedades chave propriedade nome aponta valor √∫nico pode ser apontado por v√°riaspropriedades do mesmo diferentes objetos propriedades objeto podemser acessadas meio operadores [‚Ä¶] Objetos fundamentalmente implementa√ß√µes arranjos associativos Se quer compreender melhor fundamentos emJavaScript recomendo tambm leitura &lt;href=http://maxroeckergithubio/blog/javascriptbasico5/&gt;dessa outrapublica√ß√£ blog Mas se arranjos associativos porque chamados ‚Äúobjetos‚Äù mapasdicion√°riostabelas hashcomo outras linguagens programa√ß√£Objetos tem comportamento bem diferente arranjosassociativos quando estamos tratando apontam fun√ß√µesQuando aponta fun√ß√£ ela recebe inclusive nomeespecial: mtodoMtodos fun√ß√µes podemdeclarados como fun√ß√£ qualquer palavrachave function Noentanto mtodos possibilidade utilizar par√¢metro impl√≠cito: this refer√™ncia pr√≥prio qual mtodo ‚Äúfaz parte‚Äù this precisa declarado passado utilizamosno corpo fun√ß√£ Vamos ver exemplo simples com no c√≥digoabaixo:const person = { firstName: Pedro lastName: Pipoca getFullName: function () return thisfirstName + thislastName; } toString: const fullname thisgetFullName(); [Person: ]; }};Como ver possui duas propriedades firstName lastName dois mtodos getFullName toString propriedadesfirstName lastName indicam sobrenome strings utiliza this acessar propriedades lastName retornar completo pessoa pormeio concatena√ß√£ strings J√° toString outra fun√ß√£que retorna vers√£ serializada stringconsolelog(personfirstName); // ‚Üí Pedroconsolelog(person[lastName]); Pipocaconsolelog(persongetFullName); [Function: getFullName]consolelog(person[toString]); toString] tanto quanto utilizamos operador [‚Ä¶] significa execut√°lo apenasreceber mtodo Quando queremos executar mtodoprecisamos alm acess√°lo par par√™ntesesconsolelog(person[getFullName]()); Pedro Pipocaconsolelog(persontoString()); [Person: Pipoca]Assim propriedade podemos verificar exist√™ncia com in:consolelog(getFullName in person); trueconsolelog(toString true excluir delete:consolelog(getFullName truedelete persongetFullName;delete persontoString;consolelog(getFullName falseconsolelog(toString trueMas que exclu√≠mos toString Porque aindaacusa ele existe person Bem ainda objetoent√£ execut√°lo Assim temos:consolelog(persontoString()); [object Object]Mas esse Essa sa√≠da condiz implementa√ß√£ fizemos acima‚Ä¶ Chega mistrios! temos aqui efeito dosprot√≥tipos plena √ß√£ &lt;img src=/images/illustrations/airshipsvg alt=Prot√≥tipo aeronave contendo bal√µes preenchidos v√°cuo title=Aeronave imaginada pelo italiano Francesco Lana Terzi (1631‚Äì1687) decoding=async loading=lazy /&gt;Prot√≥tipos objetosTodo JavaScript ter prot√≥tipo prot√≥tipo √© informalmente ‚Äúobjeto reserva‚Äù contm podem acessadas partir inicial noobjeto prim√°rio automaticamente busca prot√≥tipoantes resultar undefinedComo objeto caso seja encontrada noprot√≥tipo ent√£ prot√≥tipo assim pordiante hora ser√° null √©encerrada percorre toda cadeia prot√≥tiposantes undefinedNa verdade misterioso vimos acima realmente fazparte declaramos : Objectprototype Todo literal {‚Ä¶} Objectprototype prot√≥tipo; &lt;href=https://developermozillaorg/enUS/docs/Web/JavaScript/Reference/Global_Objects/Object#Object_instances_and_Object_prototype_object&gt;quepossui v√°rios incluindo Como definimos person acessarmos JavaScriptlogo encontra primeiro nem necessitando iniciar cadeia prot√≥tipos entando esse muda momento queexclu√≠mos person Caso acessemos toStringnovamente vai encontr√°la Objectprototype prot√≥tipos src=/images/20160409javascriptintermediario6/prototype1svg alt=Ilustra√ß√£ Objectprototype /&gt; totalmente independente daimplementa√ß√£ fizemos isso explica diverg√™ncia quetivemos acimaVoc√™ identificar fun√ß√£ObjectgetPrototypeOfJ√° criado opcionais exemplo Podemos vamos confirmar essassenten√ß abaixo:const {};const p ObjectgetPrototypeOf();consolelog(p == Objectprototype); trueconst pp ObjectgetPrototypeOf(p);consolelog(pp); nullVoc√™ criar fun√ß√£Objectcreateque recebe objetocriado Veja seguir onde querepresentam ponto coordenadas dimens√µes:var pointPrototype getDistanceFrom: (other) var dx Mathabs(otherx thisx); dy Mathabs(othery thisy); distance Mathsqrt(dx * dy); distance; }};var origin Objectcreate(pointPrototype);originx 0;originy 0;var point Objectcreate(pointPrototype);pointx 3;pointy 4;consolelog(pointgetDistanceFrom(point)); 0consolelog(pointgetDistanceFrom(origin)); 5Veja getDistanceFrom outro pontocom other calcula dist√¢ncia entre this Por causa dadelega√ß√£ chamado prim√°rioinicia prim√°rio thisx valor originx pointx pointPrototypex &lt;href=https://developermozillaorg/ptBR/docs/Web/JavaScript/Reference/Global_Objects/Math/abs&gt;Mathabs &lt;href=https://developermozillaorg/ptBR/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt&gt;Mathsqrt padr√£ retornam respectivamente absoluto raiz quadrada n√∫mero Devido prot√≥tipos preciso definir fun√ß√£getDistanceFrom vezes seja definida apenas podeser utilizada tenha prot√≥tipoIsso permite reutiliza√ß√£ c√≥digo bastante poderosa figura abaixoapresenta ilustra√ß√£ compartilhado: src=/images/20160409javascriptintermediario6/prototype2svg compartilhando prot√≥tipo /&gt;Voc√™ tenham passando primeiro Objectcreate algumas funcionalidadesb√°sicas estar√£ dispon√≠veis toString:const b Objectcreate(null);x 1;bx 2;consolelog(x); 1consolelog(bx); 2consolelog(toString()); Object]consolelog(btoString()); Erro! toString fun√ß√£√â poss√≠vel alterar ap√≥s &lt;href=https://developermozillaorg/enUS/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf&gt;ObjectsetPrototypeOfNo forma m√°quinas virtuais otimizam acesso propriedades cria√ß√£ opera√ß√£ muitolenta Alm disso efeitos colaterais envolvem mudan√ß prot√≥tipos imprevis√≠veis fonte bugs dif√≠cilidentifica√ß√£ tudo isso considerado m√° pr√°tica maioria das vezesConclus√µes grande vantagem oferecem consider√°vel ganho desempenho apresentam eficiente utiliza√ß√£ mem√≥riaquando distribuir repetido Afinal quandov√°rios compartilham h√° somente inst√¢ncia desseprot√≥tipo mem√≥ria recurso compartilhado √©necess√°rio aten√ß√£ extra muta√ß√µes feita Qualquermudan√ß protot√≥tipo afeta todos referenciam utilizados principalmente compartilhamento diversos fundamentais algunspadr√µes seguem paradigma programa√ß√£ orientado objetos respons√°veis boa parte poder expressividade quelinguagem oferece torna maissignificativa aliada funcionalidades presentes linguagemcomo alta ordem closures programa√ß√£orientada eventos"
  },
  {
    "url": "/blog/javascript-orientado-a-objetos-1/",
    "title": "JavaScript Orientado a Objetos #1",
    "index": "Hoje vamos iniciar nova srie publica√ß√µes sobre linguagem JavaScriptcom foco na programa√ß√£ orientada objetos Nessa srie espero que voc√™compreenda conceitos importantes como encapsulamento dados heran√ß polimorfismo em c√≥digo Vamos tambm entender mais fundo estrutura dosobjetos compreender estilo baseado prot√≥tipos doJavaScriptIntrodu√ß√£ r√°pida √† Programa√ß√£ Orientada ObjetosPrograma√ß√£ Objetos(POO) √© paradigma favorece uso objetos unidades computa√ß√£ contm combina√ß√£ vari√°veis fun√ß√µes Idealmente esseparadigma tem objetivo separar problema complexo pequenos problemasisolados resolvidos por fornecem protocolo ao mundoexterior pelo qual objeto pode fornecer informa√ß√µes paradigma: Exemplo norma padr√£ estabelecido ser seguido grande triunfo da Orienta√ß√£ Objetos dados fun√ß√µes quemanipulam esses est√£ agregados mesma podem protegersedo acesso manipula√ß√£ direta do ‚Äúmundo externo‚Äù ficam escopo interno chamados atributos atributos armazenam estado objeto seja conjunto valores contm Todavez valor algum atributo alterado muda estado Por vez possa usado mundo externo ele deve fornecer protocolo Protocolos objetos maioria compostos pormtodos Mtodos propriedades funcionais dos serexecutadas alterar retornar no objetoConstruir aplica√ß√µes com permite desenvolvedores adotem algumastcnicas valiosas:Heran√ß: capacidade poderem ‚Äúcopiar‚Äùcaracter√≠sticas outros seus mtodos propriedades √â recurso bastante poderoso reuso c√≥digoEncasulamento: encasulamento ‚Äúesconderem‚Äù suaspropriedades externo restringir permitindo queningum saiba efeitos colaterais altera√ß√£ num possainterferir funcionamentoPolimorfismo: polimorfismo definido habilidade chamarmtodos diferentes forma id√™ntica Quando dizemos conjunto polim√≥rfico significa desse conjuntopossuem protocolos id√™nticos aceitam mesmas entradas proporcionam sa√≠da No entanto implementa√ß√£ interna serdrasticamente diferente destinada promover maior flexibilidade facilidade manuten√ß√£ c√≥digo muito popular grandeescala Atualmente muitas linguagens populares Java C++ Python RubyPHP entre outras permitem JavaScript tambmest√° incluso nesse grupo possui algumas peculiaridades primeiro momento estranhas maioria desenvolvedoresacostumados linguagens &lt;img src=/images/20160415javascriptorientadoobjetos1/object1svg alt= homem opera ve√≠culo roda sentado dentro rodaprotegido mau tempo guardachuva fixado dispositivo title=J Lose of Patterson N J Ve√≠culo Roda N¬∞ 325548 decoding=async loading=lazy /&gt;Revisando JavaScript das utilizam se baseiam emclasses classe ‚Äúmodelo‚Äù ‚Äú&lt;href=https://ptwikipediaorg/wiki/Blueprint&gt;blueprint‚Äù cria√ß√£ responsabilidade definir interface ela criados baseada emclasses inst√¢ncias classesEm Javascript classes Como j√° vimos emposts anteriores objeto assemelha tabela hash Podemosdefinir literal {‚Ä¶}Veja:const pessoa = { name: Pedro email: pedro@emailcom getUsername: function () return thisemailsplit(@)[0]; }};consolelog(pessoa[name]); // ‚Üí Pedroconsolelog(pessoagetUsername()); pedropessoaemail joao@exemplocom;consolelog(pessoagetUsername()); joaoPodemos acessar atravs operador seguido dapropriedade [] passando chave &lt;emlang=en&gt;string palavra this quando utilizada objetoreferese pr√≥prio dessa podemos utilizar email doobjeto criado anteriormente mtodo getUsernameEntretanto literais possuem conceito encapsulamento pregado pela Objeto Todos acess√≠veis vis√≠veis lado fora objetoProt√≥tiposComo visto anteriormente Classes (OOC) Naverdade implementa outro ‚Äúestilo‚Äù objetos Prot√≥tipos (OOP)Prot√≥tipos bem simples servem ‚Äúreserva‚Äù outroobjeto Dessa forma buscamos propriedade est√°presente nele m√°quina virtual vai at√© prot√≥tipo buscar essapropriedade Caso resultado seja negativo novamente buscase doprot√≥tipo assim diante tenha protot√≥tipo propriedade encontradaCompreender funcionam essencial comoprogramar orientado voc√™ queira saber maissobre recomendo leituradesse texto ondedescrevo detalhes comportamento suas principaiscaracter√≠sticasOrienta√ß√£ JavaScript flex√≠vel desenvolvedorestenham liberdade construir diversas solu√ß√µes problemas objetivos quequeiram alcan√ßar estamos programando objetosisso diferente H√° m√∫ltiplas maneiras padr√µes programarorientado linguagemCada tcnica vantagem desvantagem caracter√≠stica essaflexibilidade desenvolvedor escolha solu√ß√£ adequadaao problema Essa pretende passar algunsconceitos tcnicas utilizadas programas garantam principais caracter√≠sticas justamente porisso iremos nos focar dois utilizados queremos desenvolveraplica√ß√µes objetos: construtores f√°bricas Ao final veremos novidades ES2015 esseparadigmaAt√© mais!"
  },
  {
    "url": "/blog/javascript-orientado-a-objetos-2/",
    "title": "JavaScript Orientado a Objetos #2",
    "index": "Hoje iremos compreender pouco sobre Construtores no contexto do JavaScriptOrientado Objetos padr√£ projeto cria√ß√£ objetos que possuimuita similaridade com orienta√ß√£ classes construtor: (1) aquele constr√≥i; (2) que domina saber construir voc√™ aproveite melhor texto √© recomendado tenha conhecimentodos conceitos b√°sicos objetos Voc√™ pode ler pequenaintrodu√ß√£no anterior dessa srieTambm conhe√ß comportamento caracter√≠sticas dosobjetos fun√ß√µes emJavaScript hoje longo porque achei importante unir principais t√≥picos cada em s√≥ publica√ß√£Introdu√ß√£Na objetos construtor rotina utilizada inicializar objeto cuja mem√≥ria ele j√° foi alocada Em linguagens comorienta√ß√£ baseada classes como caso Java C++ construtor definido na pr√≥pria classe invocado toda vez inst√¢nciadessa criada JavaScript possui mas conceito construtores feito por meio fun√ß√µes inicializam Por exemplo veja fun√ß√£ Person abaixoque recebe target alm nome junto sobrenome name surnamefunction Person(target name surname) { targetname = name; targetsurname surname; targetgetFullName getFullName; return target;}function getFullName() thisname + thissurname;}Veja alvo inicializaatribuindo propriedades mtodos definem objeto Mesmo seja definida antes da fun√ß√£ getFullName ela ainda referenci√°la pois suas declara√ß√µes passaram processo &lt;href=https://maxroeckergithubio/blog/javascriptintermediario4/&gt;&lt;emlang=en&gt;hoist Veja podemos utiliz√°la construtor inicializa objeto permite intera√ß√£ meio acesso √†s propriedadesconst Person({} Pedremildo Escavadeira);const b Testerson Trunk);consolelog(name); // ‚Üí Pedremildoconsolelog(bsurname); Trunkconsolelog(getFullName()); Pedremildo Escavadeiraconsolelog(getFullName === bgetFullName); trueConstrutores exemplo est√° ‚Äúbem comportado‚Äù estamospassando ‚Äúvazios‚Äù literal {‚Ä¶} Quando estamos falando construtores normalmente inicializar recmcriadosmas nada garante algum passe qualquer target nossoconstrutor isso fornece operadornew new operador utilizado chamada muda algunsdetalhes execu√ß√£ Ao executar ‚ü®fun√ß√£‚ü©(‚ü®argumentos‚ü©) JavaScriptfaz seguintes passos:Cria vazio prot√≥tipo igual propriedade prototype fun√ß√£;‚ÄúAmarra‚Äù this ao criado passo 1;Retorna 1 retorne undefinedAssim reescrever acima maneira mais simples intuitiva:function Person(name thissurname surname;}PersonprototypegetFullName function () thissurname;};Veja necess√°rio receber par√¢metro √©implicitamente recm pelo new Tambm h√° necessidade retornar objeto implicitamente far√°isso Alm disso precisamos atribuir diretamente objetocomo antes utilizamos cadeia prot√≥tipos ir√°criar Personprototype onde nossos mtodos definidos ‚Äúnovo‚Äù fornecido ent√£ precisamosinst√¢nciar utilizando ele Veja fazer exatamente mesmos testes anteriorconst Person(Pedremildo Person(Testerson trueUtilizar prot√≥tipos √©considerado tcnica comum recomendada desenvolver c√≥digo orientado objetos JavaScript nela nos aprofundar pr√≥ximos t√≥picosHeran√ßPodemos alcan√ßar heran√ß utilizar qual se querherdar aux√≠lio mtodoapply apply mtodo (lembrese fun√ß√µes tambm objetos) dois par√¢metros: primeiro indica contextoem deve ser aplicada seja refere; segundo arranjo argumentos devem passados serexecutadaVamos criar novo Employee estende adiciona propriedade mtodo: salary getTax respectivamente essaheran√ß implementada abaixo:function Employee(name surname salary) Personapply(this [name surname]); thissalary salary;}Employeeprototype Objectcreate(Personprototype);EmployeeprototypegetTax * 008;}; forma geral fazendo Personno algo muito similar √† super emlinguagens classes precisamosadequar Employee estender assim herdar issoutilizamos Objectcreate cria prot√≥tipodefinidoVeja utiliza√ß√£ Person entanto propriedades est√£ dispon√≠veisconst Employee(Pedremildo Escavadeira 100);const trueconsolelog(getTax()); 8EncapsulamentoComo estruturas dados parecidos tabela hash todas propriedades podem acessadas encapsulamento comconstrutores regido pela linguagem conven√ß√£Normalmente queremos ‚Äúprotegida‚Äù meioexterno fazemos isso nota√ß√£ padr√£ prefixando nome _ Vamos refatorar adicionar ‚Äúprivada‚Äù armazena taxa imposto empregadofunction this_rate 008; this_rate;};Veja _rate adicionada outra noentanto prefixamos _ quem utiliza esse sabe essapropriedade manipulada setornar imprevis√≠velRelembrando: exibida acessada qualqueroutra mas conven√ß√£ indicase sermanipulada fora pr√≥prio objeto Esse tipo conven√ß√£ √∫nico dalinguagem outras din√¢micas Pythonadotam regras similaresPolimorfismoEm polimorfismo realizado sem muitos problemas vezque mut√°veis vari√°veis possuem tiposdefinidos Normalmente d√° &lt;href=https://ptwikipediaorg/wiki/Duck_typing&gt;ducktyping fazem Teste Pato Se parece pato pato grasna ent√£ provavelmente pato No programa√ß√£ significa nem heran√ß ir√° definir sem√¢ntica suas mtodos conjunto contm foo podecham√°los problema contrato pr√©definido entre das interfacesem classes abstratas C++ fica cargo codificadorutilizar mesmo protocolo devese estabelecer polimorfismo &lt;img src=/images/20160422javascriptorientadoobjetos2/ducksvg alt= autom√¢to sistema alimenta√ß√£ trato digestivo title=Pato Mec√¢nico Jacques Vaucanson 1738 decoding=async loading=lazy /&gt;Propriedades ticosPropriedades ticas atributos/mtodos pertencem cada dos constru√≠dos Propriedades construtorespodem criadas atribuindo aos pr√≥prios construtoresVamos exemplificar Person armazenar quantidade criados qualquerdescendentefunction Personcount += 1; surname;}Personcount 0;PersonprototypegetFullName thissurname;};Assim agora verificar quantas inst√¢ncias foram criadas veja:consolelog(Personcount); 0const Escavadeira);consolelog(Personcount); 1const Trunk);consolelog(Personcount); 2Garantias instancia√ß√£ tambm inst√¢ncia construtor instanceof abaixo:const Trunk);consolelog( instanceof Employee); trueconsolelog( Person); Object); trueconsolelog(b falseconsolelog(b true testa √†direita esquerda determinase constru√≠do aquele uso bastante garantir seguran√ß construtor contexto this acontece chamar newNesse caso criase passa atual executada Assim esperaque recmcriado verdade outro podecausar efeitos colaterais imprevis√≠veis bugs dif√≠cillocaliza√ß√£ sempre receba objetoesperado adicionar seguinte teste:function if (!(this Person)) throw TypeError(); chame new teremos erroconst Escavadeira); erro!const Trunk); sucessoConclus√µesUtilizar traz v√°rias vantagens incluem:Heran√ß simplificada: basta adequar cadeiaherdar propriedades;Polimorfismo simplificado: contratos diferentes construtoresUso eficiente mem√≥ria: somente alocado compartilhado todos atravs prot√≥tipos;Porm alguns pontos considerados: verdadeiro acess√≠veis;√â tomar cuidado tratar operador new;Justamente compartilhados dependem contextoespec√≠fico aten√ß√£ especial quando chamados evitarproblemas thisApesar ‚Äúnegativos‚Äù t√£comum grande parte APIs fornecidas pelos ambientes execu√ß√£ utilizamesse padr√£ No programarmos JavaScriptorientado objetos: F√°bricas mitigam negativos vistos acimaao custo positivos Mas assunto pr√≥ximapublica√ß√£At√© pr√≥xima!"
  },
  {
    "url": "/blog/javascript-orientado-a-objetos-3/",
    "title": "JavaScript Orientado a Objetos #3",
    "index": "Hoje iremos compreender pouco sobre F√°bricas no contexto do JavaScriptOrientado Objetos padr√£ projeto alternativos aos construtores cria√ß√£ objetos que possui muita similaridade com programa√ß√£ funcional f√°brica: (1) estabelecimento onde ocorre fabrica√ß√£ manufatura produtos; (2) mecanismo produz cria algo voc√™ aproveite melhor texto √© recomendado tenha conhecimentodos conceitos b√°sicos orienta√ß√£ objetos Voc√™ pode ler pequenaintrodu√ß√£no anterior dessa srie tambm ver como criar comconstrutoresTambm conhe√ß comportamento caracter√≠sticas dosclosures emJavaScript hoje longo porque achei importante unir principais t√≥picos cada em s√≥ publica√ß√£Introdu√ß√£J√° vimos na publica√ß√£ anterior construtores JavaScript fun√ß√µesque inicializam objeto qual mem√≥ria j√° foi alocada Revisitando nossoexemplo construtor Person visto abaixo vemos todas propriedades acess√≠veis mtodos compartilhados entre todos pormeio da cadeia prot√≥tiposfunction Person(name surname) { thisname = name; thissurname surname;}PersonprototypegetFullName function () return + thissurname;}; nosso exemplo vamos adicionar novo mtodo √† Person chamado print que exibe sa√≠da padr√£ string representando objetoPersonprototypeprint consolelog(Person [name: ]);};Suponha queremos chamar duas vezes: primeiraimediatamente ap√≥s cria√ß√£ segunda 3 segundos depois Podemosutilizar fun√ß√£ setTimeout recebe n√∫mero milissegundos fazer essa tarefa Veja:const person new Person(Pedremildo Escavadeira);personprint(); // ‚Üí Person Pedremildo]setTimeout(personprint 5000); undefined] aconteceu mtodo Porque 5 segundos resultado foidiferente Na realidade perdeu deveria serexecutado seja this se refere Quando chamamos mtododiretamente objetomtodo() JavaScript automaticamente define pr√≥prio objeto Como repassamos outroobjeto eventualmente execut√°lo referencia mais person por isso temos problemas est√° amarrada ao person ela compartilhada portodos constru√≠dos Person justamente compartilhados que certos casos podemos ter problemas utiliza√ß√£desses me outros contextos vimos acima H√° v√°rios problemas forma resolver esse problema explicitamente pedir seja criada nova fun√ß√£ id√™ntica mas esteja vari√°vel personpor meio mtodobindVeja:const Pedremildo]setTimeout(personprintbind(person) Pedremildo]Resolvemos criando c√≥pia amarrado noentanto das vantagens dos construtores Porque vamoscompartilhar se dependendo caso uso teremos c√≥pias comcontexto amarradoEste exemplo mostra bem desvantagens possuem usoincorreto doserros comunsentre desenvolvedores qualquer n√≠vel experi√™ncia fonte muitos bugs No entanto h√° alternativa: f√°bricasF√°bricasF√°bricas fun√ß√µes entantof√°bricas objeto respons√°veis porcriar √°rea associada ele; diferente passamessa responsabilidade operador new Vamos refatorar construtor ele f√°brica Veja:function const {}; personname personsurname surname; persongetFullName personsurname; }; personprint ]); person;}Veja nossa agora alm inicializar cria Alm disso atribu√≠mos prot√≥tipo Person comum invocamos sem Podemostambm necessidade bindconst Escavadeira);const b Person(Testerson Trunk);consolelog(name); Pedremildoconsolelog(bsurname); Trunkconsolelog(getFullName()); Pedremildo Escavadeirabprint(); Testerson]setTimeout(bprint Testerson]Note criamos precisamos utilizar this Sempretemos refer√™ncia criado Isso acontece mtodosgetFullName closures assim mantm escopoda f√°brica podem acess√°lo momentoEntretanto pre√ß pagar: criados c√≥pias compartilhados vez chamada elacria amarrados Veja:consolelog(getFullName === bgetFullName); falseHeran√ßF√°bricas heran√ß relembrar dapublica√ß√£ Employee estende adiciona propriedade salary getTaxfunction Employee(name surname salary) employee surname); employeesalary salary; employeegetTax * 008; employee;} geral apply usamosprot√≥tipos Objectcreate nosconstrutores ‚Äúterceirizamos‚Äù outra f√°bricaque estender propriedades mtodosVeja utiliza√ß√£ exatamente igual propriedades est√£ dispon√≠veisconst Employee(Pedremildo Escavadeira 100);const Escavadeiraconsolelog(getFullName falseconsolelog(getTax()); 8EncapsulamentoApesar serem estruturas dados muito parecidos tabela hash propriedades acess√≠veis conceito encapsulamento comf√°bricas ser atingido closure closure protegido mudan√ß externa pr√≥prias vari√°veisretornadas conven√ß√£ Com f√°bricas encapsulamentoverdadeiro acima propriedade‚Äúprivada‚Äù armazena taxa imposto empregadofunction rate rate; employee;}Veja getTax outraforma acessar sen√£ pelo est√°encapsulada efeito externo gerado objetoPolimorfismoAssim devido √†s polimorfismo realizado muitos problemas objetos mut√°veis vari√°veis possuem tipos definidosNormalmente polimorfismo d√° &lt;href=https://ptwikipediaorg/wiki/Duck_typing&gt;ducktyping fazem Teste Pato Se algo parece pato nada pato grasna ent√£ provavelmente pato No programa√ß√£ isso significa tipo ir√°definir sem√¢ntica suas mtodos conjunto objetos contm nome foo cham√°los problema contrato pr√©definido interfacesem Java classes abstratas C++ fica cargo codificadorutilizar mesmo protocolo nos devese estabelecer polimorfismo &lt;img src=/images/20160422javascriptorientadoobjetos2/ducksvg alt= autom√¢to sistema alimenta√ß√£ similar trato digestivo title=Pato Mec√¢nico Jacques Vaucanson 1738 decoding=async loading=lazy /&gt;Propriedades ticos ticos sercriados atribuindo diretamente Relembrando publica√ß√£anterior tica armazenar quantidade descendentefunction Personcount += 1; person;}Personcount 0;Assim agora verificar quantas inst√¢ncias foram criadas veja:consolelog(Personcount); 0const Escavadeira);consolelog(Personcount); 1const Trunk);consolelog(Personcount); 2Garantias instancia√ß√£Como f√°bricas utilizam prot√≥tipos determinar objeto criado instanceofNo foichamada correta pr√≥pria detm controle dacria√ß√£ objetoConclus√µesUtilizar traz v√°rias alternativas atacam pontos ondeconstrutores deixam desejar:Heran√ß simplificada: basta deseja herdar modificarseus mtodos;Polimorfismo simplificado: contratos f√°bricas;Encapsulamento verdadeiro: escopo completamente isolado inacess√≠vel efeitos externos compartilhamento precisamosnos preocupar ser√° executado eliminando riscoscom uso incorreto thisPorm pagar:Uso ineficiente mem√≥ria: alocado h√° atravs prot√≥tipos porisso tendem consumir construtores; poss√≠vel doinstanceof tabela abaixo resume f√°bricas:Caracter√≠sticaConstrutoresF√°bricasHeran√ß‚úì‚úìEncapsulamento‚úó‚úìVerifica√ß√£ inst√¢ncias‚úì‚úóConsist√™ncia this‚úó‚úìUso eficiente mem√≥ria‚úì‚úóPropriedades ticas‚úì‚úìNote apesar trazem alguns negativosimpactam escolhaNum preferem invs pr√≥prios ambientes execu√ß√£ essepadr√£ Mas sendo menos populares entender poiselas permitem limita√ß√µes viceversaNo contam algumas simplifica√ß√µes sint√°ticas quefacilitam ainda estrutura class ES6 masisso assunto pr√≥xima publica√ß√£!At√© mais!"
  },
  {
    "url": "/blog/javascript-orientado-a-objetos-4/",
    "title": "JavaScript Orientado a Objetos #4",
    "index": "Hoje iremos voltar ver sobre Construtores no contexto do JavaScriptOrientado Objetos principais funcionalidades que vers√£ 2015 adicionou√† linguagem voc√™ aproveite melhor texto √© recomendado tenha conhecimentodos conceitos b√°sicos orienta√ß√£ objetos Voc√™ pode ler pequenaintrodu√ß√£no anterior dessa srie tambm como criar objetos comconstrutores alternativa √† ele f√°bricasIntrodu√ß√£J√° vimos construtores feitos por meio fun√ß√µes recebem contextoespecial em this chamadas junto ao operador new Vimos queconstrutores adicionam mtodos prot√≥tipo dos criados isso capazes compartilhar mesmo mtodo qualquer inst√¢ncia Relembrando exemplo das publica√ß√µes anteriores temos abaixo construtor Person:function Person(name surname) { thisname = name; thissurname surname;}PersonprototypegetFullName function () return + thissurname;};Podemos utiliz√°lo com new veja:const new Person(Pedremildo Escavadeira);consolelog(getFullName()); // ‚Üí Pedremildo EscavadeiraClasses ES2015No entanto essa nota√ß√£ escrever bastante diferente outras linguagens programa√ß√£ sempre causou pouco receio emdesenvolvedores Com advento ECMA2015 JavaScript adicionou outra forma construtores muito similar outras com utiliza√ß√£ classes Podemos reescrever Person anteriorda seguinte forma:class constructor(name surname; } getFullName() thissurname; }}Essa Java C++ Python utiliza palavrachaveclass No confunda classe outraslinguagens palavrachave class nada mais ‚Äú√ß√∫car sint√°tico‚Äù fun√ß√µes √© tambm id√™ntica aosconstrutores:const Escavadeira);const b Person(Testerson Trunk);consolelog(name); Pedremildoconsolelog(bsurname); Trunkconsolelog(getFullName()); Escavadeiraconsolelog(getFullName === bgetFullName); true forma resumida c√≥digo antes ficava agora colocadodentro constructor adicionados prototypedo definidos corpo da classe Essa mudan√ß sint√°ticaaproxima torna f√°cil pessoas comoutras experi√™ncias animemse eleHeran√ß heran√ß classes possuem mesmas vantagens desvantagens heran√ßcom mas sintaxe simples utilizando palavrachave extends Vamos relembrar exemplo publica√ß√£ criar Employee estende adiciona propriedadesalary getTax Veja heran√ß implementada comclasses:class Employee extends surname salary) super(name surname); thissalary salary; getTax() * 008; }}Veja apply utilizado nos foi substitu√≠do pelachamada super Alm disso utilizarmos extends precisamos adequar cadeia prot√≥tipos Toda parte j√° feita pelo JavaScriptautomaticamente instancia√ß√£ continua id√™nticaconst Employee(Pedremildo Escavadeira 100);const trueconsolelog(getTax()); 8Encapsulamento polimorfismoComo estruturas dados parecidos tabela hash todas propriedades objeto acess√≠veis at√© ES2015 possuem definir propriedade seja oculta Mas assim se queremos objetoseja ‚Äúprotegida‚Äù externo fazemos isso padr√£normalmente prefixando nome _J√° rela√ß√£ polimorfismo regras aplicadas dado &lt;emlang=en&gt;duck typingPropriedades ticosNas propriedades ticas podem ser adicionadas prefixando declara√ß√£ static Quando prefixado static esse na pr√≥pria no nas inst√¢ncias objetosVamos exemplificar relembrando ondeutilizamos tica armazenar quantidade j√°criados pela descendenteclass static count 0; Personcount += 1; }}Assim podemos verificar quantas foram criadas formaid√™ntica aos veja:consolelog(Personcount); 0const Escavadeira);consolelog(Personcount); 1const Trunk);consolelog(Personcount); 2Garantias instancia√ß√£√â poss√≠vel inst√¢ncia dooperador instanceof Veja abaixo:const Trunk);consolelog( instanceof Employee); trueconsolelog( Person); Object); trueconsolelog(b falseconsolelog(b trueAssim testa dosobjetos direita est√° cadeia prot√≥tipos √†esquerda determina constru√≠do aqueleNo necess√°rio testar objetocriado saber chamada Caso algumtente chamar fun√ß√£ sem pr√≥prio JavaScriptdispara erroconst Escavadeira); erro!const Trunk); sucessoConclus√µesUtilizar traz v√°rias possuem como polimorfismo simplificados uso eficiente mem√≥ria docompartilhamento via classesj√° mitiga cuidado temos ter operadores construtores Noentanto alguns pontos ainda permanecem ES2015: permite verdadeiro encapsulamento acess√≠veis;Justamente porque compartilhados dependem contextoespec√≠fico aten√ß√£ especial quando chamados evitarproblemas thisPodemos dizer classes ‚Äúconstrutores melhorados‚Äù prudentefavorecer invs medida poss√≠vel dispon√≠veis grande escrito emJavaScript contm importante comofuncionam caso precise lidar algum momentoEssa encerra enquanto srie introdu√ß√£ JavaScriptorientado Esse final definitivo Podem existir maispublica√ß√µes futuras novas √†linguagem evolu√ß√µes tcnicas desenvolvimento OOAt√© mais!"
  },
  {
    "url": "/blog/o-que-e-o-dom/",
    "title": "O que √© o DOM?",
    "index": " Modelo Objeto Documento (DOM do ingl√™s Document ObjectModel) √© estrutura dados que representa conte√∫do documento web Tcnicamente DOM representa√ß√£ orientada objetos documentos HTML XML fornece fun√ß√µes mtodos programa possainteragir com definido pelas especifica√ß√µes da W3C daWHATWG implementado pelos navegadores Muitosnavegadores podem estender essa especifica√ß√£ disponibilizar funcionalidadesque adotadas por todos navegadores ent√£ preciso cuidado √©sempre recomendado seguir padr√£ das especifica√ß√µesComo dito web como API objetosTodas propriedades eventos dispon√≠veis manipular criarp√°ginas organizadas em objetos p√°gina HTML exemplo ser√°representada pela classe Document J√° tabela escrita tag tableser√° representada HTMLTableElement define servem buscar elementos tambm exemplo querySelectorAll recebe seletor CSS string retornarelementos descendentes casam dadoconst paragraphs = documentquerySelectorAll(p);for (const paragraph of paragraphs) { consolelog(paragraph);} JavaScriptNo anterior quase exemplos voc√™ vai encontrar quandopesquisar trabalhar DOM utilizar√° JavaScript No entanto √©importante entender separar linguagem programa√ß√£ mas sem JavaScript seria capaz compreender p√°ginasweb adicionar intera√ß√£ √† elasNo in√≠cio web muito interligados Mas desenvolvimento tecnologia se desenvolveramem duas entidades distintas moderno projetado ser emqualquer programa√ß√£ Veja utiliza√ß√£ emPython usando bibliotecaminidomimport xmldomminidom domdocument domparse(/indexhtml)p_list documentgetElementsByTagName(p)for p in p_list: print(p)Acessando DOMNos navegadores necess√°rio biblioteca utilizar DOMqualquer script executado no ambiente dos tem acesso ele abaixo utiliza construir cabe√ßalho frase ‚ÄúOl√° Mundo!‚Äù!DOCTYPE html&gt;html&gt; head&gt; meta charset=UTF8 /&gt; script&gt; windowaddEventListener(load function () const header documentcreateElement(h1); text documentcreateTextNode(Ol√° Mundo!); headerappendChild(text); documentbodyappendChild(header); }); /script&gt; /head&gt; body&gt;/body&gt;/html&gt;Grande parte nesse exemplo: mtodoaddEventListener window; mtodo createElement document appendChild header Todos esses definidos pelo disponibilizados navegadorAlgumas interfaces fundamentaisComo j√° dito anteriormente objetos representa representado como objeto segue interfaceDocument apresenta similar √°rvore Muitasvezes esse chamado ‚Äú√Årvore DOM‚Äù Nos pode acessar inst√¢ncia desse vari√°vel (como fizemos exemploanterior)No interface estende outra ainda mais genrica Node Node interface genrica muitas outras APIs baseadas Qualquer ‚Äún√≥‚Äù noDOM implementa Alguns incluem mencionado Document mastemos tambmElement interfaceque todas tags seguem; tambm Text interfaceimplementada texto documento; at√© mesmo Comment querepresenta coment√°rio denotado marca√ß√£ ! HTMLOutra importante EventTargetTodos implementam interface pois extens√£ EventTarget EventTarget permite cria√ß√£ capazes ouvir disparar eventos Por necessidade executar trecho c√≥digo quando usu√°rio clica elemento provavelmente utilizar√° evento addEventListener EventTarget t√£ ub√≠qua que inclusive √© implementada classes fora caso do Window Conclus√µesVoc√™ ver caracter√≠sticas representadas alguma forma DOM Existem quecontm diversos propriedades √â colossal tamanho doDOMVoc√™ achar isso aprender vez realmente √© Noentanto primeiro momento precisa tudo nos m√≠nimosdetalhes ter no√ß√£ geral webfunciona acredito conforme adquire experi√™ncia deve entender funcionamento dessa seja bom desenvolvedor software web"
  },
  {
    "url": "/blog/captura-e-borbulhamento-de-eventos/",
    "title": "Captura e borbulhamento de eventos",
    "index": " dos aspectos mais confusos quando estamos trabalhando com eventos gios que evento passa enquanto √© propagado pela √°rvore DOM: captura borbulhamento sempre temos problemas mas voc√™ pode ter baita dor cabe√ß se entender cada dessas etapas faz comoelas funcionam captura borbulhamento mecanismos propaga√ß√£ quedescrevem acontece mesmo ‚Äúescutado‚Äù por dois elementosque descendentes Antes prosseguir d√™ olhada neste √≥timoexemplo do MDNque tambm ser visto abaixo:&lt;iframe src=https://mdngithubio/learningarea/javascript/buildingblocks/events/showvideoboxhtml loading=lazy width=100% height=512&gt;Nesse exemplo HTML tem seguinte marca√ß√£:button&gt;Display video/button&gt;div class=hidden&gt; video&gt; source src=rabbit320mp4 type=video/mp4 /&gt; src=rabbit320webm type=video/webm /video&gt;/div&gt;Quando h√° clique em button v√≠deo exibido mudando classe div hidden showing (h√° CSS isso tambm) Alm disso voc√™clicar no div v√≠deo ela ir√° automaticamente fechar clicar nov√≠deo ele iniciar execu√ß√£ Veja script abaixo:const button = documentquerySelector(button);const documentquerySelector(div);const video documentquerySelector(video);buttonaddEventListener(click function () { divsetAttribute(class showing);});divaddEventListener(click hidden);});videoaddEventListener(click videoplay();});Entretanto problema essa implementa√ß√£ j√° deve terpercebido: abre clica execu√ß√£ ‚Äúsome‚Äù precisa abrir novo pelo bot√£ Isso porque video queouve descendente div ouve clique seja ambos ouvintes executados isso fechaCaptura borbulhamentoQuando disparado elemento possui algum antecessor (noexemplo acima como antecessor) navegadores podempropag√°lo gios: borbulhamentoNo gio captura navegador verifica distante doelemento (normalmente html) ouvinte evento existirele executa ent√£ pr√≥ximo antecessor mesma coisa; assim diante at√© atinja foi efetivamente clicadoJ√° borbulhamento contr√°rio feito: elemento clicado casoafirmativo executa c√≥digo associado; vai maispr√≥ximo coisa chegar maisdistante htmlVoc√™ ver fluxos sumarizados na imagem abaixo: &lt;img src=/images/20180114capturaborbulhamentoeventos/capturebubblingsvg alt=Diagrama representado DOM decoding=async /&gt;Nas vers√µes atuais DOM todos ouvintes registrados somente padr√£ Por nosso evento borbulha div Assim ir√°encontrar come√ßar rodar v√≠deo Logoem seguida encontrar ocultar v√≠deoParando eventos comportamento exemplo acima bastante chato consertado DOM meio da Event fornece mtodo stopPropagation serchamado queremos parar qualquer das propaga√ß√µesDessa forma podemos fazer propaga√ß√£ caso esteja sendo executado stopPropagationfor chamado Veja:videoaddEventListener(click (event) if (!videoplayed) eventstopPropagation(); videoplay(); } else videopause(); }});Como mencionei propagados padr√£ gio No entanto alterar esse ao registrar configurando terceiro par√¢metro fun√ß√£ addEventListener porexemplo:divaddEventListener( click hidden); } capture: true });No importante lembrar que escutado nos doisgios propaga√ß√£ ser√° executado primeiro depois seguido borbulhamento Porque existem gios eventos aos dias onde muito compat√≠veis entre si Netscape utilizava somente Internet Explorer usava Quando W3C resolveu padronizar entrarem consenso resolveuse utilizar sistema duas formas implementado pelos atualmente Delega√ß√£ eventosImagine v√°rios elementos li lista ul namarca√ß√£ abaixo:ul id=list&gt; id=item&gt;Item /li&gt; id=itemb&gt;Item B/li&gt; id=itemc&gt;Item C/li&gt; ‚Ä¶/ul&gt;Imagine dessa sofrer clique quer exibir alerta usu√°rio id clicado Voc√™ adicionar ouvinte elemento items documentquerySelectorAll(#list li);for (const item of items) itemaddEventListener(click alert(eventtargetid); // target });} for din√¢mica Imagine seja comum remover itensvoc√™ ter√° ficar adicionando removendo toda vez garantir funcionamento c√≥digo parece trabalhoso‚Ä¶No favor fazer delega√ß√£ eventos Esse conceito utilizado voc√™quer trecho grande n√∫mero descendentes f√°cil apenas noantecessor direto esperar sejam propagados borbulhamentoat√© ele Com eventos atingir resultado acimacom c√≥digo:const list documentquerySelector(#list);listaddEventListener(click ainda clicado});Com preocupa√ß√µes adi√ß√£ remo√ß√£ itens deixam existir s√≥ listaConclus√£Com vimos agora bom fundamento sobre diferentesgios eventos: Apesar deles raramente utilizado conhecer DOM funciona que saiba resolver problemas surgirem desenvolvedor software ferramentas quetrabalha trabalha web DOM"
  },
  {
    "url": "/blog/web-components-1/",
    "title": "Web Components #1",
    "index": "Voc√™ j√° deve conhecer HTML certo √≥tima ferramenta construiraplica√ß√µes na web HTML √© declarativo port√°vel bem suportado f√°cil trabalhar Quando voc√™ est√° construindo documento aplica√ß√£ com HTMLvoc√™ tem algumas op√ß√µes dispon√≠veis quer criar √¢ncora Utilize tag Quer criar par√°grafo tagp bot√£Voc√™ pode utilizar tagbutton input type=buttonMas se por exemplo quiser aba Que tag do vaiusar se for tooltip accordion vocabul√°rio doHTML limitado existe que descreva completamente cada doselementos interface anteriores Normalmente tais componentes envolvemutilizar mais associado √† pouco comportamento dado em script Isso tarefa simples fica vez complexa quantomais elementos tela precisar controlar seria forma poder ‚Äúestender‚Äù personalizados necessidade encapsulando estilo marca√ß√£ s√≥‚Äúentidade‚Äù &lt;img src=/images/illustrations/locksvg alt= le√£ her√°ldico decoding=async loading=lazy /&gt; web components resposta da plataforma este problema Com criarelementos fazer extens√£ preenchendo lacunas ligando estrutura declarativa via c√≥digo Se com problema resolver talvez cria√ß√£ elementopersonalizado pode Elementos permitem navegadoresadicionem ao preservando benef√≠cios possui verdade termo ‚Äúguardachuva‚Äù conjunto APIs tecnologias disponibilizadas nos navegadores que quando utilizadas emconjunto completos fundamentam tr√™sprincipais especifica√ß√µes:Elementos personalizados;Shadow DOM; elemento templateAntes detalhar dessas especifica√ß√µes vamos apanhado geral como trabalham utiliz√°losComo definir instanciar component component basta estender classeHTMLElement registrar associada essa classe meio mtodo define objetoglobal customElements Simples assim! Veja exemplo no c√≥digo abaixo queest√° utilizando sintaxe classesdo ES2015class HelloWorld extends HTMLElement {}windowcustomElementsdefine(helloworld HelloWorld); partir agora helloworld diferente utilizar div forma HTML elemento imperativa DOM tambm APIsdo DOM selecionar manipular personalizado qualqueroutro abaixo:&lt;playgroundide projectsrc=/projects/20180130/1/projectjson editablefilesystem linenumbers resizable&gt;Voc√™ ver presente √°rvore DOMnada exibido navegador acontece porque ainda adicionamos conte√∫doao componentAdicionando conte√∫do componentTodo qualquer componente pela √†tag No nosso caso queremos adicionar helloworldprecisamos definilo HelloWorld Como pr√≥prio nome componentesugere exibir frase ‚ÄúHello World!‚Äù h1 componente isso sobreescrevemos connectedCallback Veja:&lt;playgroundide projectsrc=/projects/20180130/2/projectjson resizable&gt; connectedCallback executado √© ‚Äúconectado‚Äù Outros mtodos disponibilizados pela API formam ‚Äúciclo vida‚Äù component veja aqui Adicionando estilos componentBom agora temos componente estiliz√°lo tenha cor azul Podemos isso CSS style atribu√≠mos head documento projectsrc=/projects/20180130/3/projectjson resizable&gt;No entanto vai perceber outros foram estilizados tambmIsso padr√£ global folha estilos afeta todos entanto solucionareste problema m√£ Shadow DOMEncapsulando component permite sub√°rvores encapsuladas √°rvoreDOM principal Assim marca√ß√£ estilo script seja definido noshadow s√≥ shadow podemos meiodo attachShadow projectsrc=/projects/20180130/4/projectjson resizable&gt;Se resultado somente estilizado gra√ß DOM efeitos colaterais da√°rvore DOMConclus√£ especifica√ß√µes baixo n√≠velque conjunto verdadeiros quepodem ser reutilizados sem necessidade conven√ß√£biblioteca frameworkExistem outras abrangidas pelo vimos nesta introdu√ß√£; template slot m√≥dulos CSS objetivo srie publica√ß√µes abordando detalhes especifica√ß√µes Alm disso boaspr√°ticas estamos trabalhando utiliz√°los solucionar problemas durante desenvolvimento aplica√ß√µes webConforme torna complexo desenvolvedores ir√£‚Äúrepassar‚Äù responsabilidades plataforma amadurece evoluiEste caso dos atualmente suportados grandemaioria grandes navegadoresNo tecnologia fase constru√ß√£ Certasespecifica√ß√µes est√£ inicial suporte bastante limitado masque ilustram futuro promissor tecnologia"
  },
  {
    "url": "/blog/ids-sao-globais/",
    "title": "IDs s√£o globais",
    "index": "Voc√™ sabia que se voc√™ precisar acessar elemento documento HTML marcadocom id basta vari√°vel com mesmo nome seja voc√™tiver marca√ß√£ assim:div id=foo&gt;/div&gt;No console do navegador pode digitar foo ter√° acesso ao DOMMas por qu√™ √â comportamento padr√£ dos navegadores facilitar debug isso √© esperadoNa verdade acima previsto pelo pr√≥prio HTML especifica√ß√£ HTMLdetermina objeto window deve conter propriedade referencia elemento da √°rvore DOM se:H√° apenas no qual nome seja igual aoatributo idH√° name este for applet embed formframe frameset iframe img objectEm certos casos onde h√° mais satisfa√ß condi√ß√µes acimaoutras regras aplicadas HTMLCollectionpode ser retornado vari√°vel No entanto ideia principal √©mantida: representando elementos ser√° criada escopoglobal Assim c√≥digo abaixo funciona tal como esperado afinal vari√°vel global window:button id=btn&gt;Clique aqui!/button&gt;script&gt; btnaddEventListener(click function () { btntextContent = Voc√™ clicou!; });/script&gt;No preciso aten√ß√£ Se j√° existir valor ela substitu√≠da pela refer√™ncia elemento Por exemplo escrever atributo id=fetch ele ir√° substituir fun√ß√£ fetchpresente nos modernosComo pr√≥pria especifica√ß√£ diz manter retrocompatibilidade recomendam apoiar nele desenvolver seusc√≥digos Alm disso conforme novas funcionalidades v√£ sendo adicionadas √†plataforma web aumentam chances haver conflito nomes c√≥digodeixar funcionar isso quando selecionar na √°rvoreDOM utilize fun√ß√µesdocumentgetElementByIddocumentquerySelector"
  },
  {
    "url": "/blog/web-components-2/",
    "title": "Web Components #2",
    "index": "Como vimos na publica√ß√£ anterior termo webcomponents se refere ao conjunto APIs disponibilizadas plataforma webque permitem cria√ß√£ elementos personalizados que podem ser instanciados forma declarativa como qualquer tag HTMLCom API elementos personalizados desenvolvedores capazes criar novas tags HTML √â fundamental web components traz forma padronizada componentesreutiliz√°veis com nada mais HTML CSS JavaScript Sem necessidade utilizar bibliotecas frameworks Dessa forma temos menos c√≥digo maiscompatibilidade reutiliza√ß√£Introdu√ß√£Como j√° vimos definir elemento personalizadobasta voc√™ estender classe HTMLElement associar ela √† tagutilizando mtodo define do global customElements exemplificarvamos componente chamado wccounter ir√° simples contadorclass WCCounter extends {}windowcustomElementsdefine(wccounter WCCounter);Assim podemos utilizar nosso da seguinte forma:wccounter&gt;/wccounter&gt;√â importante lembrar personalizado √© diferente div outro No entanto algumas regras nomenclatura precisam seguidas: nome precisa conter h√≠fen () analisador sint√°tico podedistinguir padr√µes Alm dissoprevine conflitos caso forem adicionadas HTML no futuroVoc√™ pode registrar mesma vez Fazer isso lan√ßar DOMException vez est√° associada classe h√°voltaElementos s√≥ utilizados em par seja voc√™declarou elemento deve escrev√™lo comoelemento/elemento Escrever elemento / funcionaDefinindo elementoComo utilizamos sintaxe class construtor elemento comportamento HTMLElement Estender comportamento HTMLElementgarante seguir DOM significa qualquerpropriedade mtodos adicione tornam parte interfaceDOM elemento p√∫blicada tagImagine queremos adicionar duas propriedades: value disabled queindica valor atual contador desabilitado respectivamenteVamos tambm dois mtodos: increment decrement aumentam diminuem unidade Veja:&lt;playgroundide projectsrc=/projects/20180402/1/projectjson linenumbers resizable&gt;Nesse exemplo estamos criando propriedades disabled utilizandogetters setters objetos disso refletindoseus valores atributos por meio dos setAttribute removeAttribute estende classe HTMLElement toda dispon√≠vel c√≥digo do pr√≥prio poss√≠vel manipular com removeAttribute ouvintes eventos addEventListener acessar descendentes children selecionar querySelectorDefinindo elementoNa poss√≠veladicionar conte√∫do manipulando DOM Tambm garantir encapsulamento shadow Vamosadicionar DOM tr√™s elementos: button decrementar valor span exibir incrementar valorPodemos apropriado ouvintes reagir intera√ß√µes usu√°rio quando for conectado √°rvore principal DOMpor connectedCallback √†s mudan√ßnas value assim alterado vamos alterar conte√∫do Podemos fazer alterando cadapropriedade Veja abaixo:&lt;playgroundide projectsrc=/projects/20180402/2/projectjson resizable&gt; quiser instanciar wccounter definido Relembrandocomo outros funcionam bastaria dapropriedade marca√ß√£ abaixo:wccounter value=8&gt;/wccounter&gt;No vai perceber tem efeito algum funciona porqueainda sincronizamos atributo propriedade value Atributos propriedades mecanismos distintosno necessariamente sincronizados indica marca√ß√£ nodocumento serializado string objeto ter tipo JavaScript input exemplo possui atributo inicializa hom√¥nima ap√≥s instancia√ß√£ h√° reflex√£ entre propriedade Mudan√ß na alteram mudan√ß propriedade Reagindo nos atributos precisamos quais ser√£observados isso crie tica observedAttributes queretorne queira observar Ap√≥s sobrescreva mtodo attributeChangedCallback recebe argumento valores: nome anterior atributo mtodoattributeChangedCallback sempre observado foralterado projectsrc=/projects/20180402/3/projectjson resizable&gt;Veja mudan√ß refletida marca√ß√£ esperado valor8 adicionamos rea√ß√£ desativar bot√µes atributodisabled esteja definido Tome cuidado efeitos colaterais dentro attributeChangedCallback Poder√≠amos tentados essa setter propriedade disabled este manipula dispara novamente attributeChangedCallback‚Ä¶ causando loop infinito Estilizando acordo estadoComo estilizar utilizando styleencapsulado pelo Suponha texto dospan negrito mudar atribu√≠da Noentanto ‚Äúpr√≥prio‚Äù hospedeiro voc√™utiliza pseudoseletor :host Vamos secomporte tal block:&lt;playgroundide projectsrc=/projects/20180402/4/projectjson diminu√≠mos opacidade desabilitado vez reflete podemosutilizar seletores mudan√ß Por padr√£ display inlineblock Elementos estilizados qualqueroutro quisermudar ele pode Lembrese impede estilosda ‚Äúvazem‚Äù principal entanto cascata CSScontinua valendo&lt;playgroundide projectsrc=/projects/20180402/5/projectjson ‚Äúadicionamos‚Äù delay defini√ß√£ enquanto ele definido aplicouse estilo tempor√°rio uso pseudoclasse:defined Caso tenha visto recarregue resultado clicando bot√£ ‚Äú‚Üª‚ÄùElementos definidos desconhecidos bastante flex√≠vel declarar accordion em documento navegador aceit√°la sem problemas mesmo accordion fa√ß vocabul√°rio Esse previsto pela pr√≥priaespecifica√ß√£ doHTMLElementos desconhecidos inst√¢ncias HTMLUnknownElement vale personalizados Elementos personalizados‚Äúpotenciais‚Äù ainda foramdefinidos contm esse ser√° inst√¢ncia Veja:// accordion conhecido nem personalizadodocumentcreateElement(accordion) instanceof HTMLUnknownElement // ‚Üí true// wcaccordion v√°lido personalizadodocumentcreateElement(wcaccordion) false customElements alguns √∫teis casovoc√™ registrado personalizado pegar refer√™ncia get passando tag elemento sido ainda retorna undefinedlet = customElementsget(wccounter);let counter new WCCounter();Voc√™ callbacks futuras defini√ß√µes whenDefined Este Promise queresolvese definido rejeitase passado v√°lidocustomElementswhenDefined(wccounter)then(() =&gt; { consolelog(wccounter pronto!);});Conclus√£Elementos cria√ß√£ componentes reutiliz√°veis combinado outras tecnologiascomo fornecem v√°rias vantagens:Interoperabilidade navegadores; bem integrados ferramentas debug presentes navegadores conhecidas pelos desenvolvedores; biblioteca framework iniciar prov√™m modelo programa√ß√£ familiar Voc√™ apenas JavaScriptMas srie publica√ß√µes acabou Ainda falar sobreoutras especifica√ß√µes pertencem ‚Äúecossistema‚Äù components At√© pr√≥xima!"
  },
  {
    "url": "/blog/apresentando:-cruxhash/",
    "title": "Apresentando: CRUXHash",
    "index": "Hash √© provavelmente dos conceitos mais importantes que programadordeve conhecer √â por meio hashes conseguimos criar tabelas hash armazenar senhas formasegurafazer detec√ß√£ erros tambmcompress√£ dados tambm permitem sistemas cache globais em redes fornecimento conte√∫dopopularmente conhecidas como CDNsFormalmente fun√ß√£ traduzida portugu√™s ‚Äúfun√ß√£ espalhamento‚Äù √© mapeia conjunto dados tamanhoarbitr√°rio tamanho fixo Veja exemplo fun√ß√£abaixo:f:Z‚ÜíZ‚ÄÖ‚Ää‚ÄÖ‚Ää¬†tal¬†que¬†‚ÄÖ‚Ää‚ÄÖ‚Ääf(x)=xmod‚Äâ‚Äâ10 f:Z rightarrow Z ;; text{ tal } f(x) = x mod 10f:Z‚ÜíZ¬†tal¬†que¬†f(x)=xmod10Essa pode ser considerada hash Ela receber√° n√∫merointeiro qualquer ir√° retornar resto da divis√£ dez Qualquer divis√£ n√∫mero nnn ser√° do intervalo entre 000 (n‚àí1)(n1)(n‚àí1) seja Veja outra fun√ß√£abaixo:function hashStr(str){ let hashed 0; i while (i strlength) { ^ strcharCodeAt(i); += 1; return hashed;} hashStr acima escrita JavaScript fun√ß√£ Afinal ela converte string arbitr√°rio n√∫mero combinando caractere caractere operador ^ nesse est√°fazendo ‚Äúexclusivo bin√°rio‚Äùque sempre retorna 32 bits resultados hash chamados codes digests simplesmente hashes Boas fun√ß√µes r√°pidas puras mesmaentrada mesma sa√≠daDiferenciando objetosOutro uso bastante comum possibilidade diferenciar rapidamente objetoscom m√∫ltiplas propriedades Suponha voc√™ queira comparar dois objetos pormeio das propriedades comp√µem cada deles solu√ß√£ trivial seriacomparar propriedade par√†par se todas forem equivalentes objetosser√£ considerados iguais No entanto caso alguma propriedade for diferente objetos ser√£ diferentes tabela abaixo onde comparamos objetos B:PropriedadeBIguaisnomePedremildoPedremildo‚úìsobrenomeTrunkTrunk‚úìnascimento1991081419910804‚úóemailemail@exemplocomemail@exemplocom‚óåResultadoDiferentesSe compararmos B vemos iguais porque propriedade nascimento diferente Note que precisamos at√© momento possua valores Por isso email sequer verificada Assim esse algoritmo linearmenteproporcional √† quantidade devemos compararEssa acima utilizada pequenos com algumas dezenas imagine objeto complexo centenas propriedades ainda seja aninhado internos precisam sercomparados si forma Voc√™ ver cen√°rio compararpropriedade demorar pouco‚Ä¶ nos ajudar essa tarefa podemos utilizar sirva ‚Äúassinatura‚Äù objeto Esse criado daspropriedades pr√≥prio quando igualdade objeto outro verificar primeiro assinatura Se assinatura fordiferente nenhuma algumadelas diferentePropriedadeBIguaishash1973528465‚úónomePedremildoPedremildo‚óåsobrenomeTrunkTrunk‚óånascimento1991081419910804‚óåemailemail@exemplocomemail@exemplocom‚óåResultadoDiferentesVeja agora foi constru√≠da partir objeto temos imediatamente valor semprecisar consultar outras assinaturas foremiguais isso significa iguais &lt;img src=/images/20160113javascriptintermediario2/locksvg alt= le√£ her√°ldico decoding=async loading=lazy /&gt;Colis√µesComo j√° vimos conjunto Como est√° mapeando dadospossivelmente maior fixo peloprinc√≠pio casa pombosalguns diferentes na entrada v√£ mapeados sa√≠daQuando acontece colis√£Colis√µes problem√°ticas Em tabelas colis√µesdiminuem desempenho Emcriptografiacolis√µes diminuem seguran√ßEm compress√£ dadoscolis√µes taxa compacta√ß√£Boas desejam diminuir colis√£ tentando seguir distribui√ß√£ uniforme nenhum ter√° menos chances sofrer colis√£Em nosso compara√ß√£ objetos colis√µes obrigam ter compararinevitavelmente mesmo tenham mesmo podem S√≥ conferindo propriedades garantia realmente Agora seassinatura igual Porisso forma agilizar processo diferenciarobjetos Bloom filter estrutura probabil√≠stica utiliza que possui fundamento parecido permite elemento no Falsos positivos acontecer mas falsos negativos Portanto capaz responder sobre pertin√™ncia duas formas: ‚Äúpode estar no conjunto‚Äù ‚Äú conjunto‚ÄúApresentando: CRUXHash facilitar cria√ß√£ primitivos emJavaScript criei pequena biblioteca: CRUXHash instalar utilize npmnpm cruxhash CRUXHash biblioteca prov√™ simples criarhashes inteiros sem sinal JavaScript exemplo abaixo:import getSeed from cruxhash;consolelog(hash(Smile my dear!)); // 897319059consolelog(hash(42 getSeed(my seed))); 1866919164consolelog(hash(„Ç≥„É≥„Éã„ÉÅ„Éè Hello world ŒöŒ±ŒªŒ∑Œº·Ω≥œÅŒ± Œ∫·ΩπœÉŒºŒµ üòÄ)); 1149923829 principal fun√ß√£ valorprimitivo JavaScript: string booleano n√∫mero‚Ä¶ Alm disso permiteque passe segundo par√¢metro seed inicializa processo trazer acordo necessidade implementa√ß√£ strings baseada algoritmo Murmur3 J√° n√∫meros baseado sete saltos bits Thomas Wang tratar trabalha especial Primeiroela verifica mtodo hashCode passa recursivamente resultado comportamento √∫til reutilizar definido Veja:import cruxhash;const obj value: 0 hashCode() thisvalue; }}consolelog(hash(obj)); 1858670630objvalue 1;consolelog(hash(obj)); 796438301Se possuir valueOf sobrescrito objetosinst√¢ncias Date Number Boolean etc‚Ä¶ ir√°consider√°loimport cruxhash;consolelog(hash(new Date(20140708))); 271363852consolelog(hash(new 271363852Todo herde Objectprototype implementado Noentanto evitar recurs√£ infinita obriga sobrescritoAgora implementar Protocolo Iter√°vel partir iter√°vel ao final todosser√£ combinados s√≥ objA [Symboliterator]: function* () yield 2; }};const objB objC }};consolelog(hash(objA)); 2974883921consolelog(hash(objB)); 2974883921consolelog(hash(objC)); 473105883Veja iter√°veis possuem sequ√™ncia mesmoselementos ordem seus id√™nticos tambmque faz diferen√ß mudan√ß elementos objA resulta completamente diferente desej√°vel pequenas mudan√ß causem grandes diferen√ß sa√≠da conhecido como efeito avalanche No vai especial estruturas ordemdos importa Set Map /index;consolelog(hash(new Set([0 1 2]))); 1421611346consolelog(hash(new 2 1]))); 1421611346 fim passe simples base noObjectentries possu√≠rem mesmas mesmos valores ter√£hashes iguaisimport /index;consolelog(hash({ : b: null })); 1418113148consolelog(hash({ null 1 1418113148Conclus√µesFinalizo aqui apresenta√ß√£ CRUXHash disponibiliza outrasfun√ß√µes usos casos espec√≠ficos recomendo vejano reposit√≥rio oficial documenta√ß√£da API dispon√≠velCriei minha necessidade projetos pessoais profissionais Caso adicionar algum comportamento contatocomigo PRs bem vindos!AgradecimentosAgrade√ß amigoHenrique Nevespela revis√£ pelas considera√ß√µes texto!"
  },
  {
    "url": "/about/",
    "title": "Sobre",
    "index": "Ol√° nome √© Max Naegeler Roecker Mestre em Ci√™ncia da Computa√ß√£ Bacharel pelaUniversidade Estadual Maring√° (UEM) Tcnico Inform√°tica Tecnol√≥gica Federal do Paran√° (UTFPR)Tenho grande interesse por tecnologia principalmente nas √°reas computa√ß√£ da Web Desenhista hobby apaixonado bom peda√ß carneAcredito na liberdade individualidade raz√£ como principais meios alcan√ßar felicidade mais informa√ß√µes profissionais veja curr√≠culo aqui &lt;img src=/images/symbol1svg alt=√Åguia Coroada title=Si vis pacem bellum decoding=async loading=lazy /&gt;"
  },
  {
    "url": "/blog/",
    "title": "√öltimas publica√ß√µes",
    "index": ""
  },
  {
    "url": "/",
    "title": "",
    "index": ""
  },
  {
    "url": "/now/",
    "title": "Now",
    "index": "Essa √© minha p√°gina /now integrante domovimento /now page criado porDerek Sivers informa√ß√£ sobre que desenvolvendo trabalhando no presente momentoTrabalhando na Objective Solutions comoDesenvolvedor Software;Tentando publicar textos interessantes din√¢micos Web com intuito compartilhar persistir conhecimento por meio do blog &lt;img src=/images/symbol2svg alt=Jovem mulher em p√© tartaruga title=Subrepunt prospera fata decoding=async loading=lazy /&gt;"
  },
  {
    "url": "/tags/post/",
    "title": "Publica√ß√µes",
    "index": ""
  }]
