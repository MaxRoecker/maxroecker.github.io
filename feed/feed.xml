<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="pt-br">
  <title>Max N. Roecker</title>
  <subtitle>Página e Blog de Max Naegeler Roecker</subtitle>
  <link href="https://maxroecker.github.io/feed/feed.xml" rel="self"/>
  <link href="https://maxroecker.github.io/"/>
  <updated>2023-12-28T21:39:39Z</updated>
  <id>https://maxroecker.github.io</id>
  <author>
    <name>Max Naegeler Roecker</name>
    <email>max.roecker@gmail.com</email>
  </author>
  
  <entry>
    <title>Apresentando: CRUXHash</title>
    <link href="https://maxroecker.github.io/blog/cruxhash/"/>
    <updated>2021-05-14T23:33:49Z</updated>
    <id>https://maxroecker.github.io/blog/cruxhash/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;Hash&lt;/em&gt; é, provavelmente, um dos conceitos mais importantes que um programador
deve conhecer. É por meio de &lt;em&gt;hashes&lt;/em&gt; que conseguimos criar as
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hash_table&quot;&gt;tabelas &lt;em&gt;hash&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://auth0.com/blog/hashing-passwords-one-way-road-to-security/&quot;&gt;armazenar senhas de
forma
segura&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Checksum&quot;&gt;fazer detecção de erros&lt;/a&gt; e também
&lt;a href=&quot;https://en.wikipedia.org/wiki/One-way_compression_function&quot;&gt;compressão de dados&lt;/a&gt;.
São &lt;em&gt;hashes&lt;/em&gt; que também permitem criar &lt;a href=&quot;https://en.wikipedia.org/wiki/Bloom_filter#Cache_filtering&quot;&gt;sistemas de cache globais em redes de
fornecimento de
conteúdo&lt;/a&gt;,
popularmente conhecidas como CDNs.&lt;/p&gt;
&lt;p&gt;Formalmente, uma função &lt;em&gt;hash&lt;/em&gt;, traduzida em português como “função de
espalhamento”, é uma função que mapeia um conjunto de dados de tamanho
arbitrário em um conjunto de dados de tamanho fixo. Veja, por exemplo, a função
abaixo:&lt;/p&gt;
&lt;figure&gt;
&lt;math display=&quot;block&quot;&gt;
  &lt;mrow&gt;
    &lt;mi&gt;f&lt;/mi&gt;
    &lt;mo&gt;:&lt;/mo&gt;
    &lt;mi&gt;ℤ&lt;/mi&gt;
    &lt;mo&gt;→&lt;/mo&gt;
    &lt;mi&gt;ℤ&lt;/mi&gt;
    &lt;mtext&gt;&amp;#x00A0;&amp;#x00A0;tal que&amp;#x00A0;&amp;#x00A0;&lt;/mtext&gt;
    &lt;mi&gt;f&lt;/mi&gt;
    &lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;
    &lt;mi&gt;x&lt;/mi&gt;
    &lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;
    &lt;mo&gt;=&lt;/mo&gt;
    &lt;mi&gt;x&lt;/mi&gt;
    &lt;mo&gt;mod&lt;/mo&gt;
    &lt;mn&gt;10&lt;/mn&gt;
  &lt;/mrow&gt;
&lt;/math&gt;
&lt;/figure&gt;
&lt;p&gt;Essa função pode ser considerada uma função &lt;em&gt;hash&lt;/em&gt;. Ela receberá um número
inteiro qualquer e irá retornar o resto da divisão por dez. Qualquer resto de
divisão por um número &lt;math display=&quot;inline&quot;&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;, será um número entre
&lt;math display=&quot;inline&quot;&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/math&gt; e &lt;math display=&quot;inline&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;-&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;
&lt;/math&gt;, ou seja, um intervalo fixo. Veja outra função
abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hashStr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; hashed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    hashed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; hashed &lt;span class=&quot;token operator&quot;&gt;^&lt;/span&gt; str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; hashed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A função &lt;code&gt;hashStr&lt;/code&gt; acima, escrita em JavaScript, também pode ser considerada uma
função &lt;em&gt;hash&lt;/em&gt;. Afinal, ela converte uma &lt;em&gt;string&lt;/em&gt; de tamanho arbitrário em um
número, combinando caractere a caractere. O operador &lt;code&gt;^&lt;/code&gt;, nesse exemplo, está
fazendo um
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR&quot;&gt;“ou-exclusivo binário”&lt;/a&gt;,
que sempre retorna um número de 32 bits.&lt;/p&gt;
&lt;p&gt;Os resultados de uma função &lt;em&gt;hash&lt;/em&gt; são chamados de &lt;em&gt;hash codes&lt;/em&gt;, &lt;em&gt;digests&lt;/em&gt; ou
simplesmente &lt;em&gt;hashes&lt;/em&gt;. Boas funções &lt;em&gt;hash&lt;/em&gt; são rápidas e puras, ou seja, a mesma
entrada sempre irá retornar a mesma saída.&lt;/p&gt;
&lt;h2 id=&quot;diferenciando-objetos&quot; tabindex=&quot;-1&quot;&gt;Diferenciando objetos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/cruxhash/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Outro uso bastante comum é a possibilidade de diferenciar rapidamente objetos
com múltiplas propriedades. Suponha que você queira comparar dois objetos por
meio das propriedades que compõem cada um deles. Uma solução trivial seria
comparar cada propriedade, par-à-par, e, se todas forem equivalentes, os objetos
serão considerados iguais. No entanto, caso alguma propriedade for diferente, os
objetos serão diferentes. Veja a tabela abaixo, onde comparamos dois objetos,
&lt;code&gt;A&lt;/code&gt; e &lt;code&gt;B&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Propriedade&lt;/th&gt;
&lt;th&gt;&lt;code&gt;A&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;B&lt;/code&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Iguais?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;nome&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Pedremildo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Pedremildo&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;sobrenome&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Trunk&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Trunk&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;nascimento&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1991-08-14&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1991-08-04&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;✗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;email&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;email@exemplo.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;email@exemplo.com&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;◌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;strong&gt;Resultado&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Diferentes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Se compararmos &lt;code&gt;A&lt;/code&gt; e &lt;code&gt;B&lt;/code&gt;, vemos que os objetos não são iguais porque a
propriedade &lt;code&gt;nascimento&lt;/code&gt; é diferente. Note que, precisamos comparar até o
momento em que uma propriedade possua valores diferentes. Por isso, a
propriedade &lt;code&gt;email&lt;/code&gt; sequer é verificada. Assim, esse algoritmo é linearmente
proporcional à quantidade de propriedades que devemos comparar.&lt;/p&gt;
&lt;p&gt;Essa solução acima pode ser utilizada para objetos pequenos, com algumas dezenas
de propriedades. No entanto, imagine um objeto mais complexo, com centenas de
propriedades. Ou ainda que seja aninhado, com objetos internos e precisam ser
comparados entre si da mesma forma. Você pode ver que, nesse cenário, comparar
propriedade por propriedade pode demorar um pouco…&lt;/p&gt;
&lt;p&gt;Para nos ajudar com essa tarefa, podemos utilizar &lt;em&gt;hash&lt;/em&gt; que sirva como uma
“assinatura” para o objeto. Esse &lt;em&gt;hash&lt;/em&gt; pode ser criado por meio das
propriedades do próprio objeto. Assim, quando compararmos a igualdade de um
objeto com outro, podemos verificar primeiro a assinatura. Se a assinatura for
diferente, não precisamos verificar nenhuma outra propriedade, porque alguma
delas será diferente.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Propriedade&lt;/th&gt;
&lt;th&gt;&lt;code&gt;A&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;B&lt;/code&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Iguais?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;hash&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;19735&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;28465&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;✗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;nome&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Pedremildo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Pedremildo&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;◌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;sobrenome&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Trunk&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Trunk&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;◌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;nascimento&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1991-08-14&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1991-08-04&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;◌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;email&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;email@exemplo.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;email@exemplo.com&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;◌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;strong&gt;Resultado&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Diferentes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Veja que agora, quando comparamos a propriedade &lt;code&gt;hash&lt;/code&gt;, que foi construída a
partir das propriedades do objeto, temos imediatamente um valor diferente, sem
precisar consultar as outras propriedades. No entanto, se as assinaturas forem
iguais, isso significa que os objetos são iguais?&lt;/p&gt;
&lt;h2 id=&quot;colisoes&quot; tabindex=&quot;-1&quot;&gt;Colisões &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/cruxhash/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Como já vimos, uma função &lt;em&gt;hash&lt;/em&gt; mapeia um conjunto de tamanho arbitrário em um
conjunto de tamanho fixo. Como você está mapeando um conjunto de dados
possivelmente maior em um conjunto de dados fixo, pelo
&lt;a href=&quot;https://pt.wikipedia.org/wiki/Princ%C3%ADpio_da_casa_dos_pombos&quot;&gt;princípio da casa dos pombos&lt;/a&gt;,
alguns valores diferentes na entrada vão ser mapeados para uma mesma saída.
Quando isso acontece, temos uma &lt;strong&gt;colisão&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Colisões são problemáticas para funções &lt;em&gt;hash&lt;/em&gt;. Em tabelas &lt;em&gt;hash&lt;/em&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Hash_table#Collision_resolution&quot;&gt;colisões
diminuem o
desempenho&lt;/a&gt;. Em
criptografia,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Collision_attack&quot;&gt;colisões diminuem a segurança&lt;/a&gt;.
Em compressão de dados,
&lt;a href=&quot;https://en.wikipedia.org/wiki/One-way_compression_function&quot;&gt;colisões diminuem a taxa de compactação&lt;/a&gt;.
Boas funções &lt;em&gt;hash&lt;/em&gt; desejam diminuir a taxa de colisão tentando seguir uma
distribuição uniforme. Assim, nenhum intervalo terá mais ou menos chances de
sofrer colisão.&lt;/p&gt;
&lt;p&gt;Em nosso caso de comparação de objetos, colisões nos obrigam a ter que comparar,
inevitavelmente, todas as propriedades. Afinal, mesmo que dois objetos tenham o
mesmo &lt;em&gt;hash&lt;/em&gt;, eles ainda podem ser diferentes. Só conferindo todas as
propriedades que temos a garantia que os objetos são realmente iguais. Agora, se
assinatura for diferente, temos a garantia de que o objeto não é igual. Por
isso, utilizar &lt;em&gt;hashes&lt;/em&gt; é uma forma de agilizar o processo de diferenciar
objetos.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Bloom_filter&quot;&gt;Bloom filter&lt;/a&gt; é uma
  estrutura de dados probabilística que utiliza &lt;em lang=&quot;en&quot;&gt;hash&lt;/em&gt; e que
  possui um fundamento parecido. Ela permite verificar se um elemento está no
  conjunto ou não.
&lt;/p&gt;
&lt;p&gt;
  Falsos positivos podem acontecer, mas falsos negativos não. Portanto, a
  estrutura é capaz de responder sobre a pertinência de um elemento de duas
  formas: “pode estar no conjunto” ou “não está no conjunto“.
&lt;/p&gt;
&lt;/aside&gt;
&lt;h2 id=&quot;apresentando-cruxhash&quot; tabindex=&quot;-1&quot;&gt;Apresentando: CRUXHash &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/cruxhash/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Para facilitar a criação de &lt;em&gt;hashes&lt;/em&gt; de valores primitivos ou objetos em
JavaScript, criei uma pequena biblioteca: a
&lt;a href=&quot;https://github.com/MaxRoecker/cruxhash&quot;&gt;&lt;strong&gt;CRUXHash&lt;/strong&gt;&lt;/a&gt;. Para instalar, utilize o
npm.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i cruxhash&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A CRUXHash é uma biblioteca que provê um conjunto de funções simples para criar
&lt;em&gt;hashes&lt;/em&gt; inteiros e sem sinal para valores em JavaScript. Veja o exemplo abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; hash&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; getSeed &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cruxhash&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Smile, my dear!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 897319059&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getSeed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;my seed&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1866919164&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;コンニチハ, Hello world, Καλημέρα κόσμε 😀&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1149923829&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A sua principal função, &lt;code&gt;hash&lt;/code&gt;, permite criar um &lt;em&gt;hash&lt;/em&gt; de qualquer valor
primitivo JavaScript: uma &lt;em&gt;string&lt;/em&gt;, um booleano, um número… Além disso, permite
que você passe, como segundo parâmetro, um &lt;code&gt;seed&lt;/code&gt;, um número que inicializa o
processo e que pode trazer resultados diferentes de acordo com sua necessidade.&lt;/p&gt;
&lt;aside&gt;
  &lt;p&gt;
    A implementação de &lt;em lang=&quot;en&quot;&gt;hash&lt;/em&gt; de &lt;em lange=&quot;en&quot;&gt;strings&lt;/em&gt;
    é baseada no algoritmo
    &lt;a href=&quot;https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp&quot;&gt;Murmur3.&lt;/a&gt;
    Já o &lt;em lang=&quot;en&quot;&gt;hash&lt;/em&gt; de números é baseado no algoritmo de
    &lt;a href=&quot;http://burtleburtle.net/bob/hash/integer.html&quot;&gt;
      sete saltos de &lt;em lang=&quot;en&quot;&gt;bits&lt;/em&gt; de Thomas Wang.
    &lt;/a&gt;
  &lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Para tratar de objetos, a função &lt;code&gt;hash&lt;/code&gt; trabalha de uma forma especial. Primeiro
ela verifica se o objeto possui um método &lt;code&gt;hashCode&lt;/code&gt; e passa, recursivamente,
seu resultado para o &lt;code&gt;hash&lt;/code&gt;. Esse comportamento é útil para reutilizar objetos
com um processo de &lt;em&gt;hash&lt;/em&gt; já definido. Veja:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; hash &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cruxhash&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1858670630&lt;/span&gt;

obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 796438301&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se o objeto possuir o método &lt;code&gt;valueOf&lt;/code&gt; sobrescrito, como é o caso de objetos
instâncias de &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, etc… a função &lt;code&gt;hash&lt;/code&gt; irá
considerá-lo.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; hash &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cruxhash&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;2014-07-08&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 271363852&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;2014-07-08&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 271363852&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Todo objeto que herde &lt;code&gt;Object.prototype&lt;/code&gt;, terá o &lt;code&gt;valueOf&lt;/code&gt; implementado. No
entanto, essa implementação sempre retorna o próprio objeto. Para evitar uma
recursão infinita, o método obriga que o &lt;code&gt;valueOf&lt;/code&gt; seja sobrescrito.&lt;/p&gt;
&lt;p&gt;Agora, se o objeto implementar o
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol&quot;&gt;Protocolo Iterável&lt;/a&gt;,
um &lt;em&gt;hash&lt;/em&gt; será criado a partir de cada elemento do iterável e, ao final, todos
serão combinados em um &lt;em&gt;hash&lt;/em&gt; só. Veja:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; hash &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cruxhash&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; objA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Symbol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;iterator&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; objB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Symbol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;iterator&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; objC &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Symbol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;iterator&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;objA&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 2974883921&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;objB&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 2974883921&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;objC&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 473105883&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja que, os iteráveis &lt;code&gt;objA&lt;/code&gt; e &lt;code&gt;objB&lt;/code&gt; possuem uma sequência com os mesmos
elementos na mesma ordem e, por isso, seus &lt;em&gt;hashes&lt;/em&gt; são idênticos. Veja, também,
que a ordem faz diferença. A mudança de ordem dos elementos nos iteráveis &lt;code&gt;objA&lt;/code&gt;
e &lt;code&gt;objC&lt;/code&gt; resulta em um &lt;em&gt;hash&lt;/em&gt; completamente diferente.&lt;/p&gt;
&lt;aside&gt;
  &lt;p&gt;
    Em funções &lt;em&gt;hash&lt;/em&gt;, é desejável que pequenas mudanças na entrada que
    causem grandes diferenças na saída. Esse comportamento é conhecido como
    &lt;a href=&quot;https://en.wikipedia.org/wiki/Avalanche_effect&quot;&gt;efeito avalanche.&lt;/a&gt;
  &lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;No entanto, a função &lt;code&gt;hash&lt;/code&gt; vai tratar de forma especial estruturas onde a ordem
dos elementos não importa, como é o caso do &lt;code&gt;Set&lt;/code&gt; ou &lt;code&gt;Map&lt;/code&gt;. Veja:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; hash &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./index&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1421611346&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1421611346&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E por fim, caso você passe um objeto simples, o &lt;em&gt;hash&lt;/em&gt; será criado com base no
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;&lt;code&gt;Object.entries&lt;/code&gt;,&lt;/a&gt;
ou seja, objetos que possuírem mesmas propriedades com mesmos valores, terão
&lt;em&gt;hashes&lt;/em&gt; iguais.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; hash &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./index&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1418113148&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1418113148&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusoes&quot; tabindex=&quot;-1&quot;&gt;Conclusões &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/cruxhash/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finalizo por aqui a apresentação da CRUXHash. A biblioteca disponibiliza outras
funções para usos em casos mais específicos. Por isso, recomendo que você veja
no &lt;a href=&quot;https://github.com/MaxRoecker/cruxhash&quot;&gt;repositório oficial&lt;/a&gt; a documentação
da API disponível.&lt;/p&gt;
&lt;p&gt;Criei essa biblioteca de acordo com minha necessidade em projetos pessoais e
profissionais. Caso você queira adicionar algum comportamento, entre em contato
comigo. PRs são sempre bem vindos!&lt;/p&gt;
&lt;h2 id=&quot;agradecimentos&quot; tabindex=&quot;-1&quot;&gt;Agradecimentos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/cruxhash/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Agradeço meu amigo
&lt;a href=&quot;https://www.linkedin.com/in/henrique-neves-da-silva-5a93a660/&quot;&gt;Henrique Neves&lt;/a&gt;
pela revisão e pelas considerações importantes no texto!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Web Components #2</title>
    <link href="https://maxroecker.github.io/blog/web-components-2/"/>
    <updated>2018-04-02T19:49:13Z</updated>
    <id>https://maxroecker.github.io/blog/web-components-2/</id>
    <content type="html">&lt;p&gt;Como vimos &lt;a href=&quot;https://maxroecker.github.io/blog/web-components-1/&quot;&gt;na publicação anterior&lt;/a&gt;, o termo &lt;em&gt;web
components&lt;/em&gt; se refere ao conjunto de APIs disponibilizadas na plataforma &lt;em&gt;web&lt;/em&gt;
que permitem a criação de elementos personalizados que podem ser instanciados de
forma declarativa como qualquer &lt;em&gt;tag&lt;/em&gt; HTML.&lt;/p&gt;
&lt;p&gt;Com a API de
&lt;a href=&quot;https://html.spec.whatwg.org/#custom-elements&quot;&gt;&lt;strong&gt;elementos personalizados&lt;/strong&gt;&lt;/a&gt;,
os desenvolvedores são capazes de criar novas &lt;em&gt;tags&lt;/em&gt; HTML. É a API fundamental
para os &lt;em&gt;web components&lt;/em&gt; e traz uma forma padronizada de criar componentes
reutilizáveis com nada mais que HTML, CSS e JavaScript. Sem a necessidade de
utilizar uma bibliotecas ou &lt;em&gt;frameworks&lt;/em&gt;. Dessa forma, temos menos código, mais
compatibilidade e mais reutilização.&lt;/p&gt;
&lt;h2 id=&quot;introducao&quot; tabindex=&quot;-1&quot;&gt;Introdução &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/web-components-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://maxroecker.github.io/blog/web-components-1/&quot;&gt;Como já vimos&lt;/a&gt;, para definir um elemento personalizado
basta você estender a classe &lt;code&gt;HTMLElement&lt;/code&gt; e associar ela à uma &lt;em&gt;tag&lt;/em&gt;,
utilizando o método &lt;code&gt;define&lt;/code&gt; do global &lt;code&gt;customElements&lt;/code&gt;. Para exemplificar,
vamos criar um componente chamado &lt;code&gt;wc-counter&lt;/code&gt;, que irá ser um simples contador.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WCCounter&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;customElements&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;wc-counter&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; WCCounter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assim, podemos utilizar nosso elemento da seguinte forma:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;wc-counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;wc-counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;É importante lembrar que utilizar um elemento personalizado não é diferente de
utilizar um &lt;code&gt;div&lt;/code&gt; ou qualquer outro elemento do HTML. No entanto, algumas regras
de nomenclatura precisam ser seguidas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;O nome precisa conter um hífen (&lt;code&gt;-&lt;/code&gt;). Dessa forma o analisador sintático pode
distinguir um elemento personalizado de elementos padrões. Além disso,
previne conflitos caso novas &lt;em&gt;tags&lt;/em&gt; forem adicionadas ao HTML no futuro.&lt;/li&gt;
&lt;li&gt;Você não pode registrar uma mesma &lt;em&gt;tag&lt;/em&gt; mais uma vez. Fazer isso irá lançar
um &lt;code&gt;DOMException&lt;/code&gt;. Uma vez que uma &lt;em&gt;tag&lt;/em&gt; está associada à uma classe, não há
volta.&lt;/li&gt;
&lt;li&gt;Elementos personalizados só podem ser utilizados em par. Ou seja, se você
declarou um elemento como &lt;code&gt;meu-elemento&lt;/code&gt;, você deve escrevê-lo como
&lt;code&gt;&amp;lt;meu-elemento&amp;gt;&amp;lt;/meu-elemento&amp;gt;&lt;/code&gt;. Escrever &lt;code&gt;&amp;lt;meu-elemento /&amp;gt;&lt;/code&gt; não funciona.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;definindo-a-api-do-elemento&quot; tabindex=&quot;-1&quot;&gt;Definindo a API do elemento &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/web-components-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Como utilizamos a &lt;a href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4/&quot;&gt;sintaxe &lt;code&gt;class&lt;/code&gt;&lt;/a&gt;
para definir o construtor do elemento, já utilizamos o &lt;code&gt;extends&lt;/code&gt; para estender o
comportamento do &lt;code&gt;HTMLElement&lt;/code&gt;. Estender o comportamento do &lt;code&gt;HTMLElement&lt;/code&gt;
garante que seu elemento irá seguir a API do DOM e significa que qualquer
propriedade ou métodos que você adicione à classe se tornam parte da interface
DOM do elemento. Ou seja, podemos utilizar a classe para definir a API pública
da sua &lt;em&gt;tag&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Imagine que queremos adicionar duas propriedades: &lt;code&gt;value&lt;/code&gt; e &lt;code&gt;disabled&lt;/code&gt;, que
indica o valor atual do contador e se está desabilitado ou não, respectivamente.
Vamos adicionar também dois métodos: &lt;code&gt;increment&lt;/code&gt; e &lt;code&gt;decrement&lt;/code&gt;, que aumentam e
diminuem o contador em uma unidade. Veja:&lt;/p&gt;
&lt;p&gt;&lt;playground-ide project-src=&quot;/projects/2018-04-02-web-components-2/1/project.json&quot; line-numbers=&quot;&quot; resizable=&quot;&quot;&gt;
&lt;/playground-ide&gt;&lt;/p&gt;
&lt;p&gt;Nesse exemplo estamos criando as propriedades &lt;code&gt;value&lt;/code&gt; e &lt;code&gt;disabled&lt;/code&gt; utilizando
&lt;em&gt;getters&lt;/em&gt; e &lt;em&gt;setters&lt;/em&gt; de objetos do JavaScript. Além disso, estamos refletindo
seus valores em atributos no DOM por meio dos métodos &lt;code&gt;setAttribute&lt;/code&gt; e
&lt;code&gt;removeAttribute&lt;/code&gt;.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;
  Como qualquer elemento personalizado estende a classe
  &lt;code&gt;HTMLElement&lt;/code&gt;, toda a API do DOM está disponível no código do
  próprio elemento. Ou seja, é possível manipular atributos com
  &lt;code&gt;setAttribute&lt;/code&gt; e &lt;code&gt;removeAttribute&lt;/code&gt;, adicionar ouvintes
  de eventos com &lt;code&gt;addEventListener&lt;/code&gt;, acessar os descendentes com
  &lt;code&gt;children&lt;/code&gt; ou selecionar elementos com &lt;code&gt;querySelector&lt;/code&gt;.
&lt;/p&gt;
&lt;/aside&gt;
&lt;h2 id=&quot;definindo-o-comportamento-do-elemento&quot; tabindex=&quot;-1&quot;&gt;Definindo o comportamento do elemento &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/web-components-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://maxroecker.github.io/blog/web-components-1/&quot;&gt;Na publicação anterior&lt;/a&gt;, vimos que é possível
adicionar conteúdo ao elemento manipulando o DOM. Também vimos que para garantir
o encapsulamento do elemento, é importante utilizar um &lt;em&gt;shadow&lt;/em&gt; DOM. Vamos
adicionar, ao &lt;em&gt;shadow&lt;/em&gt; DOM, três elementos: um &lt;code&gt;button&lt;/code&gt; para decrementar o
valor, um &lt;code&gt;span&lt;/code&gt; para exibir o valor e outro &lt;code&gt;button&lt;/code&gt; para incrementar o valor.&lt;/p&gt;
&lt;p&gt;Podemos exibir os valor no &lt;code&gt;span&lt;/code&gt; apropriado e adicionar ouvintes para reagir as
interações do usuário quando o elemento for conectado à árvore principal do DOM,
por meio do método &lt;code&gt;connectedCallback&lt;/code&gt;. Além disso, podemos reagir às mudanças
nas propriedades &lt;code&gt;value&lt;/code&gt;, assim, quando &lt;code&gt;value&lt;/code&gt; for alterado, vamos alterar o
conteúdo do elemento. Podemos fazer isso alterando os &lt;em&gt;setters&lt;/em&gt; de cada
propriedade. Veja abaixo:&lt;/p&gt;
&lt;p&gt;&lt;playground-ide project-src=&quot;/projects/2018-04-02-web-components-2/2/project.json&quot; line-numbers=&quot;&quot; resizable=&quot;&quot;&gt;
&lt;/playground-ide&gt;&lt;/p&gt;
&lt;p&gt;E se eu quiser instanciar nosso &lt;code&gt;wc-counter&lt;/code&gt; com um valor definido? Relembrando
como outros elementos do HTML funcionam, bastaria eu adicionar o nome da
propriedade e o valor na marcação, como abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;wc-counter&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;wc-counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No entanto, você vai perceber que isso não tem efeito algum. Não funciona porque
ainda não sincronizamos o atributo &lt;code&gt;value&lt;/code&gt; à propriedade &lt;code&gt;value&lt;/code&gt;. Atributos e
propriedades são
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes#content_versus_idl_attributes&quot;&gt;mecanismos distintos&lt;/a&gt;
no DOM e não necessariamente sincronizados. Um atributo indica uma marcação no
documento e serializado em uma &lt;em&gt;string&lt;/em&gt;, já uma propriedade é um valor no objeto
e pode ter qualquer tipo de valor do JavaScript.&lt;/p&gt;
&lt;aside&gt;
  &lt;p&gt;
    O elemento &lt;code&gt;input&lt;/code&gt;, por exemplo, possui o atributo
    &lt;code&gt;value&lt;/code&gt; que inicializa a propriedade homônima. No entanto, após a
    instanciação, não há reflexão entre o atributo e propriedade. Mudanças na
    propriedade não alteram o atributo e mudanças no atributo não alteram a
    propriedade.
  &lt;/p&gt;
&lt;/aside&gt;
&lt;h2 id=&quot;reagindo-a-mudancas-nos-atributos&quot; tabindex=&quot;-1&quot;&gt;Reagindo a mudanças nos atributos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/web-components-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Para reagir a mudanças nos atributos precisamos definir quais atributos serão
observados. Para isso, crie a propriedade estática &lt;code&gt;observedAttributes&lt;/code&gt;, que
retorne o nome dos atributos que queira observar. Após isso, sobrescreva o
método &lt;code&gt;attributeChangedCallback&lt;/code&gt;, que recebe como argumento três valores: o
nome, o valor anterior e o valor atual do atributo. O método
&lt;code&gt;attributeChangedCallback&lt;/code&gt; sempre é chamado quando um atributo observado for
alterado. Veja:&lt;/p&gt;
&lt;p&gt;&lt;playground-ide project-src=&quot;/projects/2018-04-02-web-components-2/3/project.json&quot; line-numbers=&quot;&quot; resizable=&quot;&quot;&gt;
&lt;/playground-ide&gt;&lt;/p&gt;
&lt;p&gt;Veja que o qualquer mudança no atributo irá ser refletida na propriedade. A
marcação no HTML funciona como o esperado e inicializa a propriedade com o valor
&lt;code&gt;8&lt;/code&gt;. Também adicionamos a reação de desativar os botões caso o atributo
&lt;code&gt;disabled&lt;/code&gt; esteja definido.&lt;/p&gt;
&lt;aside&gt;
  &lt;p&gt;
    Tome cuidado com os efeitos colaterais dentro do
    &lt;code&gt;attributeChangedCallback&lt;/code&gt;. Poderíamos, por exemplo, ser tentados
    a adicionar essa reação ao &lt;i lang=&quot;en&quot;&gt;setter&lt;/i&gt; da propriedade
    &lt;code&gt;disabled&lt;/code&gt;. No entanto, este &lt;i lang=&quot;en&quot;&gt;setter&lt;/i&gt; manipula o
    próprio atributo &lt;code&gt;disabled&lt;/code&gt;, que dispara novamente o
    &lt;code&gt;attributeChangedCallback&lt;/code&gt;… causando um &lt;i lang=&quot;en&quot;&gt;loop&lt;/i&gt;
    infinito.
  &lt;/p&gt;
&lt;/aside&gt;
&lt;h2 id=&quot;estilizando-de-acordo-com-o-estado&quot; tabindex=&quot;-1&quot;&gt;Estilizando de acordo com o estado &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/web-components-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Como também já vimos, podemos estilizar o elemento utilizando um &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;
encapsulado pelo &lt;em&gt;shadow&lt;/em&gt; DOM. Suponha que você queira estilizar o texto do
&lt;code&gt;span&lt;/code&gt; para negrito, bastaria mudar a marcação atribuída no &lt;em&gt;shadow&lt;/em&gt; DOM. No
entanto, se você estilizar o “próprio” elemento hospedeiro do &lt;em&gt;shadow&lt;/em&gt; DOM, você
utiliza o pseudo-seletor &lt;code&gt;:host&lt;/code&gt;. Vamos mudar para que elemento hospedeiro se
comporte tal como um &lt;code&gt;block&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;playground-ide project-src=&quot;/projects/2018-04-02-web-components-2/4/project.json&quot; line-numbers=&quot;&quot; resizable=&quot;&quot;&gt;
&lt;/playground-ide&gt;&lt;/p&gt;
&lt;p&gt;Veja que também diminuímos a opacidade caso o elemento esteja desabilitado. Uma
vez que nosso elemento reflete a propriedade no atributo &lt;code&gt;disabled&lt;/code&gt;, podemos
utilizar seletores de atributos para reagir a essa mudança.&lt;/p&gt;
&lt;aside&gt;
  &lt;p&gt;
    Por padrão, qualquer elemento personalizado possui a propriedade
    &lt;code&gt;display&lt;/code&gt; como &lt;code&gt;inline-block&lt;/code&gt;.
  &lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Elementos personalizados podem ser estilizados utilizando CSS como qualquer
outro elemento HTML. Ou seja, se o usuário do nosso elemento &lt;code&gt;wc-counter&lt;/code&gt; quiser
mudar o elemento, ele pode. Lembre-se, o encapsulamento só impede que os estilos
da &lt;em&gt;shadow&lt;/em&gt; DOM “vazem” para o DOM principal, no entanto o efeito cascata do CSS
continua valendo.&lt;/p&gt;
&lt;p&gt;&lt;playground-ide project-src=&quot;/projects/2018-04-02-web-components-2/5/project.json&quot; line-numbers=&quot;&quot; resizable=&quot;&quot;&gt;
&lt;/playground-ide&gt;&lt;/p&gt;
&lt;p&gt;Veja também que “adicionamos” um delay na definição do elemento, e, enquanto ele
não é definido, aplicou-se um estilo temporário com o uso da pseudo-classe
&lt;code&gt;:defined&lt;/code&gt;. Caso não tenha visto, recarregue o resultado clicando no botão “↻”.&lt;/p&gt;
&lt;h2 id=&quot;elementos-nao-definidos-e-desconhecidos&quot; tabindex=&quot;-1&quot;&gt;Elementos não definidos e desconhecidos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/web-components-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;O HTML é bastante flexível. Por exemplo, ao declarar uma &lt;em&gt;tag&lt;/em&gt; &lt;code&gt;&amp;lt;accordion&amp;gt;&lt;/code&gt; em
um documento, o navegador vai aceitá-la sem problemas, mesmo que &lt;code&gt;&amp;lt;accordion&amp;gt;&lt;/code&gt;
não faça parte do vocabulário. Esse comportamento é previsto pela &lt;a href=&quot;https://html.spec.whatwg.org/multipage/dom.html#htmlunknownelement&quot;&gt;própria
especificação do
HTML&lt;/a&gt;.
Elementos desconhecidos são instâncias de &lt;code&gt;HTMLUnknownElement&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O mesmo não vale para elementos personalizados. Elementos personalizados
“potenciais” são sempre instâncias de &lt;code&gt;HTMLElement&lt;/code&gt;, mesmo que ainda não foram
definidos. Ou seja, se você criar um elemento com uma &lt;em&gt;tag&lt;/em&gt; que contém um &lt;code&gt;-&lt;/code&gt;,
esse elemento será instância de &lt;code&gt;HTMLElement&lt;/code&gt;. Veja:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// &quot;accordion&quot; não é um elemento conhecido do HTML nem um elemento personalizado&lt;/span&gt;
document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;accordion&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLUnknownElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// &quot;wc-accordion&quot; é um nome válido para elemento personalizado&lt;/span&gt;
document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;wc-accordion&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLUnknownElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O global &lt;code&gt;customElements&lt;/code&gt; também contém alguns métodos úteis. Por exemplo, caso
você já tenha registrado um elemento personalizado, você pode pegar uma
referência do construtor utilizando o método &lt;code&gt;get&lt;/code&gt; e passando a &lt;em&gt;tag&lt;/em&gt;. Caso o
elemento não tenha sido registrado ainda, &lt;code&gt;get&lt;/code&gt; retorna &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; WCCounter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; customElements&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;wc-counter&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; counter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WCCounter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você também pode definir &lt;em&gt;callbacks&lt;/em&gt; para futuras definições de elementos com o
método &lt;code&gt;whenDefined&lt;/code&gt;. Este método retorna uma instância de &lt;code&gt;Promise&lt;/code&gt; que
resolve-se quando o elemento for definido ou rejeita-se quando o nome passado
não for um nome de elemento personalizado válido.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;customElements&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;whenDefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;wc-counter&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&quot;wc-counter&quot; está pronto!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusao&quot; tabindex=&quot;-1&quot;&gt;Conclusão &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/web-components-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Elementos personalizados são uma forma de definir novas &lt;em&gt;tags&lt;/em&gt; HTML e permitem a
criação de componentes reutilizáveis quando combinado com outras tecnologias,
como o &lt;em&gt;shadow&lt;/em&gt; DOM. Eles fornecem várias vantagens:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interoperabilidade entre os navegadores;&lt;/li&gt;
&lt;li&gt;São bem integrados à ferramentas de &lt;em&gt;debug&lt;/em&gt; já presentes nos navegadores e
conhecidas pelos desenvolvedores;&lt;/li&gt;
&lt;li&gt;Não precisam de qualquer biblioteca ou &lt;em&gt;framework&lt;/em&gt; para iniciar e provêm um
modelo de programação familiar ao DOM. Você precisa apenas de HTML, CSS e
JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mas essa série de publicações ainda não acabou. Ainda temos que falar sobre
outras especificações que pertencem ao “ecossistema” de &lt;em&gt;web components&lt;/em&gt;. Até a
próxima!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>IDs são globais</title>
    <link href="https://maxroecker.github.io/blog/ids-globais/"/>
    <updated>2018-02-22T10:34:01Z</updated>
    <id>https://maxroecker.github.io/blog/ids-globais/</id>
    <content type="html">&lt;p&gt;Você sabia que se você precisar acessar um elemento de um documento HTML marcado
com um &lt;code&gt;id&lt;/code&gt;, basta você acessar a variável com o mesmo nome? Ou seja, se você
tiver uma marcação assim:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No console do navegador você pode digitar &lt;code&gt;foo&lt;/code&gt; e terá acesso ao elemento DOM.
&lt;strong&gt;Mas, por quê?&lt;/strong&gt; É um comportamento padrão dos navegadores para
facilitar o &lt;em&gt;debug&lt;/em&gt; ou isso é o padrão esperado?&lt;/p&gt;
&lt;p&gt;Na verdade, o comportamento acima é previsto pelo próprio HTML. A
&lt;a href=&quot;https://html.spec.whatwg.org/#named-access-on-the-window-object&quot;&gt;especificação do HTML&lt;/a&gt;
determina que o objeto &lt;code&gt;window&lt;/code&gt; deve conter uma propriedade que referencia um
elemento da árvore DOM se:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Há apenas um elemento no documento o qual o nome da propriedade seja igual ao
atributo &lt;code&gt;id&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Há apenas um elemento no documento o qual o nome da propriedade seja igual ao
atributo &lt;code&gt;name&lt;/code&gt; e este elemento for um &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;applet&lt;/code&gt;, &lt;code&gt;embed&lt;/code&gt;, &lt;code&gt;form&lt;/code&gt;,
&lt;code&gt;frame&lt;/code&gt;, &lt;code&gt;frameset&lt;/code&gt;, &lt;code&gt;iframe&lt;/code&gt;, &lt;code&gt;img&lt;/code&gt; ou &lt;code&gt;object&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Em certos casos onde há mais de um elemento que satisfaça as condições acima,
outras regras são aplicadas e um
&lt;a href=&quot;https://developer.mozilla.org/pt-BR/docs/Web/API/HTMLCollection&quot;&gt;&lt;code&gt;HTMLCollection&lt;/code&gt;&lt;/a&gt;
pode ser retornado ao acessar a variável. No entanto, a ideia principal é
mantida: uma variável representando elementos no DOM será criada no escopo
global. Assim, o código abaixo funciona tal como o esperado, afinal, acessar uma
variável global é acessar uma propriedade do &lt;code&gt;window&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;btn&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Clique aqui!&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
  btn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    btn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Você clicou!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No entanto, é preciso de atenção. Se já existir uma variável com o valor, ela
não será substituída pela referência do elemento. Por exemplo, se escrever o
atributo &lt;code&gt;id=&amp;quot;fetch&amp;quot;&lt;/code&gt; ele não irá substituir a
&lt;a href=&quot;https://developer.mozilla.org/pt-BR/docs/Web/API/Fetch_API&quot;&gt;função &lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt;
presente nos navegadores modernos.&lt;/p&gt;
&lt;p&gt;Como a própria especificação diz, este é um comportamento para manter a
retrocompatibilidade e não recomendam se apoiar nele para desenvolver seus
códigos. Além disso, conforme novas funcionalidades vão sendo adicionadas à
plataforma &lt;em&gt;web&lt;/em&gt;, aumentam as chances de haver um conflito de nomes e seu código
deixar de funcionar. Por isso, quando precisar selecionar um elemento na árvore
DOM, utilize as funções
&lt;a href=&quot;https://developer.mozilla.org/pt-BR/docs/Web/API/Document/getElementById&quot;&gt;&lt;code&gt;document.getElementById&lt;/code&gt;&lt;/a&gt;
ou
&lt;a href=&quot;https://developer.mozilla.org/pt-BR/docs/Web/API/Document/querySelector&quot;&gt;&lt;code&gt;document.querySelector&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Web Components #1</title>
    <link href="https://maxroecker.github.io/blog/web-components-1/"/>
    <updated>2018-01-30T01:00:55Z</updated>
    <id>https://maxroecker.github.io/blog/web-components-1/</id>
    <content type="html">&lt;p&gt;Você já deve conhecer o HTML, certo? Uma ótima ferramenta para construir
aplicações na &lt;em&gt;web&lt;/em&gt;. O HTML é declarativo, portável, bem suportado e fácil de
trabalhar. Quando você está construindo um documento ou uma aplicação com HTML
você tem algumas opções disponíveis. Você quer criar uma âncora? Utilize a &lt;em&gt;tag&lt;/em&gt;
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt;. Quer criar
um parágrafo? Utilize a &lt;em&gt;tag&lt;/em&gt;
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;&lt;/a&gt;. Um botão?
Você pode utilizar a &lt;em&gt;tag&lt;/em&gt;
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button&quot;&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;&lt;/a&gt;
ou a
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/button&quot;&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;button&amp;quot;&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Mas e se, por exemplo, você quiser criar uma
&lt;a href=&quot;https://en.wikipedia.org/wiki/Tab_(interface)&quot;&gt;aba&lt;/a&gt;? Que &lt;em&gt;tag&lt;/em&gt; do HTML você vai
usar? E se for um &lt;a href=&quot;https://en.wikipedia.org/wiki/Tooltip&quot;&gt;&lt;em&gt;tooltip&lt;/em&gt;&lt;/a&gt; ou um
&lt;a href=&quot;https://en.wikipedia.org/wiki/Accordion_(GUI)&quot;&gt;&lt;em&gt;accordion&lt;/em&gt;&lt;/a&gt;? O vocabulário do
HTML é limitado e não existe uma &lt;em&gt;tag&lt;/em&gt; que descreva completamente cada um dos
elementos de interface anteriores. Normalmente, tais componentes envolvem
utilizar mais de uma &lt;em&gt;tag&lt;/em&gt; HTML associado à um pouco de comportamento dado em um
&lt;em&gt;script&lt;/em&gt;. Isso não é uma tarefa simples. E fica cada vez mais complexa quanto
mais elementos em tela você precisar controlar. Não seria mais fácil uma forma
de você poder “estender” o HTML e poder criar elementos personalizados para a
sua necessidade, encapsulando estilo, comportamento e marcação em uma só
“entidade”?&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://maxroecker.github.io/img/illustrations/lock.svg&quot; alt=&quot;Um leão heráldico.&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Os &lt;a href=&quot;https://en.wikipedia.org/wiki/Web_Components&quot;&gt;&lt;em&gt;web components&lt;/em&gt;&lt;/a&gt; são a
resposta da plataforma &lt;em&gt;web&lt;/em&gt; para este problema. Com eles, você pode criar
elementos personalizados e fazer uma extensão do HTML, preenchendo as lacunas e
ligando a estrutura declarativa com o comportamento via código. Se você está com
um problema que o HTML não pode resolver, talvez a criação de um elemento
personalizado pode. Elementos personalizados permitem que os navegadores
adicionem comportamento ao HTML e preservando os benefícios que já possui.&lt;/p&gt;
&lt;p&gt;Os &lt;em&gt;web components&lt;/em&gt; são, na verdade, um termo “guarda-chuva” para um conjunto de
APIs e tecnologias disponibilizadas nos navegadores que, quando utilizadas em
conjunto, permitem a criação de componentes completos. Se fundamentam em três
principais especificações:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://html.spec.whatwg.org/#custom-elements&quot;&gt;Elementos personalizados&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dom.spec.whatwg.org/#shadow-trees&quot;&gt;&lt;em&gt;Shadow&lt;/em&gt; DOM&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/scripting.html#the-template-element&quot;&gt;O elemento &lt;em&gt;template&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Antes de detalhar cada uma dessas especificações, vamos fazer um apanhado geral
de como &lt;em&gt;web components&lt;/em&gt; trabalham e como você pode utilizá-los.&lt;/p&gt;
&lt;h2 id=&quot;como-definir-e-instanciar-um-web-component&quot; tabindex=&quot;-1&quot;&gt;Como definir e instanciar um &lt;em&gt;web component&lt;/em&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/web-components-1/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Para criar um &lt;em&gt;web component&lt;/em&gt; basta você estender a classe
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement&quot;&gt;&lt;code&gt;HTMLElement&lt;/code&gt;&lt;/a&gt; e
registrar uma tag associada a essa classe por meio do método &lt;code&gt;define&lt;/code&gt; do objeto
global &lt;code&gt;customElements&lt;/code&gt;. Simples assim! Veja um exemplo no código abaixo que
está utilizando a &lt;a href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4&quot;&gt;sintaxe de classes&lt;/a&gt;
do ES2015.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;customElements&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;hello-world&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; HelloWorld&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A partir de agora, utilizar o elemento &lt;code&gt;hello-world&lt;/code&gt; não é diferente de utilizar
um &lt;code&gt;div&lt;/code&gt;. Você pode utilizar a tag de forma declarativa no HTML. Ou criar um
elemento de forma imperativa por meio do DOM. Você também pode utilizar as APIs
do DOM para selecionar e manipular seu elemento personalizado como qualquer
outro. Veja abaixo:&lt;/p&gt;
&lt;p&gt;&lt;playground-ide project-src=&quot;/projects/2018-01-30-web-components-1/1/project.json&quot; editable-filesystem=&quot;&quot; line-numbers=&quot;&quot; resizable=&quot;&quot;&gt;
&lt;/playground-ide&gt;&lt;/p&gt;
&lt;p&gt;Você pode ver que, como com seu elemento personalizado presente na árvore DOM,
nada é exibido no navegador. Isso acontece porque ainda não adicionamos conteúdo
ao &lt;em&gt;web component&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;adicionando-conteudo-ao-web-component&quot; tabindex=&quot;-1&quot;&gt;Adicionando conteúdo ao &lt;em&gt;web component&lt;/em&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/web-components-1/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Todo e qualquer comportamento do componente é dado pela a classe associada à
&lt;em&gt;tag&lt;/em&gt;. No nosso caso, se queremos adicionar um conteúdo ao &lt;code&gt;hello-world&lt;/code&gt;,
precisamos defini-lo na classe &lt;code&gt;HelloWorld&lt;/code&gt;. Como o próprio nome do componente
sugere, vamos exibir a frase “Hello, World!” em um &lt;code&gt;h1&lt;/code&gt; no nosso componente.
Para fazer isso, sobreescrevemos o método &lt;code&gt;connectedCallback&lt;/code&gt;. Veja:&lt;/p&gt;
&lt;p&gt;&lt;playground-ide project-src=&quot;/projects/2018-01-30-web-components-1/2/project.json&quot; editable-filesystem=&quot;&quot; line-numbers=&quot;&quot; resizable=&quot;&quot;&gt;
&lt;/playground-ide&gt;&lt;/p&gt;
&lt;aside&gt;
  &lt;p&gt;
    O método &lt;code&gt;connectedCallback&lt;/code&gt; é executado quando o elemento é
    “conectado” à árvore DOM. Outros métodos também são disponibilizados pela
    API de elementos personalizados e formam o “ciclo de vida” de um
    &lt;i&gt;web component&lt;/i&gt;, veja &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks&quot;&gt;aqui&lt;/a&gt;.
  &lt;/p&gt;
&lt;/aside&gt;
&lt;h2 id=&quot;adicionando-estilos-ao-web-component&quot; tabindex=&quot;-1&quot;&gt;Adicionando estilos ao &lt;em&gt;web component&lt;/em&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/web-components-1/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Bom, agora que temos nosso componente, vamos estilizá-lo para que o &lt;code&gt;h1&lt;/code&gt; tenha
uma cor azul. Podemos fazer isso com CSS utilizando o elemento &lt;code&gt;style&lt;/code&gt; e
atribuímos ao &lt;code&gt;head&lt;/code&gt; do documento. Veja:&lt;/p&gt;
&lt;p&gt;&lt;playground-ide project-src=&quot;/projects/2018-01-30-web-components-1/3/project.json&quot; editable-filesystem=&quot;&quot; line-numbers=&quot;&quot; resizable=&quot;&quot;&gt;
&lt;/playground-ide&gt;&lt;/p&gt;
&lt;p&gt;No entanto você vai perceber que outros elementos &lt;code&gt;h1&lt;/code&gt; foram estilizados também.
Isso acontece porque o comportamento padrão do CSS é global. Uma folha de
estilos afeta todos os elementos de um documento. No entanto, para solucionar
este problema, temos em mãos a API &lt;strong&gt;&lt;em&gt;Shadow&lt;/em&gt; DOM&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;encapsulando-o-web-component&quot; tabindex=&quot;-1&quot;&gt;Encapsulando o &lt;em&gt;web component&lt;/em&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/web-components-1/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A &lt;em&gt;Shadow&lt;/em&gt; DOM é uma API que permite criar subárvores DOM encapsuladas da árvore
DOM principal. Assim, qualquer marcação, estilo ou &lt;em&gt;script&lt;/em&gt; que seja definido no
&lt;em&gt;shadow&lt;/em&gt; DOM só afeta o próprio &lt;em&gt;shadow&lt;/em&gt; DOM. Nós podemos fazer isso por meio
do método &lt;code&gt;attachShadow&lt;/code&gt;. Veja:&lt;/p&gt;
&lt;p&gt;&lt;playground-ide project-src=&quot;/projects/2018-01-30-web-components-1/4/project.json&quot; editable-filesystem=&quot;&quot; line-numbers=&quot;&quot; resizable=&quot;&quot;&gt;
&lt;/playground-ide&gt;&lt;/p&gt;
&lt;p&gt;Se você ver o resultado, agora somente o &lt;code&gt;h1&lt;/code&gt; do &lt;em&gt;web component&lt;/em&gt; está estilizado
e, graças ao &lt;em&gt;shadow&lt;/em&gt; DOM, não temos efeitos colaterais em outros elementos da
árvore DOM.&lt;/p&gt;
&lt;h2 id=&quot;conclusao&quot; tabindex=&quot;-1&quot;&gt;Conclusão &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/web-components-1/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;O termo &lt;em&gt;web components&lt;/em&gt; define um conjunto de especificações de baixo nível
que, quando utilizadas em conjunto, permitem criar verdadeiros componentes que
podem ser reutilizados em uma aplicação sem a necessidade de convenção,
biblioteca ou &lt;em&gt;framework&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Existem outras especificações abrangidas pelo termo &lt;em&gt;web components&lt;/em&gt; e que não
vimos nesta introdução; como o elemento &lt;code&gt;template&lt;/code&gt;, o elemento slot ou os
módulos de CSS. Meu objetivo é criar uma série de publicações abordando os
detalhes de cada uma dessas especificações. Além disso, vamos ver algumas boas
práticas quando estamos trabalhando com componentes e como podemos utilizá-los
para solucionar problemas durante o desenvolvimento de aplicações para a &lt;em&gt;web&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Conforme o desenvolvimento &lt;em&gt;web&lt;/em&gt; se torna mais complexo, desenvolvedores irão
“repassar” mais responsabilidades para a plataforma, que amadurece e evolui.
Este é o caso dos &lt;em&gt;web components&lt;/em&gt; que, atualmente, já são suportados na grande
maioria dos grandes navegadores.&lt;/p&gt;
&lt;p&gt;No entanto, essa é uma tecnologia ainda em fase de construção. Certas
especificações ainda estão em fase inicial ou com suporte bastante limitado, mas
que ilustram um futuro promissor para a tecnologia.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Captura e borbulhamento de eventos</title>
    <link href="https://maxroecker.github.io/blog/captura-e-borbulhamento-de-eventos/"/>
    <updated>2018-01-14T02:02:00Z</updated>
    <id>https://maxroecker.github.io/blog/captura-e-borbulhamento-de-eventos/</id>
    <content type="html">&lt;p&gt;Um dos aspectos mais confusos quando estamos trabalhando com eventos são os
estágios que um evento passa enquanto é propagado pela árvore DOM: a &lt;strong&gt;captura&lt;/strong&gt;
e o &lt;strong&gt;borbulhamento&lt;/strong&gt;. Não é sempre que temos problemas, mas você pode ter uma
baita dor de cabeça se você não entender o que cada um dessas etapas faz e como
elas funcionam.&lt;/p&gt;
&lt;p&gt;A captura e o borbulhamento de eventos são mecanismos de propagação que
descrevem o que acontece quando um mesmo evento é “escutado” por dois elementos
que são descendentes. Antes de prosseguir, dê uma olhada neste ótimo
&lt;a href=&quot;https://mdn.github.io/learning-area/javascript/building-blocks/events/show-video-box.html&quot;&gt;exemplo do MDN&lt;/a&gt;,
que também pode ser visto abaixo:&lt;/p&gt;
&lt;iframe src=&quot;https://mdn.github.io/learning-area/javascript/building-blocks/events/show-video-box.html&quot; loading=&quot;lazy&quot; width=&quot;100%&quot; height=&quot;512&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Nesse exemplo, o HTML tem a seguinte marcação:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Display video&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;hidden&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;video&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;rabbit320.mp4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video/mp4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;rabbit320.webm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;video/webm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;video&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quando há um clique em &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, o vídeo é exibido mudando a classe do &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;
de &lt;code&gt;hidden&lt;/code&gt; para &lt;code&gt;showing&lt;/code&gt; (há um CSS para isso também). Além disso, se você
clicar no &lt;code&gt;div&lt;/code&gt; do vídeo, ela irá automaticamente fechar e, se você clicar no
vídeo, ele irá iniciar a execução. Veja o script abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; button &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;button&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; div &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; video &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;video&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

button&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  div&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;class&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;showing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

div&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  div&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;class&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;hidden&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Entretanto, temos um problema com essa implementação e você já deve ter
percebido: se você abre o vídeo e clica para iniciar a execução, o vídeo “some”
e você precisa abrir de novo pelo botão. Isso acontece porque o &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;, que
ouve eventos de clique é descendente de &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, que também ouve eventos de
clique. Ou seja, quando você clica no vídeo para iniciar a execução, ambos os
ouvintes são executados e, por isso, o vídeo fecha.&lt;/p&gt;
&lt;h2 id=&quot;captura-e-borbulhamento&quot; tabindex=&quot;-1&quot;&gt;Captura e borbulhamento &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/captura-e-borbulhamento-de-eventos/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Quando um evento é disparado por um elemento que possui algum antecessor (no
exemplo acima, &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tem &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; como antecessor), os navegadores podem
propagá-lo em dois estágios: a captura e o borbulhamento.&lt;/p&gt;
&lt;p&gt;No estágio de captura, o navegador verifica se o antecessor mais distante do
elemento (normalmente, o &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;) possui um ouvinte do evento, e, se existir,
ele o executa. E então ele passa para o próximo antecessor, e faz a mesma coisa;
e assim por diante até que atinja o elemento que foi efetivamente clicado.&lt;/p&gt;
&lt;p&gt;Já no estágio de borbulhamento, o contrário é feito: o navegador verifica se o
elemento que foi efetivamente clicado tem um ouvinte para o evento e, em caso
afirmativo, executa o código associado; então ele vai para antecessor mais
próximo e faz a mesma coisa, e assim por diante até chegar no antecessor mais
distante, o &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Você pode ver os dois fluxos sumarizados na imagem abaixo:&lt;/p&gt;
&lt;figure&gt;  
  &lt;img alt=&quot;Diagrama representado a captura e o borbulhamento de eventos no DOM&quot; title=&quot;undefined&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://maxroecker.github.io/img/3yTE12NbwG-800.svg&quot; width=&quot;800&quot; height=&quot;400&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Nas versões atuais do DOM, todos os ouvintes de eventos são registrados somente
para o estágio de borbulhamento por padrão. Por isso, em nosso exemplo, o evento
de clique borbulha de &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; para o antecessor &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. Assim, ele irá
encontrar o ouvinte de clique em &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; e vai começar a rodar o vídeo. Logo
em seguida, ele vai encontrar o ouvinte em &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; e vai ocultar o vídeo.&lt;/p&gt;
&lt;h3 id=&quot;parando-a-propagacao-dos-eventos&quot; tabindex=&quot;-1&quot;&gt;Parando a propagação dos eventos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/captura-e-borbulhamento-de-eventos/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;O comportamento do exemplo acima é bastante chato, mas pode ser consertado. O
DOM, por meio da classe &lt;code&gt;Event&lt;/code&gt;, fornece o método &lt;code&gt;stopPropagation&lt;/code&gt; que pode ser
chamado em um ouvinte quando queremos parar qualquer uma das propagações.&lt;/p&gt;
&lt;p&gt;Dessa forma, podemos fazer nosso ouvinte de clique no &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; parar a
propagação caso o vídeo não esteja sendo executado. Assim, se &lt;code&gt;stopPropagation&lt;/code&gt;
for chamado, o ouvinte em &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; não é executado. Veja:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;played&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    video&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como mencionei acima, os eventos são sempre propagados, por padrão, no estágio
de borbulhamento. No entanto, você pode alterar esse comportamento ao registrar
o ouvinte configurando o terceiro parâmetro da função &lt;code&gt;addEventListener&lt;/code&gt;, por
exemplo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;div&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    div&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;class&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;hidden&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No entanto, é importante lembrar que, se um evento é escutado nos dois
estágios de propagação, o estágio de captura será sempre executado primeiro e,
depois, seguido do estágio de borbulhamento.&lt;/p&gt;
&lt;aside&gt;
  &lt;p&gt;
    Porque existem dois estágios de propagação de eventos? Isso se deve aos dias
    onde os navegadores não eram muito compatíveis entre si. O Netscape
    utilizava somente a propagação por captura, já o Internet Explorer, usava
    somente a propagação por borbulhamento. Quando o W3C resolveu padronizar
    esse comportamento e fazer os navegadores entrarem em consenso, resolveu-se
    utilizar um sistema com as duas formas de propagação, que é implementado
    pelos navegadores atualmente.
  &lt;/p&gt;
&lt;/aside&gt;
&lt;h2 id=&quot;delegacao-de-eventos&quot; tabindex=&quot;-1&quot;&gt;Delegação de eventos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/captura-e-borbulhamento-de-eventos/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Imagine que você tem vários elementos &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; em uma lista &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, como na
marcação abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;item-a&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Item A&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;item-b&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Item B&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;item-c&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Item C&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  …
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Imagine que quando um elemento dessa lista sofrer um clique, você quer exibir um
alerta para o usuário com o &lt;code&gt;id&lt;/code&gt; do elemento clicado. Você pode adicionar um
ouvinte em cada elemento, como você pode ver abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; items &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;#list li&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; item &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; items&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// target é o elemento que foi clicado&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E se essa lista for dinâmica? Imagine que seja comum adicionar e remover itens,
você terá que ficar adicionando e removendo ouvintes toda vez para garantir o
funcionamento do seu código. Isso parece trabalhoso…&lt;/p&gt;
&lt;p&gt;No entanto, podemos utilizar a propagação de eventos a nosso favor para fazer
uma &lt;strong&gt;delegação de eventos&lt;/strong&gt;. Esse conceito é bastante utilizado quando você
quer que um mesmo trecho de código seja executado em um grande número de
descendentes. Ou seja, é mais fácil você apenas adicionar um ouvinte no
antecessor direto e esperar que os eventos sejam propagados por borbulhamento
até ele. Com a propagação de eventos, podemos atingir o mesmo resultado acima
com o seguinte código:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;#list&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// target ainda é o elemento que foi clicado&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Com o código acima, as preocupações com a adição ou remoção de itens deixam de
existir porque só temos um ouvinte para toda a lista.&lt;/p&gt;
&lt;h2 id=&quot;conclusao&quot; tabindex=&quot;-1&quot;&gt;Conclusão &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/captura-e-borbulhamento-de-eventos/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Com o que vimos até agora, você já tem um bom fundamento sobre os diferentes
estágios de propagação de eventos: a captura e o borbulhamento. Apesar de um
deles raramente ser utilizado, é importante conhecer como o DOM funciona para
que você saiba resolver problemas quando eles surgirem.&lt;/p&gt;
&lt;p&gt;Um bom desenvolvedor de &lt;em&gt;software&lt;/em&gt; deve conhecer as ferramentas com que
trabalha, e se você trabalha com &lt;em&gt;web&lt;/em&gt;, deve conhecer o DOM.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>O que é o DOM?</title>
    <link href="https://maxroecker.github.io/blog/o-que-e-o-dom/"/>
    <updated>2016-08-05T22:15:22Z</updated>
    <id>https://maxroecker.github.io/blog/o-que-e-o-dom/</id>
    <content type="html">&lt;p&gt;O &lt;strong&gt;Modelo Objeto de Documento&lt;/strong&gt; (DOM, do inglês &lt;em lang=&quot;en&quot;&gt;Document Object
Model&lt;/em&gt;) é uma estrutura de dados que representa a estrutura e o conteúdo de
um documento &lt;em&gt;web&lt;/em&gt;. Técnicamente, o DOM é uma representação orientada a objetos
de documentos HTML e XML, e fornece funções e métodos para que um programa possa
interagir com eles.&lt;/p&gt;
&lt;p&gt;O DOM é definido pelas especificações da &lt;a href=&quot;https://www.w3.org/DOM/&quot;&gt;W3C&lt;/a&gt; e da
&lt;a href=&quot;https://dom.spec.whatwg.org/&quot;&gt;WHATWG&lt;/a&gt;, e implementado pelos navegadores. Muitos
navegadores podem estender essa especificação e disponibilizar funcionalidades
que não são adotadas por todos os navegadores, então é preciso cuidado e é
sempre recomendado seguir o padrão das especificações.&lt;/p&gt;
&lt;p&gt;Como dito, o DOM representa um documento &lt;em&gt;web&lt;/em&gt; como uma API orientada a objetos.
Todas as propriedades, métodos e eventos disponíveis para manipular e criar
páginas &lt;em&gt;web&lt;/em&gt; são organizadas em objetos. Uma página HTML, por exemplo, será
representada pela classe &lt;code&gt;Document&lt;/code&gt;. Já uma tabela, escrita com a tag &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;,
será representada pela classe &lt;code&gt;HTMLTableElement&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O DOM define métodos que servem para buscar elementos também. Um exemplo é o
&lt;code&gt;querySelectorAll&lt;/code&gt;, que recebe um seletor CSS em uma &lt;em&gt;string&lt;/em&gt; e retornar
elementos descendentes que casam com o seletor dado.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; paragraphs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;p&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; paragraph &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; paragraphs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;paragraph&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;o-dom-e-o-javascript&quot; tabindex=&quot;-1&quot;&gt;O DOM e o JavaScript &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/o-que-e-o-dom/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;No exemplo anterior, e em quase todos os exemplos que você vai encontrar quando
pesquisar e trabalhar com DOM, você utilizará o JavaScript. No entanto, é
importante entender e separar o DOM e o JavaScript. DOM não é uma linguagem de
programação, mas sem o DOM o JavaScript não seria capaz de compreender páginas
&lt;em&gt;web&lt;/em&gt; e adicionar interação à elas.&lt;/p&gt;
&lt;p&gt;No início da &lt;em&gt;web&lt;/em&gt;, o JavaScript e o DOM eram muito interligados. Mas, com o
desenvolvimento das especificações e da tecnologia &lt;em&gt;web&lt;/em&gt;, eles se desenvolveram
em duas entidades distintas. O DOM moderno é projetado para ser implementado em
qualquer linguagem de programação. Veja um exemplo de utilização do DOM em
Python usando a biblioteca
&lt;a href=&quot;https://docs.python.org/3/library/xml.dom.minidom.html&quot;&gt;&lt;code&gt;minidom&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-py&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; xml&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;minidom &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; dom

document &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./index.html&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
p_list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getElementsByTagName&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;p&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; p_list&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;acessando-o-dom&quot; tabindex=&quot;-1&quot;&gt;Acessando o DOM &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/o-que-e-o-dom/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Nos navegadores não é necessário adicionar uma biblioteca para utilizar o DOM,
qualquer &lt;code&gt;script&lt;/code&gt; JavaScript executado no ambiente dos navegadores tem acesso
a ele. Veja um exemplo abaixo de um documento HTML que utiliza o DOM para
construir um cabeçalho com a frase “Olá Mundo!”.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;doctype&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;UTF-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
      window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;load&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; header &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;h1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Olá Mundo!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        header&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;header&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Grande parte do conteúdo do &lt;em&gt;script&lt;/em&gt; utiliza o DOM nesse exemplo: o método
&lt;code&gt;addEventListener&lt;/code&gt; do &lt;code&gt;window&lt;/code&gt;; os método &lt;code&gt;createElement&lt;/code&gt; do &lt;code&gt;document&lt;/code&gt; ou o
&lt;code&gt;appendChild&lt;/code&gt; do &lt;code&gt;header&lt;/code&gt;. Todos esses métodos são definidos pelo DOM e
disponibilizados pelo navegador.&lt;/p&gt;
&lt;h2 id=&quot;algumas-interfaces-fundamentais&quot; tabindex=&quot;-1&quot;&gt;Algumas interfaces fundamentais &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/o-que-e-o-dom/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Como já dito anteriormente, o DOM é uma API orientada a objetos que representa
um documento &lt;em&gt;web&lt;/em&gt;. Um documento HTML, por exemplo, é representado no DOM como
um objeto que segue a interface
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; e
apresenta uma estrutura similar com uma
&lt;a href=&quot;https://pt.wikipedia.org/wiki/%C3%81rvore_(estrutura_de_dados)&quot;&gt;árvore&lt;/a&gt;. Muitas
vezes esse objeto é chamado de “Árvore DOM”. Nos navegadores você pode acessar a
instância desse objeto pela variável &lt;code&gt;document&lt;/code&gt; (como fizemos no exemplo
anterior).&lt;/p&gt;
&lt;p&gt;No entanto, a interface &lt;code&gt;Document&lt;/code&gt; estende outra interface ainda mais genérica,
a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;Node&lt;/code&gt; é uma
interface genérica que muitas outras APIs do DOM são baseadas. Qualquer “nó” no
DOM implementa &lt;code&gt;Node&lt;/code&gt;. Alguns exemplos incluem o já mencionado &lt;code&gt;Document&lt;/code&gt;, mas
temos também
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt;, interface
que todas as tags HTML seguem; ou também a
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt;, interface
implementada pelos nós de texto do documento; e até mesmo a
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Comment&quot;&gt;&lt;code&gt;Comment&lt;/code&gt;&lt;/a&gt;, que
representa um comentário denotado pela marcação &lt;code&gt;&amp;lt;!-- --&amp;gt;&lt;/code&gt; no HTML.&lt;/p&gt;
&lt;p&gt;Outra interface importante é a
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget&quot;&gt;&lt;code&gt;EventTarget&lt;/code&gt;&lt;/a&gt;.
Todos os nós DOM implementam essa interface, pois &lt;code&gt;Node&lt;/code&gt; é uma extensão de
&lt;code&gt;EventTarget&lt;/code&gt;. A &lt;code&gt;EventTarget&lt;/code&gt; permite a criação de objetos capazes de ouvir e
disparar eventos. Por exemplo, se você tem a necessidade de executar um trecho
de código quando um usuário clica em um elemento, você provavelmente utilizará
um evento e o método &lt;code&gt;addEventListener&lt;/code&gt; da interface &lt;code&gt;EventTarget&lt;/code&gt;.&lt;/p&gt;
&lt;aside&gt;
  &lt;p&gt;
    &lt;code&gt;EventTarget&lt;/code&gt; é uma interface tão ubíqua que, inclusive, é
    implementada por classes fora do documento &lt;em&gt;web&lt;/em&gt;, como é o caso do
    &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;/aside&gt;
&lt;h2 id=&quot;conclusoes&quot; tabindex=&quot;-1&quot;&gt;Conclusões &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/o-que-e-o-dom/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Você pode ver que quase todas as características de um documento HTML são
representadas de alguma forma no DOM. Existem muitas classes e interfaces que
contém diversos métodos e propriedades. É colossal o tamanho da especificação do
DOM.&lt;/p&gt;
&lt;p&gt;Você pode achar que isso é muito para aprender de uma vez e realmente é. No
entanto, em um primeiro momento você não precisa entender tudo nos mínimos
detalhes, o importante é você ter noção geral de como essa tecnologia &lt;em&gt;web&lt;/em&gt;
funciona. Eu acredito que, conforme você adquire experiência, você deve entender
o funcionamento dessa API para que você seja um bom desenvolvedor de &lt;em&gt;software&lt;/em&gt;
para a &lt;em&gt;web&lt;/em&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Orientado a Objetos #4</title>
    <link href="https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4/"/>
    <updated>2016-04-30T17:23:39Z</updated>
    <id>https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4/</id>
    <content type="html">&lt;p&gt;Hoje iremos voltar a ver sobre Construtores no contexto do JavaScript
Orientado a Objetos, e as principais funcionalidades que a versão 2015 adicionou
à linguagem.&lt;/p&gt;
&lt;p&gt;Para que você aproveite melhor o texto é recomendado que você tenha conhecimento
dos conceitos básicos de orientação a objetos. Você pode ler uma pequena
introdução
&lt;a href=&quot;http://maxroecker.github.io/blog/javascript-orientado-a-objetos-1/&quot;&gt;no texto anterior dessa série&lt;/a&gt;
e também ver o como criar objetos com
&lt;a href=&quot;http://maxroecker.github.io/blog/javascript-orientado-a-objetos-2/&quot;&gt;construtores&lt;/a&gt;
e a alternativa à ele, as
&lt;a href=&quot;http://maxroecker.github.io/blog/javascript-orientado-a-objetos-3/&quot;&gt;fábricas&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;introducao&quot; tabindex=&quot;-1&quot;&gt;Introdução &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Já vimos que construtores são feitos por meio de funções que recebem um contexto
especial em &lt;code&gt;this&lt;/code&gt; e que são chamadas junto ao operador &lt;code&gt;new&lt;/code&gt;. Vimos também que
construtores adicionam métodos ao protótipo dos objetos criados e, por isso, são
capazes de compartilhar o mesmo método para qualquer instância. Relembrando o
exemplo das publicações anteriores, temos, abaixo, o construtor &lt;code&gt;Person&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getFullName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos utilizá-lo com o operador &lt;code&gt;new&lt;/code&gt;, veja:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Pedremildo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Escavadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → &#39;Pedremildo Escavadeira&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;classes-do-es2015&quot; tabindex=&quot;-1&quot;&gt;Classes do ES2015 &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;No entanto, essa notação para escrever construtores é bastante diferente de
outras linguagens de programação, o que sempre causou um pouco de receio em
desenvolvedores. Com o advento do ECMA2015, o JavaScript adicionou outra forma
de escrever construtores, muito similar a outras linguagens de programação, com
a utilização de &lt;strong&gt;classes&lt;/strong&gt;. Podemos reescrever o construtor &lt;code&gt;Person&lt;/code&gt; anterior
da seguinte forma:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Essa notação é bastante similar ao Java, C++ ou Python e utiliza a palavra-chave
&lt;code&gt;class&lt;/code&gt;. No entanto, não confunda a classe do JavaScript com a classe de outras
linguagens. A palavra-chave &lt;code&gt;class&lt;/code&gt; nada mais é que um
“&lt;a href=&quot;https://pt.wikipedia.org/wiki/A%C3%A7%C3%BAcar_sint%C3%A1tico&quot;&gt;açúcar sintático&lt;/a&gt;”
para os construtores feitos com funções. Sua utilização é, também, idêntica aos
construtores:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Pedremildo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Escavadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Testerson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Trunk&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Pedremildo&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Trunk&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → &#39;Pedremildo Escavadeira&#39;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getFullName &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getFullName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De forma resumida, o código que antes ficava no construtor agora é colocado
dentro do &lt;code&gt;constructor&lt;/code&gt;, e os métodos que antes eram adicionados no &lt;code&gt;prototype&lt;/code&gt;
do construtor agora são definidos no corpo da classe. Essa mudança sintática
aproxima o JavaScript de outras linguagens e torna mais fácil para pessoas com
outras experiências animem-se com ele.&lt;/p&gt;
&lt;h2 id=&quot;heranca&quot; tabindex=&quot;-1&quot;&gt;Herança &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A herança, com as classes, possuem as mesmas vantagens e desvantagens da herança
com construtores, mas possuem uma sintaxe mais simples utilizando a
palavra-chave &lt;code&gt;extends&lt;/code&gt;. Vamos relembrar o exemplo da publicação anterior e
criar a classe &lt;code&gt;Employee&lt;/code&gt;, que estende &lt;code&gt;Person&lt;/code&gt; e adiciona a propriedade
&lt;code&gt;salary&lt;/code&gt; e o método &lt;code&gt;getTax&lt;/code&gt;. Veja, abaixo, como essa herança é implementada com
classes:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; salary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;salary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; salary&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;getTax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;salary &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.08&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja que o método &lt;code&gt;apply&lt;/code&gt;, utilizado nos construtores, foi substituído pela
chamada &lt;code&gt;super&lt;/code&gt;. Além disso, ao utilizarmos &lt;code&gt;extends&lt;/code&gt;, não precisamos adequar a
cadeia de protótipos. Toda essa parte já é feita pelo JavaScript
automaticamente. A instanciação de objetos continua idêntica.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Pedremildo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Escavadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Testerson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Trunk&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Pedremildo&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Trunk&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → &#39;Pedremildo Escavadeira&#39;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getFullName &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getFullName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;encapsulamento-e-polimorfismo&quot; tabindex=&quot;-1&quot;&gt;Encapsulamento e polimorfismo &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Como os objetos são estruturas de dados muito parecidos com uma
&lt;a href=&quot;https://en.wikipedia.org/wiki/Associative_array&quot;&gt;tabela &lt;em&gt;hash&lt;/em&gt;&lt;/a&gt;, todas as
propriedades do objeto são acessíveis. As classes, até o ES2015, não
possuem uma forma de definir que uma propriedade seja oculta ou não.&lt;/p&gt;
&lt;p&gt;Mas, assim como com os construtores, se queremos que uma propriedade do objeto
seja “protegida” do meio externo, fazemos isso por meio de uma notação padrão,
normalmente prefixando o nome da propriedade com &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Já com relação ao polimorfismo, as mesmas regras dos construtores são aplicadas
e é dado por meio do &lt;a href=&quot;https://pt.wikipedia.org/wiki/Duck_typing&quot;&gt;&lt;em lang=&quot;en&quot;&gt;duck typing&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;propriedades-e-metodos-estaticos&quot; tabindex=&quot;-1&quot;&gt;Propriedades e métodos estáticos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Nas classes, propriedades estáticas podem ser adicionadas com prefixando-a com
a declaração &lt;code&gt;static&lt;/code&gt;. Quando uma propriedade ou método é prefixado com &lt;code&gt;static&lt;/code&gt;,
o JavaScript adiciona esse essa propriedade ou método na própria classe e não
no protótipo ou nas instâncias dos objetos.&lt;/p&gt;
&lt;p&gt;Vamos exemplificar relembrando o exemplo das publicações anteriores, onde
utilizamos uma propriedade estática para armazenar a quantidade de objetos já
criados pela classe ou qualquer descendente.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    Person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assim, podemos agora verificar quantas instâncias já foram criadas de forma
idêntica aos construtores, veja:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 0&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Pedremildo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Escavadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 1&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Testerson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Trunk&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;garantias-de-instanciacao&quot; tabindex=&quot;-1&quot;&gt;Garantias de instanciação &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;É possível verificar se um objeto é uma instância de uma classe por meio do
operador &lt;code&gt;instanceof&lt;/code&gt;. Veja abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Pedremildo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Escavadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Testerson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Trunk&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → false&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assim como nos construtores, o operador &lt;code&gt;instanceof&lt;/code&gt; testa se a o protótipo dos
objetos criados pela classe à direita está na cadeia de protótipos do objeto à
esquerda, e, com isso, determina se um objeto foi construído por aquele.&lt;/p&gt;
&lt;p&gt;No entanto, diferente dos construtores, não é necessário testar um objeto
criado por uma classe para saber se a classe foi chamada com &lt;code&gt;new&lt;/code&gt;. Caso alguém
tente chamar uma classe como uma função sem o &lt;code&gt;new&lt;/code&gt;, o próprio JavaScript
dispara um erro.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Pedremildo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Escavadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → erro!&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Testerson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Trunk&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → sucesso&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusoes&quot; tabindex=&quot;-1&quot;&gt;Conclusões &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Utilizar construtores traz várias vantagens que os construtores já possuem, como
a herança e polimorfismo simplificados e o uso eficiente de memória por meio do
compartilhamento de código via protótipos. Além disso, a utilização de classes
já mitiga o cuidado que temos que ter com operadores &lt;code&gt;new&lt;/code&gt; nos construtores. No
entanto, é alguns pontos ainda permanecem no ES2015:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Não permite um verdadeiro encapsulamento, todas as propriedades são
acessíveis;&lt;/li&gt;
&lt;li&gt;Justamente porque os métodos são compartilhados e dependem de um contexto
específico, é necessário uma atenção especial quando os métodos são chamados
para evitar
&lt;a href=&quot;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;problemas com o &lt;code&gt;this&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podemos dizer que as classes são “construtores melhorados” e que é prudente
favorecer o uso de classes ao invés de construtores na medida do possível. No
entanto, mesmo com classes disponíveis, grande parte de código escrito em
JavaScript ainda contém construtores e, por isso, é importante saber como
funcionam caso você precise lidar com eles em algum momento.&lt;/p&gt;
&lt;p&gt;Essa publicação encerra, por enquanto, a série de introdução ao JavaScript
orientado a objetos. Esse não é um final definitivo. Podem existir mais
publicações futuras com novas funcionalidades que podem ser adicionadas à
linguagem ou evoluções nas técnicas de desenvolvimento OO.&lt;/p&gt;
&lt;p&gt;Até mais!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Orientado a Objetos #3</title>
    <link href="https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3/"/>
    <updated>2016-04-27T05:16:01Z</updated>
    <id>https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3/</id>
    <content type="html">&lt;p&gt;Hoje iremos compreender um pouco sobre as Fábricas no contexto do JavaScript
Orientado a Objetos, um padrão de projeto alternativos aos construtores para a
criação de objetos que possui muita similaridade com programação funcional.&lt;/p&gt;
&lt;aside&gt;
  &lt;p&gt;
    &lt;strong&gt;fá.bri.ca:&lt;/strong&gt; (1) estabelecimento onde ocorre a
    fabricação ou manufatura de produtos; (2) um mecanismo que produz ou cria
    algo.
  &lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Para que você aproveite melhor o texto é recomendado que você tenha conhecimento
dos conceitos básicos de orientação a objetos. Você pode ler uma pequena
introdução
&lt;a href=&quot;http://maxroecker.github.io/blog/javascript-orientado-a-objetos-1/&quot;&gt;no texto anterior dessa série&lt;/a&gt;
e também ver o como criar objetos com
&lt;a href=&quot;http://maxroecker.github.io/blog/javascript-orientado-a-objetos-2/&quot;&gt;construtores&lt;/a&gt;.
Também é recomendado que você conheça o comportamento e características dos
&lt;a href=&quot;http://maxroecker.github.io/blog/javascript-intermediario-4/&quot;&gt;&lt;em&gt;closures&lt;/em&gt;&lt;/a&gt; em
JavaScript. O texto hoje é um pouco longo porque achei importante unir os
principais tópicos de cada padrão em uma só publicação.&lt;/p&gt;
&lt;h2 id=&quot;introducao&quot; tabindex=&quot;-1&quot;&gt;Introdução &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Já vimos, na publicação anterior, que construtores, em JavaScript, são funções
que inicializam um objeto o qual a memória já foi alocada. Revisitando nosso
exemplo do construtor &lt;code&gt;Person&lt;/code&gt;, visto abaixo, vemos que todas as propriedades
são acessíveis e que os métodos são compartilhados entre todos os objetos por
meio da cadeia de protótipos.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getFullName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para nosso exemplo, vamos adicionar um novo método à &lt;code&gt;Person&lt;/code&gt; chamado &lt;code&gt;print&lt;/code&gt; e
que exibe, na saída padrão, uma &lt;em&gt;string&lt;/em&gt; representando o objeto.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Person [name: &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suponha que queremos chamar o método &lt;code&gt;print&lt;/code&gt; duas vezes: a primeira
imediatamente após a criação do objeto e a segunda 3 segundos depois. Podemos
utilizar a função &lt;code&gt;setTimeout&lt;/code&gt;, que recebe uma função e um número de
milissegundos, para fazer essa tarefa. Veja:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Pedremildo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Escavadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → &#39;Person [name: Pedremildo]&#39;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;print&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → &#39;Person [name: undefined]&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O que aconteceu com o método? Porque, após 5 segundos, o resultado foi
diferente? Na realidade, o método perdeu o contexto de onde deveria ser
executado, ou seja, que objeto &lt;code&gt;this&lt;/code&gt; se refere. Quando chamamos um método
diretamente no objeto com &lt;code&gt;objeto.método()&lt;/code&gt;, o JavaScript automaticamente define
o &lt;code&gt;this&lt;/code&gt; do método como o próprio objeto. Como repassamos o método para outro
objeto eventualmente executá-lo, o &lt;code&gt;this&lt;/code&gt; do método não referencia mais &lt;code&gt;person&lt;/code&gt;
e, por isso, temos problemas.&lt;/p&gt;
&lt;p&gt;A função &lt;code&gt;print&lt;/code&gt; não está amarrada ao objeto &lt;code&gt;person&lt;/code&gt;, ela é compartilhada por
todos os objetos construídos por &lt;code&gt;Person&lt;/code&gt;. E, justamente porque os métodos são
compartilhados é que, em certos casos, podemos ter problemas com a utilização
desses métodos me outros contextos, como vimos acima. Há vários problemas&lt;/p&gt;
&lt;p&gt;Uma forma de resolver esse problema é explicitamente pedir para seja criada uma
nova função, idêntica a anterior, mas que esteja amarrada à variável &lt;code&gt;person&lt;/code&gt;
por meio do método
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/a&gt;.
Veja:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Pedremildo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Escavadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → &#39;Person [name: Pedremildo]&#39;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → &#39;Person [name: Pedremildo]&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Resolvemos o problema criando uma cópia da função com um contexto amarrado, no
entanto, essa não é uma das vantagens dos construtores? Porque vamos
compartilhar se, dependendo do caso de uso, teremos que criar cópias com
contexto amarrado.&lt;/p&gt;
&lt;p&gt;Este exemplo mostra bem as desvantagens que construtores possuem. O uso
incorreto do &lt;code&gt;this&lt;/code&gt; é um dos
&lt;a href=&quot;https://www.toptal.com/javascript/10-most-common-javascript-mistakes&quot;&gt;erros mais comuns&lt;/a&gt;
entre desenvolvedores JavaScript em qualquer nível de experiência e é fonte de
muitos &lt;em&gt;bugs&lt;/em&gt;. No entanto, há uma alternativa: as &lt;strong&gt;fábricas&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;fabricas&quot; tabindex=&quot;-1&quot;&gt;Fábricas &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Fábricas são, como construtores, funções que inicializam objetos. No entanto,
fábricas não só inicializam o objeto, como também são responsáveis por
criar a área de memória associada à ele; diferente dos construtores, que passam
essa responsabilidade para o operador &lt;code&gt;new&lt;/code&gt;. Vamos refatorar nosso construtor
para que ele seja uma fábrica. Veja:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getFullName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Person [name: &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja que nossa função agora, além de inicializar, cria o objeto. Além disso, não
atribuímos mais as funções no protótipo, mas no próprio objeto. Como &lt;code&gt;Person&lt;/code&gt;
não é um construtor e sim uma função comum, invocamos-a sem o &lt;code&gt;new&lt;/code&gt;. Podemos
também fazer o exemplo anterior sem a necessidade do &lt;code&gt;bind&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Pedremildo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Escavadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Testerson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Trunk&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Pedremildo&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Trunk&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → &#39;Pedremildo Escavadeira&#39;&lt;/span&gt;

b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → &#39;Person [name: Testerson]&#39;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;print&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → &#39;Person [name: Testerson]&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note que, como criamos o objeto, não precisamos mais utilizar &lt;code&gt;this&lt;/code&gt;. Sempre
temos a referência do objeto criado. Isso acontece porque os métodos
&lt;code&gt;getFullName&lt;/code&gt; e &lt;code&gt;print&lt;/code&gt; são &lt;em&gt;closures&lt;/em&gt; e, assim, mantém a referência do escopo
da fábrica e podem acessá-lo a qualquer momento.&lt;/p&gt;
&lt;p&gt;Entretanto, temos um preço a pagar: todos os métodos dos objetos criados são
cópias e não são compartilhados. A cada vez que a fábrica &lt;code&gt;Person&lt;/code&gt; é chamada, ela
cria um objeto e cópias dos métodos amarrados a esse objeto. Veja:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getFullName &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getFullName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;heranca&quot; tabindex=&quot;-1&quot;&gt;Herança &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Fábricas também podem utilizar a herança. Vamos relembrar o exemplo da
publicação anterior, criando uma fábrica &lt;code&gt;Employee&lt;/code&gt;, que estende &lt;code&gt;Person&lt;/code&gt; e
adiciona a propriedade &lt;code&gt;salary&lt;/code&gt; e o método &lt;code&gt;getTax&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; salary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; employee &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  employee&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;salary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; salary&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  employee&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getTax&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; employee&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;salary &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.08&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; employee&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De forma geral, não precisamos mais utilizar o método &lt;code&gt;apply&lt;/code&gt; e, como não usamos
protótipos, não há necessidade de utilizar o &lt;code&gt;Object.create&lt;/code&gt;, como nos
construtores. No entanto, “terceirizamos” a criação do objeto para outra fábrica
que queremos estender as propriedades e métodos.&lt;/p&gt;
&lt;p&gt;Veja que a utilização é exatamente igual à &lt;code&gt;Person&lt;/code&gt;, no entanto, mais propriedades
e métodos estão disponíveis.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Pedremildo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Escavadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Testerson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Trunk&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Pedremildo&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Trunk&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → &#39;Pedremildo Escavadeira&#39;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getFullName &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getFullName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → false&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;encapsulamento&quot; tabindex=&quot;-1&quot;&gt;Encapsulamento &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Apesar dos objetos serem estruturas de dados muito parecidos com uma
&lt;a href=&quot;https://en.wikipedia.org/wiki/Associative_array&quot;&gt;tabela &lt;em&gt;hash&lt;/em&gt;&lt;/a&gt;, onde todas as
propriedades do objeto são acessíveis. O conceito de encapsulamento, com
fábricas, pode ser atingido por meio do &lt;em&gt;closure&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;closure&lt;/em&gt; é protegido de qualquer mudança externa além das próprias variáveis
retornadas. Não há necessidade de convenção. Com fábricas, temos encapsulamento
verdadeiro. Vamos refatorar o exemplo acima para adicionar uma propriedade
“privada” que armazena a taxa do imposto de um empregado.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; salary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; employee &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.08&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  employee&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;salary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; salary&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  employee&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getTax&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; employee&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;salary &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; rate&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; employee&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja que &lt;code&gt;rate&lt;/code&gt; é uma variável que está no &lt;code&gt;closure&lt;/code&gt; de &lt;code&gt;getTax&lt;/code&gt;. Não há outra
forma de acessar &lt;code&gt;rate&lt;/code&gt; senão pelo método &lt;code&gt;getTax&lt;/code&gt;. Ou seja, &lt;code&gt;rate&lt;/code&gt; está
encapsulada de qualquer efeito externo que não seja gerado pelo próprio objeto.&lt;/p&gt;
&lt;h2 id=&quot;polimorfismo&quot; tabindex=&quot;-1&quot;&gt;Polimorfismo &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Assim como em construtores, devido às características do JavaScript, o
polimorfismo pode ser realizado sem muitos problemas, uma vez que funções são
objetos, objetos são mutáveis e variáveis não possuem tipos definidos.
Normalmente o polimorfismo se dá por meio do &lt;a href=&quot;https://pt.wikipedia.org/wiki/Duck_typing&quot;&gt;&lt;em lang=&quot;en&quot;&gt;duck
typing&lt;/em&gt;&lt;/a&gt; e que fazem o &lt;strong&gt;Teste do Pato&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;
    Se algo parece com um pato, nada como um pato e grasna como um pato, então
    provavelmente é um pato
  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No contexto de programação, isso significa que não é o tipo do objeto que irá
definir sua semântica, mas sim suas propriedades e métodos. Se um conjunto de
objetos contém um método com o nome &lt;code&gt;foo&lt;/code&gt;, você pode chamá-los sem problema.&lt;/p&gt;
&lt;p&gt;Não há um contrato pré-definido entre as objetos — como é o caso das interfaces
em Java ou classes abstratas em C++ — e por isso fica a cargo do codificador
utilizar a mesmo protocolo nos objetos em que deve-se estabelecer um
polimorfismo.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://maxroecker.github.io/img/illustrations/automata-duck.svg&quot; alt=&quot;Um automâto de pato com sistema alimentação similar ao trato digestivo&quot; title=&quot;Pato Mecânico de Jacques de Vaucanson, 1738&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;propriedades-e-metodos-estaticos&quot; tabindex=&quot;-1&quot;&gt;Propriedades e métodos estáticos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;De forma similar aos construtores, propriedades e métodos estáticos podem ser
criados atribuindo-os diretamente à fábrica. Relembrando o exemplo da publicação
anterior, vamos criar uma propriedade estática na fábrica &lt;code&gt;Person&lt;/code&gt; para
armazenar a quantidade de objetos já criados por ele ou qualquer descendente.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  Person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getFullName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Person [name: &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

Person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assim, podemos agora verificar quantas instâncias já foram criadas, veja:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 0&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Pedremildo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Escavadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 1&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Testerson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Trunk&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;garantias-de-instanciacao&quot; tabindex=&quot;-1&quot;&gt;Garantias de instanciação &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Como as fábricas não utilizam a cadeia de protótipos, não há como determinar se um
objeto foi criado ou não por uma fábrica por meio do operador &lt;code&gt;instanceof&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;No entanto, também não temos a necessidade de verificar se uma função foi
chamada da forma correta, uma vez que a própria fábrica detém o controle da
criação do objeto.&lt;/p&gt;
&lt;h2 id=&quot;conclusoes&quot; tabindex=&quot;-1&quot;&gt;Conclusões &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Utilizar fábricas traz várias vantagens alternativas e atacam os pontos onde
construtores deixam a desejar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Herança simplificada: basta chamar a fábrica que se deseja herdar e modificar
seus métodos;&lt;/li&gt;
&lt;li&gt;Polimorfismo simplificado: não há contratos entre as fábricas;&lt;/li&gt;
&lt;li&gt;Encapsulamento verdadeiro: o &lt;em&gt;closure&lt;/em&gt; mantém o escopo completamente isolado e
inacessível de efeitos externos.&lt;/li&gt;
&lt;li&gt;O não compartilhamento de métodos traz vantagens uma vez que não precisamos
nos preocupar em qual contexto um método será executado, eliminando os riscos
com o uso incorreto do &lt;code&gt;this&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Porém, há um preço a se pagar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uso ineficiente da memória: cada método é alocado para cada objeto criado. Não
há compartilhamento entre todos os objetos através do uso de protótipos e, por
isso, fábricas tendem a consumir muito mais memória do que construtores;&lt;/li&gt;
&lt;li&gt;Não é possível estabelecer se um objeto foi criado por uma fábrica por meio do
&lt;code&gt;instanceof&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A tabela abaixo resume bem as características dos construtores e fábricas:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Característica&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Construtores&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Fábricas&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Herança&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;✓&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Encapsulamento&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;✗&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Verificação de instâncias&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;✓&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;✗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Consistência do &lt;code&gt;this&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;✗&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Uso eficiente de memória&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;✓&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;✗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Propriedades estáticas&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;✓&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note que, apesar das vantagens que as fábricas trazem, alguns pontos negativos
impactam a sua escolha.&lt;/p&gt;
&lt;p&gt;Num geral, os desenvolvedores JavaScript preferem utilizar construtores ao invés
de fábricas porque os próprios ambientes de execução preferem utilizar esse
padrão. Mas, mesmo sendo menos populares, é importante entender as fábricas pois
elas permitem compreender as limitações que os construtores possuem e
vice-versa.&lt;/p&gt;
&lt;p&gt;No entanto, construtores contam com algumas simplificações sintáticas que
facilitam ainda mais seu uso, como é o caso da estrutura &lt;code&gt;class&lt;/code&gt; no ES6, mas
isso é um assunto para a próxima publicação!&lt;/p&gt;
&lt;p&gt;Até mais!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Orientado a Objetos #2</title>
    <link href="https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2/"/>
    <updated>2016-04-22T21:05:36Z</updated>
    <id>https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2/</id>
    <content type="html">&lt;p&gt;Hoje iremos compreender um pouco sobre Construtores no contexto do JavaScript
Orientado a Objetos, um padrão de projeto para a criação de objetos que possui
muita similaridade com a orientação a objetos com classes.&lt;/p&gt;
&lt;aside&gt;
  &lt;p&gt;
    &lt;strong&gt;cons.tru.tor:&lt;/strong&gt; (1) que ou aquele que constrói; (2) o que
    domina o saber de construir.
  &lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Para que você aproveite melhor o texto é recomendado que você tenha conhecimento
dos conceitos básicos de orientação a objetos. Você pode ler uma pequena
introdução
&lt;a href=&quot;http://maxroecker.github.io/blog/javascript-orientado-a-objetos-1/&quot;&gt;no texto anterior dessa série&lt;/a&gt;.
Também é recomendado que você conheça o comportamento e características dos
&lt;a href=&quot;http://maxroecker.github.io/blog/javascript-basico-5/&quot;&gt;objetos&lt;/a&gt; e
&lt;a href=&quot;http://maxroecker.github.io/blog/javascript-basico-6/&quot;&gt;funções&lt;/a&gt; em
JavaScript. O texto hoje é um pouco longo porque achei importante unir os
principais tópicos de cada padrão em uma só publicação.&lt;/p&gt;
&lt;h2 id=&quot;introducao&quot; tabindex=&quot;-1&quot;&gt;Introdução &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Na orientação a objetos, um &lt;strong&gt;construtor&lt;/strong&gt; é uma rotina utilizada para
inicializar um objeto cuja a memória para ele já foi alocada. Em linguagens com
orientação a objetos baseada em classes, como é o caso do Java e do C++, o
construtor é definido na própria classe e é invocado toda vez que uma instância
dessa classe é criada.&lt;/p&gt;
&lt;p&gt;O JavaScript não possui classes, mas o conceito de construtores é feito por meio
de funções que inicializam objetos. Por exemplo, veja a função &lt;code&gt;Person&lt;/code&gt; abaixo,
que recebe um objeto &lt;code&gt;target&lt;/code&gt;, além de um nome junto e um sobrenome em &lt;code&gt;name&lt;/code&gt; e
&lt;code&gt;surname&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getFullName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; getFullName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja que a função &lt;code&gt;Person&lt;/code&gt; recebe o objeto alvo e inicializa-o,
atribuindo as propriedades e métodos que definem o objeto.&lt;/p&gt;
&lt;aside&gt;
  &lt;p&gt;
    Mesmo que a função &lt;code&gt;Person&lt;/code&gt; seja definida antes da função
    &lt;code&gt;getFullName&lt;/code&gt;, ela ainda pode referenciá-la, pois suas
    declarações passaram por um processo de &lt;a href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-4/&quot;&gt;&lt;em lang=&quot;en&quot;&gt;hoist&lt;/em&gt;&lt;/a&gt;.
  &lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Veja que podemos utilizá-la como um construtor, uma vez que ela inicializa um
objeto e permite a interação por meio de métodos e acesso às propriedades.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Pedremildo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Escavadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Testerson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Trunk&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Pedremildo&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Trunk&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → &#39;Pedremildo Escavadeira&#39;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getFullName &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getFullName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;construtores&quot; tabindex=&quot;-1&quot;&gt;Construtores &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;O exemplo anterior de um construtor está “bem comportado”, uma vez que estamos
passando objetos “vazios” com o literal &lt;code&gt;{…}&lt;/code&gt;. Quando estamos falando de
construtores, normalmente estamos falando de inicializar objetos recém-criados,
mas nada garante que alguém passe qualquer objeto como o &lt;code&gt;target&lt;/code&gt; do nosso
construtor.&lt;/p&gt;
&lt;p&gt;Para isso, o JavaScript fornece o operador
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt;.
O &lt;code&gt;new&lt;/code&gt; é um operador utilizado antes da chamada de funções e que muda alguns
detalhes da sua execução. Ao executar &lt;code&gt;new ⟨função⟩(⟨argumentos⟩)&lt;/code&gt;, o JavaScript
faz os seguintes passos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cria um objeto vazio com protótipo igual a propriedade &lt;code&gt;prototype&lt;/code&gt; da função;&lt;/li&gt;
&lt;li&gt;“Amarra” o contexto &lt;code&gt;this&lt;/code&gt; da função ao objeto criado no passo 1;&lt;/li&gt;
&lt;li&gt;Retorna o objeto criado no passo 1 caso a função retorne &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Assim, podemos reescrever a função &lt;code&gt;Person&lt;/code&gt; acima de maneira mais simples e
intuitiva:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getFullName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja que não é mais necessário receber um objeto como parâmetro, pois o &lt;code&gt;this&lt;/code&gt; é
implicitamente definido como o objeto recém criado pelo operador &lt;code&gt;new&lt;/code&gt;. Também
não há necessidade de retornar um objeto, já que o &lt;code&gt;new&lt;/code&gt; implicitamente fará
isso. Além disso, não precisamos mais atribuir os métodos diretamente no objeto
como antes, uma vez que utilizamos a cadeia de protótipos. O operador &lt;code&gt;new&lt;/code&gt; irá
criar um objeto com protótipo igual a &lt;code&gt;Person.prototype&lt;/code&gt;, onde nossos métodos
são definidos.&lt;/p&gt;
&lt;p&gt;O operador &lt;code&gt;new&lt;/code&gt; garante que um objeto “novo” é fornecido, então, precisamos
instânciar nossos objetos utilizando ele. Veja que podemos fazer exatamente os
mesmos testes que o exemplo anterior.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Pedremildo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Escavadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Testerson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Trunk&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Pedremildo&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Trunk&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → &#39;Pedremildo Escavadeira&#39;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getFullName &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getFullName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Utilizar construtores com o operador &lt;code&gt;new&lt;/code&gt; e a cadeia de protótipos é
considerado a técnica mais comum e recomendada de desenvolver código orientado a
objetos em JavaScript, e é nela que iremos nos aprofundar nos próximos tópicos.&lt;/p&gt;
&lt;h2 id=&quot;heranca&quot; tabindex=&quot;-1&quot;&gt;Herança &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Podemos alcançar a herança ao utilizar uma chamada ao construtor qual se quer
herdar as características com o auxílio do método
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply&quot;&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/a&gt;.
O &lt;code&gt;apply&lt;/code&gt; é um método de funções (lembre-se que funções, no JavaScript, também
são objetos), que recebe dois parâmetros: o primeiro, um objeto, indica contexto
em que a função deve ser aplicada, ou seja, que &lt;code&gt;this&lt;/code&gt; se refere; e o segundo,
um arranjo, que recebe os argumentos que devem ser passados a função a ser
executada.&lt;/p&gt;
&lt;p&gt;Vamos criar um novo construtor, &lt;code&gt;Employee&lt;/code&gt;, que estende &lt;code&gt;Person&lt;/code&gt; e adiciona uma
propriedade e um método: &lt;code&gt;salary&lt;/code&gt; e &lt;code&gt;getTax&lt;/code&gt;, respectivamente. Veja como essa
herança é implementada abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; salary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;salary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; salary&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getTax&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;salary &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.08&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De forma geral, o que o método &lt;code&gt;apply&lt;/code&gt; está fazendo é executar a função &lt;code&gt;Person&lt;/code&gt;
no objeto &lt;code&gt;this&lt;/code&gt; da função &lt;code&gt;Employee&lt;/code&gt;, algo muito similar à chamada &lt;code&gt;super&lt;/code&gt; em
linguagens com orientação a objetos baseada em classes. Além disso, precisamos
adequar o protótipo de &lt;code&gt;Employee&lt;/code&gt; para estender o protótipo de &lt;code&gt;Person&lt;/code&gt; e,
assim, herdar os métodos por meio da cadeia de protótipos. Para fazer isso,
utilizamos a função &lt;code&gt;Object.create&lt;/code&gt;, que cria um objeto com um protótipo
definido.&lt;/p&gt;
&lt;p&gt;Veja que a utilização é exatamente igual à &lt;code&gt;Person&lt;/code&gt;, no entanto, mais propriedades
e métodos estão disponíveis.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Pedremildo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Escavadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Testerson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Trunk&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Pedremildo&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Trunk&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → &#39;Pedremildo Escavadeira&#39;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getFullName &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getFullName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;encapsulamento&quot; tabindex=&quot;-1&quot;&gt;Encapsulamento &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Como os objetos são estruturas de dados muito parecidos com uma
&lt;a href=&quot;https://en.wikipedia.org/wiki/Associative_array&quot;&gt;tabela &lt;em&gt;hash&lt;/em&gt;&lt;/a&gt;, todas as
propriedades do objeto podem ser acessadas. O conceito de encapsulamento, com
construtores, não é regido pela linguagem, mas sim por convenção.&lt;/p&gt;
&lt;p&gt;Normalmente se queremos que uma propriedade do objeto seja “protegida” do meio
externo, fazemos isso por meio de uma notação padrão, normalmente prefixando o
nome da propriedade com &lt;code&gt;_&lt;/code&gt;. Vamos refatorar o exemplo acima para adicionar
uma propriedade “privada” que armazena a taxa do imposto de um empregado.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; salary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_rate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.08&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;salary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; salary&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getTax&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;salary &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_rate&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja que a propriedade &lt;code&gt;_rate&lt;/code&gt; é adicionada ao objeto como qualquer outra, no
entanto, como prefixamos o nome com &lt;code&gt;_&lt;/code&gt;, quem utiliza esse objeto sabe que essa
propriedade não deve ser manipulada, pois o comportamento do objeto pode se
tornar imprevisível.&lt;/p&gt;
&lt;p&gt;Relembrando: a propriedade &lt;code&gt;_rate&lt;/code&gt; é exibida e pode ser acessada como qualquer
outra propriedade do objeto, mas, por convenção, indica-se que ela não deve ser
manipulada fora do próprio objeto. Esse tipo de convenção não é único da
linguagem JavaScript, outras linguagens dinâmicas, como o Python,
&lt;a href=&quot;https://docs.python.org/3/tutorial/classes.html#private-variables&quot;&gt;adotam regras similares&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;polimorfismo&quot; tabindex=&quot;-1&quot;&gt;Polimorfismo &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Em JavaScript o polimorfismo pode ser realizado sem muitos problemas, uma vez
que funções são objetos, objetos são mutáveis e variáveis não possuem tipos
definidos. Normalmente o polimorfismo se dá por meio do &lt;a href=&quot;https://pt.wikipedia.org/wiki/Duck_typing&quot;&gt;&lt;em lang=&quot;en&quot;&gt;duck
typing&lt;/em&gt;&lt;/a&gt; e que fazem o &lt;strong&gt;Teste do Pato&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;
    Se algo parece com um pato, nada como um pato e grasna como um pato, então
    provavelmente é um pato
  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No contexto de programação, isso significa que não é o tipo nem a cadeia de
herança de do objeto que irá definir sua semântica, mas sim suas propriedades e
métodos. Se um conjunto de objetos contém um método com o nome &lt;code&gt;foo&lt;/code&gt;, você pode
chamá-los sem problema.&lt;/p&gt;
&lt;p&gt;Não há um contrato pré-definido entre as objetos — como é o caso das interfaces
em Java ou classes abstratas em C++ — e por isso fica a cargo do codificador
utilizar a mesmo protocolo nos objetos em que deve-se estabelecer um
polimorfismo.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://maxroecker.github.io/img/illustrations/automata-duck.svg&quot; alt=&quot;Um automâto de pato com sistema alimentação similar ao trato digestivo&quot; title=&quot;Pato Mecânico de Jacques de Vaucanson, 1738&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;propriedades-e-metodos-estaticos&quot; tabindex=&quot;-1&quot;&gt;Propriedades e métodos estáticos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Propriedades estáticas são atributos/métodos que pertencem ao construtor e não a
cada um dos objetos construídos por ele. Propriedades estáticas dos construtores
podem ser criadas atribuindo propriedades aos próprios construtores.&lt;/p&gt;
&lt;p&gt;Vamos exemplificar a utilização de propriedades estáticas no construtor &lt;code&gt;Person&lt;/code&gt;
para armazenar a quantidade de objetos já criados por ele ou qualquer
descendente.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  Person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

Person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getFullName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assim, podemos agora verificar quantas instâncias já foram criadas, veja:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 0&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Pedremildo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Escavadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 1&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Testerson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Trunk&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;garantias-de-instanciacao&quot; tabindex=&quot;-1&quot;&gt;Garantias de instanciação &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;O JavaScript também permite verificar se um objeto é uma instância de um
construtor por meio do operador &lt;code&gt;instanceof&lt;/code&gt;. Veja abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Pedremildo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Escavadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Testerson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Trunk&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → false&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O operador &lt;code&gt;instanceof&lt;/code&gt; testa se a propriedade &lt;code&gt;prototype&lt;/code&gt; do construtor à
direita está na cadeia de protótipos do objeto à esquerda, e, com isso, determina
se um objeto foi construído por aquele.&lt;/p&gt;
&lt;p&gt;O uso do &lt;code&gt;instanceof&lt;/code&gt; é bastante utilizado para garantir a segurança de um
construtor. Uma vez que um construtor é uma função qualquer que utiliza o
contexto &lt;code&gt;this&lt;/code&gt;, o que acontece se chamar a função sem o &lt;code&gt;new&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Nesse caso, não cria-se um objeto novo e o &lt;code&gt;this&lt;/code&gt; no construtor passa a ser o
contexto atual de onde a função foi executada. Assim, o construtor, que espera
que o &lt;code&gt;this&lt;/code&gt; seja um objeto recém-criado na verdade recebe outro e isso pode
causar efeitos colaterais imprevisíveis e &lt;em lang=&quot;en&quot;&gt;bugs&lt;/em&gt; de difícil
localização. Para garantir que o construtor sempre receba no &lt;code&gt;this&lt;/code&gt; o objeto
esperado, podemos adicionar o seguinte teste:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; surname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getFullName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;surname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assim, se caso alguém chame &lt;code&gt;Person&lt;/code&gt; sem o &lt;code&gt;new&lt;/code&gt;, teremos um erro.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Pedremildo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Escavadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → erro!&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Testerson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Trunk&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → sucesso&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusoes&quot; tabindex=&quot;-1&quot;&gt;Conclusões &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Utilizar construtores traz várias vantagens que incluem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Herança simplificada: basta chamar o construtor em outro e adequar a cadeia
herdar as propriedades;&lt;/li&gt;
&lt;li&gt;Polimorfismo simplificado: não há contratos entre diferentes construtores.&lt;/li&gt;
&lt;li&gt;Uso eficiente da memória: cada método é somente alocado uma vez e
compartilhado entre todos os objetos através do uso de protótipos;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Porém, alguns pontos devem ser considerados:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Não permite um verdadeiro encapsulamento, todas as propriedades são
acessíveis;&lt;/li&gt;
&lt;li&gt;É necessário sempre tomar cuidado ou tratar a chamada de construtores sem o
operador &lt;code&gt;new&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Justamente porque os métodos são compartilhados e dependem de um contexto
específico, é necessário uma atenção especial quando os métodos são chamados
para evitar
&lt;a href=&quot;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;problemas com o &lt;code&gt;this&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apesar dos pontos “negativos”, a utilização de construtores em JavaScript é tão
comum que grande parte das APIs fornecidas pelos ambientes de execução utilizam
esse padrão. No entanto, há uma outro padrão para programarmos JavaScript
orientado a objetos: as Fábricas, que mitigam os pontos negativos vistos acima
ao custo de alguns dos positivos. Mas, esse assunto fica para a próxima
publicação.&lt;/p&gt;
&lt;p&gt;Até a próxima!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Orientado a Objetos #1</title>
    <link href="https://maxroecker.github.io/blog/javascript-orientado-a-objetos-1/"/>
    <updated>2016-04-15T08:49:56Z</updated>
    <id>https://maxroecker.github.io/blog/javascript-orientado-a-objetos-1/</id>
    <content type="html">&lt;p&gt;Hoje vamos iniciar uma nova série de publicações sobre a linguagem JavaScript
com foco na programação orientada a objetos. Nessa série, espero que você
compreenda conceitos importantes como o encapsulamento de dados, herança e
polimorfismo em seu código. Vamos também entender mais a fundo a estrutura dos
objetos e compreender o estilo de programação baseado em protótipos do
JavaScript.&lt;/p&gt;
&lt;h2 id=&quot;introducao-rapida-a-programacao-orientada-a-objetos&quot; tabindex=&quot;-1&quot;&gt;Introdução rápida à Programação Orientada a Objetos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-1/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A
&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot;&gt;Programação Orientada a Objetos&lt;/a&gt;
(POO) é um paradigma de programação que favorece o uso de &lt;strong&gt;objetos&lt;/strong&gt;, unidades
de computação que contém uma combinação de variáveis e funções. Idealmente, esse
paradigma tem o objetivo de separar um problema complexo em pequenos problemas
isolados que são resolvidos por objetos, e fornecem um protocolo ao mundo
exterior pelo qual o objeto pode fornecer informações.&lt;/p&gt;
&lt;aside&gt;
  &lt;p&gt;
    &lt;strong&gt;pa.ra.dig.ma:&lt;/strong&gt; Exemplo, norma ou padrão estabelecido ou a
    ser seguido.
  &lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;O grande triunfo da Orientação a Objetos é que os dados e as funções que
manipulam esses dados estão agregados em uma mesma estrutura e podem proteger-se
do acesso e da manipulação direta do “mundo externo”. Os dados ficam em um
escopo interno do objeto e são chamados de &lt;strong&gt;atributos&lt;/strong&gt;. Os atributos armazenam
o &lt;strong&gt;estado&lt;/strong&gt; do objeto, ou seja, o conjunto de valores que o objeto contém. Toda
vez que o valor de algum atributo é alterado, o objeto muda de estado. Por sua
vez, para que um objeto possa ser usado pelo mundo externo, ele deve fornecer
um protocolo. Protocolos de acesso à objetos são, em sua maioria, compostos por
&lt;strong&gt;métodos&lt;/strong&gt;. Métodos são propriedades funcionais dos objetos e que podem ser
executadas para alterar ou retornar algum valor no estado de um objeto.&lt;/p&gt;
&lt;p&gt;Construir aplicações com objetos permite que os desenvolvedores adotem algumas
técnicas valiosas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Herança&lt;/strong&gt;: A herança é a capacidade de objetos poderem “copiar”
características de outros objetos, ou seja, seus métodos os métodos e
propriedades. É um recurso bastante poderoso e que permite um grande reuso de
código.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Encasulamento&lt;/strong&gt;: o encasulamento é a capacidade de objetos “esconderem” suas
propriedades do mundo externo ou restringir o acesso a eles, permitindo que
ninguém que não saiba os efeitos colaterais de uma alteração num objeto possa
interferir em seu funcionamento.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Polimorfismo&lt;/strong&gt;: O polimorfismo pode ser definido como a habilidade de chamar
métodos de diferentes objetos de forma idêntica. Quando dizemos que um
conjunto de objetos é polimórfico, significa que os objetos desse conjunto
possuem protocolos idênticos, ou seja, aceitam as mesmas entradas e
proporcionam a mesma saída. No entanto, sua implementação interna pode ser
drasticamente diferente.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A Programação Orientada a Objetos é destinada a promover uma maior flexibilidade
e facilidade na manutenção de código e é muito popular em aplicações de grande
escala. Atualmente, muitas linguagens populares — como Java, C++, Python, Ruby,
PHP entre outras — permitem programação orientada a objetos. O JavaScript também
está incluso nesse grupo, no entanto, possui algumas peculiaridades que em um
primeiro momento podem ser estranhas para a grande maioria dos desenvolvedores
acostumados com outras linguagens.&lt;/p&gt;
&lt;figure&gt;
  &lt;img alt=&quot;Um homem opera um veículo de uma roda sentado dentro da grande roda, protegido do mau tempo por um guarda-chuva fixado no dispositivo.&quot; title=&quot;J. O. Lose of Patterson, N. J. Veículo de uma Roda. N° 325,548.&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://maxroecker.github.io/img/-E-Ftz6x5P-800.svg&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;revisando-os-objetos-em-javascript&quot; tabindex=&quot;-1&quot;&gt;Revisando os Objetos em JavaScript &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-1/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A grande maioria das linguagens que utilizam Orientação a Objetos se baseiam em
&lt;strong&gt;classes&lt;/strong&gt;. Uma classe é um “modelo” ou um “&lt;a href=&quot;https://pt.wikipedia.org/wiki/Blueprint&quot;&gt;&lt;em lang=&quot;en&quot;&gt;blueprint&lt;/em&gt;&lt;/a&gt;”
para a criação de objetos. É responsabilidade da classe definir os atributos e a
interface dos objetos por ela criados. Objetos em uma linguagem baseada em
classes são &lt;strong&gt;instâncias das classes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Em Javascript, os objetos não são instâncias de classes. Como já vimos em
&lt;a href=&quot;http://maxroecker.github.io/blog/javascript-basico-5/&quot;&gt;posts anteriores&lt;/a&gt;, um
objeto é uma estrutura de dados da linguagem que se assemelha a uma
&lt;a href=&quot;https://en.wikipedia.org/wiki/Associative_array&quot;&gt;tabela &lt;em&gt;hash&lt;/em&gt;&lt;/a&gt;. Podemos
definir um objeto, seus atributos e seus métodos com o literal &lt;code&gt;{…}&lt;/code&gt;.
Veja:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pessoa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Pedro&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;pedro@email.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;email&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;@&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pessoa&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Pedro&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pessoa&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → pedro&lt;/span&gt;
pessoa&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;email &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;joao@exemplo.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pessoa&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → joao&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos acessar as propriedades de um objeto através do operador &lt;code&gt;.&lt;/code&gt; seguido da
propriedade ou através do operador &lt;code&gt;[]&lt;/code&gt; passando a chave como uma &lt;em lang=&quot;en&quot;&gt;string&lt;/em&gt;. A palavra &lt;code&gt;this&lt;/code&gt;, quando utilizada em um objeto,
refere-se ao próprio objeto, dessa forma podemos utilizar o atributo &lt;code&gt;email&lt;/code&gt; do
objeto criado anteriormente dentro do método &lt;code&gt;getUsername&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Entretanto, objetos literais do JavaScript não possuem o conceito de
encapsulamento como pregado pela Orientação a Objeto. Todos os atributos são
acessíveis e visíveis pelo lado de fora do objeto.&lt;/p&gt;
&lt;h2 id=&quot;prototipos&quot; tabindex=&quot;-1&quot;&gt;Protótipos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-1/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://maxroecker.github.io/blog/javascript-intermediario-6/&quot;&gt;Como visto anteriormente&lt;/a&gt;,
o JavaScript não possui Orientação a Objetos baseado em Classes (OOC). Na
verdade, a linguagem implementa outro “estilo” de programação orientada a
objetos, a &lt;strong&gt;Orientação a Objetos baseada em Protótipos (OOP)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Protótipos são, de forma bem simples, objetos que servem de “reserva” para outro
objeto. Dessa forma, quando buscamos uma propriedade em um objeto e ela não está
presente nele, a máquina virtual vai até o protótipo desse objeto buscar essa
propriedade. Caso o resultado seja negativo novamente, busca-se no protótipo do
protótipo e assim por diante até que um objeto não tenha prototótipo ou a
propriedade seja encontrada.&lt;/p&gt;
&lt;p&gt;Compreender como os protótipos funcionam é essencial para compreender como
programar em JavaScript orientado a objetos. Caso você queira se saber mais
sobre o que são protótipos de objetos, recomendo a leitura
&lt;a href=&quot;http://maxroecker.github.io/blog/javascript-intermediario-6/&quot;&gt;desse texto&lt;/a&gt; onde
descrevo com mais detalhes o comportamento de protótipos e suas principais
características.&lt;/p&gt;
&lt;h2 id=&quot;orientacao-a-objetos-em-javascript&quot; tabindex=&quot;-1&quot;&gt;Orientação a Objetos em JavaScript &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-orientado-a-objetos-1/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;O JavaScript é uma linguagem muito flexível e permite que os desenvolvedores
tenham liberdade para construir diversas soluções para problemas e objetivos que
queiram alcançar. Quando estamos programando em um paradigma orientado a objetos
isso não é diferente. Há múltiplas maneiras e padrões para se programar
orientado a objetos dentro da linguagem.&lt;/p&gt;
&lt;p&gt;Cada técnica possui sua vantagem e sua desvantagem característica, e essa
flexibilidade permite que o desenvolvedor escolha qual é a solução mais adequada
ao seu problema. Essa série de publicações pretende passar a você alguns
conceitos e técnicas utilizadas em JavaScript para que os programas garantam as
principais características da programação orientada a objetos. E justamente por
isso iremos nos focar em dois padrões utilizados quando queremos desenvolver
aplicações em JavaScript orientado a objetos: os &lt;strong&gt;construtores&lt;/strong&gt; e as
&lt;strong&gt;fábricas&lt;/strong&gt;. Ao final, também veremos as novidades do ES2015 para esse
paradigma.&lt;/p&gt;
&lt;p&gt;Até mais!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Intermediário #6</title>
    <link href="https://maxroecker.github.io/blog/javascript-intermediario-6/"/>
    <updated>2016-04-06T15:54:33Z</updated>
    <id>https://maxroecker.github.io/blog/javascript-intermediario-6/</id>
    <content type="html">&lt;p&gt;No último texto da série, iremos abordar um dos conceitos que mais causam
confusão em desenvolvedores que estão iniciando na linguagem, os &lt;strong&gt;protótipos&lt;/strong&gt;.
No entanto, espero que ao fim dessa publicação, você compreenda que o mecanismo
de protótipos é simples, mas muito poderoso.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; &lt;strong&gt;pro·tó·ti·po&lt;/strong&gt;: (1) Primeiro tipo criado, original;
(2) Algo feito pela primeira vez e, muitas vezes, copiado ou imitado; (3)
Nodelo, padrão, cânone. &lt;/p&gt; &lt;/aside&gt;
&lt;h2 id=&quot;metodos-de-objetos&quot; tabindex=&quot;-1&quot;&gt;Métodos de objetos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-6/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Em JavaScript, objetos são estruturas de dados que agrupam duplas de chave-valor
denominadas de propriedades. A chave de uma propriedade é um nome que aponta
para um valor único. No entanto, um valor pode ser apontado por várias
propriedades, do mesmo ou diferentes objetos. As propriedades de um objeto podem
ser acessadas por meio dos operadores &lt;code&gt;.&lt;/code&gt; ou &lt;code&gt;[…]&lt;/code&gt;. Objetos são,
fundamentalmente, implementações de
&lt;a href=&quot;https://en.wikipedia.org/wiki/Associative_array&quot;&gt;arranjos associativos&lt;/a&gt;.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; Se você quer compreender melhor os fundamentos de objetos em
JavaScript, recomendo também a leitura &lt;a href=&quot;http://maxroecker.github.io/blog/javascript-basico-5/&quot;&gt;dessa outra
publicação do blog&lt;/a&gt;. &lt;/p&gt; &lt;/aside&gt;
&lt;p&gt;Mas se objetos são implementações de arranjos associativos, porque eles são
chamados de “objetos” e não de
&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Map.html&quot;&gt;mapas&lt;/a&gt;,
&lt;a href=&quot;https://docs.python.org/3/tutorial/datastructures.html#dictionaries&quot;&gt;dicionários&lt;/a&gt;
ou
&lt;a href=&quot;https://doc.rust-lang.org/std/collections/struct.HashMap.html&quot;&gt;tabelas hash&lt;/a&gt;,
como em outras linguagens de programação?&lt;/p&gt;
&lt;p&gt;Objetos tem um comportamento bem diferente de outras implementações de arranjos
associativos quando estamos tratando de propriedades que apontam para funções.
Quando uma propriedade aponta para uma função, ela recebe, inclusive, um nome
especial: &lt;strong&gt;método&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Métodos são propriedades de um objeto que apontam para funções e podem
declarados como uma função qualquer por meio da palavra-chave &lt;code&gt;function&lt;/code&gt;. No
entanto, métodos tem a possibilidade de utilizar um parâmetro implícito: o
&lt;code&gt;this&lt;/code&gt;, uma referência para o próprio objeto o qual o método “faz parte”. O
&lt;code&gt;this&lt;/code&gt; e não precisa ser declarado ou passado como parâmetro quando o utilizamos
no corpo da função. Vamos ver exemplo simples de objeto com métodos no código
abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Pedro&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Pipoca&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstName &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lastName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fullname &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;[Person: &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; fullname &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como se pode ver, o objeto &lt;code&gt;person&lt;/code&gt; possui duas propriedades, &lt;code&gt;firstName&lt;/code&gt; e
&lt;code&gt;lastName&lt;/code&gt;, e dois métodos, &lt;code&gt;getFullName&lt;/code&gt; e &lt;code&gt;toString&lt;/code&gt;. As propriedades
&lt;code&gt;firstName&lt;/code&gt; e &lt;code&gt;lastName&lt;/code&gt;, que indicam o nome e o sobrenome, são simples strings.
O método &lt;code&gt;getFullName&lt;/code&gt; é uma função que utiliza o &lt;code&gt;this&lt;/code&gt; para acessar as
propriedades &lt;code&gt;firstName&lt;/code&gt; e &lt;code&gt;lastName&lt;/code&gt; e retornar o nome completo da pessoa por
meio de uma concatenação de strings. Já o método &lt;code&gt;toString&lt;/code&gt; é uma outra função
que retorna o objeto uma versão serializada como string.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Pedro&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;lastName&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Pipoca&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getFullName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → [Function: getFullName]&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;toString&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → [Function: toString]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para acessar tanto propriedades quanto métodos, utilizamos o operador &lt;code&gt;.&lt;/code&gt; ou
&lt;code&gt;[…]&lt;/code&gt;. No entanto, acessar um método não significa executá-lo, significa apenas
receber uma referência para o método. Quando queremos executar um método,
precisamos, além de acessá-lo, utilizar um par de parênteses.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;getFullName&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Pedro Pipoca&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → [Person: Pedro Pipoca]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assim como qualquer propriedade, podemos verificar a existência de um método com
o operador &lt;code&gt;in&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;getFullName&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;toString&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E podemos excluir métodos com o operador &lt;code&gt;delete&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;getFullName&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;toString&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getFullName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toString&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;getFullName&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → false&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;toString&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mas o que? Nós não excluímos o método &lt;code&gt;toString&lt;/code&gt;? Porque o operador &lt;code&gt;in&lt;/code&gt; ainda
acusa que ele existe no objeto &lt;code&gt;person&lt;/code&gt;? Bem, se ele ainda existe no objeto
então podemos executá-lo. Assim, temos:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → [object Object]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mas que método é esse? Essa saída não condiz com a implementação que fizemos
para o &lt;code&gt;toString&lt;/code&gt; acima… Chega de mistérios! O que temos aqui é um efeito dos
&lt;strong&gt;protótipos&lt;/strong&gt; em plena ação.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://maxroecker.github.io/img/illustrations/airship.svg&quot; alt=&quot;Protótipo de aeronave contendo balões preenchidos com vácuo.&quot; title=&quot;Aeronave imaginada pelo italiano Francesco Lana de Terzi (1631–1687)&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;prototipos-de-objetos&quot; tabindex=&quot;-1&quot;&gt;Protótipos de objetos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-6/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Todo objeto em JavaScript pode ter um protótipo. Um protótipo é, informalmente,
um “objeto reserva” que contém propriedades e métodos e que podem ser acessadas
a partir do objeto inicial. Assim, ao acessar uma propriedade que não existe no
objeto primário, o JavaScript automaticamente busca a propriedade no protótipo
antes de resultar &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Como o protótipo também é um objeto, caso a propriedade não seja encontrada no
protótipo então o JavaScript busca no protótipo do protótipo, e assim por
diante. Uma hora ou outra o protótipo de um objeto será &lt;code&gt;null&lt;/code&gt; e a busca é
encerrada. A busca pela propriedade percorre toda a &lt;strong&gt;cadeia de protótipos&lt;/strong&gt;
antes de resultar em &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Na verdade, o método &lt;code&gt;toString&lt;/code&gt; misterioso que vimos acima realmente não faz
parte do objeto &lt;code&gt;person&lt;/code&gt; que declaramos, mas do protótipo dele: o
&lt;code&gt;Object.prototype&lt;/code&gt;.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; Todo objeto declarado com o literal &lt;code&gt;{…}&lt;/code&gt; possui o
&lt;code&gt;Object.prototype&lt;/code&gt; como protótipo; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#Object_instances_and_Object_prototype_object&quot;&gt;que
possui vários métodos&lt;/a&gt;, incluindo o &lt;code&gt;toString&lt;/code&gt;. &lt;/p&gt; &lt;/aside&gt;
&lt;p&gt;Como nós definimos um método &lt;code&gt;toString&lt;/code&gt; em &lt;code&gt;person&lt;/code&gt;, ao acessarmos o JavaScript
logo o encontra no primeiro objeto, nem necessitando iniciar a busca pela cadeia
de protótipos. No entando esse comportamento muda a partir do momento que
excluímos o método &lt;code&gt;toString&lt;/code&gt; de &lt;code&gt;person&lt;/code&gt;. Caso acessemos o &lt;code&gt;toString&lt;/code&gt;
novamente, o JavaScript vai encontrá-la no &lt;code&gt;Object.prototype&lt;/code&gt; por meio da cadeia
de protótipos.&lt;/p&gt;
&lt;figure&gt;  
  &lt;img alt=&quot;Ilustração do objeto person e do protótipo Object.prototype&quot; title=&quot;undefined&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://maxroecker.github.io/img/6XuHkqp03p-800.svg&quot; width=&quot;800&quot; height=&quot;450&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;A implementação do &lt;code&gt;toString&lt;/code&gt; no &lt;code&gt;Object.prototype&lt;/code&gt; é totalmente independente da
implementação que fizemos em &lt;code&gt;person&lt;/code&gt; e isso explica a divergência na saída que
tivemos acima.&lt;/p&gt;
&lt;p&gt;Você pode identificar o protótipo de um objeto por meio da função
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf&quot;&gt;&lt;code&gt;Object.getPrototypeOf&lt;/code&gt;&lt;/a&gt;.
Já vimos que o protótipo de um objeto criado com o literal &lt;code&gt;{…}&lt;/code&gt; é o
&lt;code&gt;Object.prototype&lt;/code&gt; e que protótipos são opcionais. O &lt;code&gt;Object.prototype&lt;/code&gt; é um
exemplo de objeto que não tem protótipos. Podemos vamos confirmar essas
sentenças com o exemplo abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → null&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você pode criar um objeto com qualquer protótipo por meio da função
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create&quot;&gt;&lt;code&gt;Object.create&lt;/code&gt;&lt;/a&gt;,
que recebe como primeiro parâmetro um objeto que será o protótipo do objeto
criado. Veja no exemplo a seguir onde definimos um protótipo para objetos que
representam um ponto com coordenadas em duas dimensões:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; pointPrototype &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;getDistanceFrom&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; dx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;other&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; dy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;other&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; distance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dx &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; dx &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; dy &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; dy&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; distance&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; origin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pointPrototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
origin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
origin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; point &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pointPrototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
point&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
point&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDistanceFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 0&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDistanceFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;origin&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja que o protótipo possui a função &lt;code&gt;getDistanceFrom&lt;/code&gt;, que recebe outro ponto
com parâmetro em &lt;code&gt;other&lt;/code&gt; e calcula a distância entre o &lt;code&gt;this&lt;/code&gt;. Por causa da
delegação de propriedades, o &lt;code&gt;this&lt;/code&gt; de um método chamado pelo objeto primário
inicia a busca pelo objeto primário. Por isso que o &lt;code&gt;this.x&lt;/code&gt; referência o valor
de &lt;code&gt;origin.x&lt;/code&gt; ou &lt;code&gt;point.x&lt;/code&gt; mas não de &lt;code&gt;pointPrototype.x&lt;/code&gt;.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; &lt;a href=&quot;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/abs&quot;&gt;&lt;code&gt;Math.abs&lt;/code&gt;&lt;/a&gt;
e &lt;a href=&quot;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt&quot;&gt;&lt;code&gt;Math.sqrt&lt;/code&gt;&lt;/a&gt;
são funções padrão do JavaScript que retornam, respectivamente, o valor absoluto
e a raiz quadrada de um número. &lt;/p&gt; &lt;/aside&gt;
&lt;p&gt;Devido a busca na cadeia de protótipos, não é preciso definir a função
&lt;code&gt;getDistanceFrom&lt;/code&gt; duas vezes. Ou seja, uma função definida apenas uma vez pode
ser utilizada por qualquer objeto que tenha &lt;code&gt;pointPrototype&lt;/code&gt; como protótipo.
Isso permite uma reutilização de código bastante poderosa. A figura abaixo
apresenta uma ilustração do protótipo compartilhado:&lt;/p&gt;
&lt;figure&gt;  
  &lt;img alt=&quot;Ilustração de objetos compartilhando um mesmo protótipo.&quot; title=&quot;undefined&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://maxroecker.github.io/img/ObN4dpWhOT-800.svg&quot; width=&quot;800&quot; height=&quot;500&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Você também pode criar objetos que não tenham protótipos passando &lt;code&gt;null&lt;/code&gt; para o
primeiro parâmetro do &lt;code&gt;Object.create&lt;/code&gt;. No entanto, algumas funcionalidades
básicas não estarão disponíveis, como é o caso da função &lt;code&gt;toString&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 1&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 2&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → [object Object]&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Erro! &quot;toString&quot; não é uma função&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;É possível alterar o protótipo de um objeto após ele ser criado com a função &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf&quot;&gt;&lt;code&gt;Object.setPrototypeOf&lt;/code&gt;&lt;/a&gt;.
No entanto, a forma com que as máquinas virtuais JavaScript otimizam o acesso a
propriedades, alterar o protótipo após a criação do objeto é uma operação muito
lenta. Além disso, os efeitos colaterais que envolvem a mudança da cadeia de
protótipos podem ser bastante imprevisíveis e fonte de bugs com difícil
identificação. Por tudo isso, alterar o protótipo de um objeto é considerado uma
má prática na maioria das vezes.&lt;/p&gt;
&lt;h2 id=&quot;conclusoes&quot; tabindex=&quot;-1&quot;&gt;Conclusões &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-6/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A grande vantagem dos protótipos é que eles oferecem um considerável ganho de
desempenho e se apresentam como uma forma eficiente de utilização da memória
quando queremos distribuir código repetido para vários objetos. Afinal, quando
vários objetos compartilham um mesmo protótipo, há somente uma instância desse
protótipo na memória. No entanto, assim como qualquer recurso compartilhado, é
necessário ter uma atenção extra as mutações feita a um protótipo. Qualquer
mudança no prototótipo afeta todos os objetos que o referenciam.&lt;/p&gt;
&lt;p&gt;Os protótipos são utilizados principalmente para reutilização e compartilhamento
de código entre diversos objetos. Eles também são fundamentais para alguns
padrões que seguem o paradigma de programação orientado a objetos.&lt;/p&gt;
&lt;p&gt;Os protótipos são responsáveis por boa parte do poder de expressividade que
linguagem JavaScript oferece. Sua utilização se torna ainda mais mais
significativa quando aliada a outras funcionalidades presentes na linguagem,
como funções de alta ordem, as &lt;i lang=&quot;en&quot;&gt;closures&lt;/i&gt; e a programação
orientada a eventos.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Intermediário #5</title>
    <link href="https://maxroecker.github.io/blog/javascript-intermediario-5/"/>
    <updated>2016-04-04T14:22:21Z</updated>
    <id>https://maxroecker.github.io/blog/javascript-intermediario-5/</id>
    <content type="html">&lt;p&gt;Hoje iremos abordar a IIFE, uma prática muito utilizada no JavaScript quando
estamos desenvolvendo aplicações ou módulos na linguagem já que ela garante um
código que não cause ou seja afetado por efeitos colaterais externos.&lt;/p&gt;
&lt;h2 id=&quot;introducao&quot; tabindex=&quot;-1&quot;&gt;Introdução &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-5/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Para entender a IIFE, precisamos relembrar o que são expressões funcionais e &lt;i lang=&quot;en&quot;&gt;closures&lt;/i&gt; em JavaScript.&lt;/p&gt;
&lt;p&gt;Funções são tratadas como qualquer outro valor em JavaScript, e, por isso, podem
ser atribuídas em variáveis, passadas como parâmetro ou retornadas como
resultado. Toda vez que uma expressão resulta em uma função, dizemos que temos
uma &lt;strong&gt;expressão funcional&lt;/strong&gt;. Uma declaração de função utilizando a palavra-chave
&lt;code&gt;function&lt;/code&gt; sempre retorna como valor uma referência para a função definida e,
por isso, também é considerada uma expressão funcional. Uma variável pode
executar uma função que ela referencia utilizando um par de parênteses &lt;code&gt;(…)&lt;/code&gt;
entre os parâmetros da função.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; Caso você queira ler mais sobre o comportamento de expressões
funcionais em JavaScript, recomendo a leitura &lt;a href=&quot;https://maxroecker.github.io/blog/javascript-basico-6/&quot;&gt;dessa
publicação&lt;/a&gt; no blog. &lt;/p&gt; &lt;/aside&gt;
&lt;p&gt;Além disso, toda vez que uma função é definida internamente de um escopo de
outra função e, além disso, referencia variáveis locais da função externa; temos
uma &lt;i lang=&quot;en&quot;&gt;closure&lt;/i&gt;. Uma &lt;strong&gt;&lt;i lang=&quot;en&quot;&gt;closure&lt;/i&gt;&lt;/strong&gt;
armazena o escopo léxico da função externa e é capaz de acessá-lo mesmo quando a
sua execução já tenha sido finalizada. O &lt;i lang=&quot;en&quot;&gt;closure&lt;/i&gt; é um estado
privado da função e nada mais tem acesso a esse estado exceto outras funções
definidas no mesmo &lt;i lang=&quot;en&quot;&gt;closure&lt;/i&gt;.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; Se você quiser entender melhor sobre o que são &lt;i lang=&quot;en&quot;&gt;closures&lt;/i&gt;, &lt;a href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-2/&quot;&gt;essa outra
publicação&lt;/a&gt; do blog pode lhe ajudar. &lt;/p&gt; &lt;/aside&gt;
&lt;h2 id=&quot;o-padrao-iife&quot; tabindex=&quot;-1&quot;&gt;O Padrão IIFE &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-5/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Com os conceitos relembrados na introdução, podemos criar uma IIFE. &lt;strong&gt;IIFE é uma
expressão funcional que é executada imediatamente após ser definida&lt;/strong&gt;.
Normalmente, uma IIFE (do inglês, &lt;i lang=&quot;en&quot;&gt;Immediately-Invoked Function
Expression&lt;/i&gt;) é escrita como uma a definição de uma função — e sua consequente
expressão funcional — seguida da sua imediata execução. Você pode utilizar o
padrão IIFE utilizando a palavra chave &lt;code&gt;function&lt;/code&gt; na seguinte forma:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja que entre o primeiro par de parênteses externos estamos definindo uma
função — que retorna uma expressão funcional — e, logo em seguida, no segundo
par de parênteses externos, estamos invocando-a.&lt;/p&gt;
&lt;p&gt;Vamos aplicar a IIFE em um exemplo prático. Suponha que queremos definir um
contador global e único que somente seja acessível via três funções: &lt;code&gt;read&lt;/code&gt;, que
retorna o estado atual do contador; &lt;code&gt;count&lt;/code&gt; que incrementa e retorna o valor do
contador e &lt;code&gt;reset&lt;/code&gt; que reinicializa o contador. Você poderia implementar uma
solução tal como o código abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 2&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Apesar da variável &lt;code&gt;state&lt;/code&gt;, que armazena o estado atual do contador, ser global
e única, essa solução possui problemas: a variável &lt;code&gt;state&lt;/code&gt; está disponível para
todo e qualquer subrotina uma vez que ela é definida globalmente. Além disso, a
variável &lt;code&gt;state&lt;/code&gt; “polui” o escopo global do código, o que pode levar a conflito
de nomes e bugs difíceis de serem encontrados.&lt;/p&gt;
&lt;p&gt;Podemos proteger a variável &lt;code&gt;state&lt;/code&gt; de efeitos colaterais externos utilizando
uma IIFE. Vamos então refatorar o código acima utilizando essa prática:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; counter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;token function-variable function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;token function-variable function&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 2&lt;/span&gt;
counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora, no código acima, a variável &lt;code&gt;state&lt;/code&gt; está protegida por uma &lt;i lang=&quot;en&quot;&gt;closure&lt;/i&gt; e, dessa forma, não é mais acessível por nenhuma função
exceto a &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt; e &lt;code&gt;reset&lt;/code&gt;. Para que tenhamos acesso a essas funções, o
retorno da IIFE é um objeto que contém referências para as funções que acessam
&lt;code&gt;state&lt;/code&gt;. Por isso que a utilização delas é um pouco modificada na refatoração
final.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; A IIFE também pode ser encontrado pelo nome de SEAF (do inglês, &lt;i lang=&quot;en&quot;&gt;Self-Executing Anonymous Function&lt;/i&gt;). No entanto, o termo IIFE, &lt;a href=&quot;http://benalman.com/news/2010/11/immediately-invoked-function-expression/#iife&quot;&gt;introduzido
por Ben Alman&lt;/a&gt;, é considerado semanticamente mais adequado. Afinal, a prática
não requer utilizar somente funções anônimas. &lt;/p&gt; &lt;/aside&gt;
&lt;h2 id=&quot;conclusoes&quot; tabindex=&quot;-1&quot;&gt;Conclusões &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-5/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A IIFE é uma prática muito utilizada para proteger o escopo global da poluição e
conflito de nomes de variáveis. Além disso, permite aliviar um pouco a confusão
de escopos de bloco/função dados pelo
&lt;a href=&quot;http://maxroecker.github.io/blog/javascript-intermediario-4/&quot;&gt;mecanismo de hasteamento de variáveis e funções do JavaScript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Outra comum utilização da IIFE é o construção de um estado privado e
encapsulado, uma vez que as variáveis que são utilizadas pelas funções
retornadas da IIFE ficam alocadas em uma &lt;i lang=&quot;en&quot;&gt;closure&lt;/i&gt; e somente
essas funções possuem acesso a elas, como vimos no exemplo.&lt;/p&gt;
&lt;p&gt;O post de hoje ficou mais curto, mas, lembre-se, as IIFEs eram uma das poucas
alternativas para a simulação de módulos em JavaScript em uma época anterior ao
ES2015. É sempre bom ter esse conhecimento no seu inventário.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Intermediário #4</title>
    <link href="https://maxroecker.github.io/blog/javascript-intermediario-4/"/>
    <updated>2016-01-16T18:34:26Z</updated>
    <id>https://maxroecker.github.io/blog/javascript-intermediario-4/</id>
    <content type="html">&lt;p&gt;Hoje veremos uma característica bastante peculiar do JavaScript e que
normalmente é causa de pequenos erros quanto estamos trabalhando com a
linguagem: o hasteamento de variáveis, comumente chamado de &lt;i lang=&quot;en&quot;&gt;hoisting&lt;/i&gt;.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; &lt;strong&gt;has·te·ar&lt;/strong&gt;: (1) Elevar ou prender ao topo de uma
haste. (2) Altear, içar, levantar. &lt;/p&gt; &lt;/aside&gt;
&lt;h2 id=&quot;hasteamento-de-variaveis&quot; tabindex=&quot;-1&quot;&gt;Hasteamento de variáveis &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-4/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;No momento de execução de um código JavaScript, toda declaração de variável
passam por um processo de hasteamento, isto é, a declaração da variável é
elevada para o topo do escopo atribuído de forma automática. Esse processo é
comumente chamado de &lt;i lang=&quot;en&quot;&gt;hoisting&lt;/i&gt;. O conceito pode ser um pouco
confuso a princípio, então, vamos para um exemplo prático. Em JavaScript, é
possível declarar uma função e chamá-la logo em seguida, como no exemplo abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello, &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Max&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Hello, Max!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Entretanto, você também pode chamar uma função que ainda não foi declarada. Ou
seja, o código acima pode ser reescrito como o abaixo e ainda assim continua
funcionando:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Max&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Hello, Max!&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello, &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Isso acontece porque a declaração da função &lt;code&gt;hello&lt;/code&gt; é hasteada ao topo do
código. O compilador faz esse processo de forma automática e, por isso, o código
continua funcionando normalmente. O mesmo acontece para variáveis declaradas com
&lt;code&gt;var&lt;/code&gt;. Veja:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → undefined&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Um erro não aconteceu, no entanto, porque a primeira saída foi &lt;code&gt;undefined&lt;/code&gt; se a
variável é declarada com o valor &lt;code&gt;6&lt;/code&gt;? Bem, isso acontece porque o mecanismo de
&lt;i lang=&quot;en&quot;&gt;hoisting&lt;/i&gt; do JavaScript somente eleva declarações das variáveis,
mas não a atribuíções que as inicializam. Ou seja, o código acima tem um
comportamento equivalente ao código abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → undefined&lt;/span&gt;
x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Declarações de variáveis locais passam pelo mesmo processo, ou seja, a saída do
código abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Será igual a:&lt;/p&gt;
&lt;pre&gt;&lt;samp&gt;undefined
undefined
2
1&lt;/samp&gt;&lt;/pre&gt;
&lt;p&gt;No entanto, o &lt;i lang=&quot;en&quot;&gt;hoisting&lt;/i&gt; somente é aplicado em declarações que
utilizam &lt;code&gt;var&lt;/code&gt;. O mecanismo de hasteamento de variáveis declaradas com &lt;code&gt;let&lt;/code&gt; e
&lt;code&gt;const&lt;/code&gt; não permite a referência de uma variável ainda não declarada e irá
lançar um erro do tipo
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusao&quot; tabindex=&quot;-1&quot;&gt;Conclusão &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-4/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Podemos resumir essa publicação como: o hasteamento de variáveis com &lt;code&gt;var&lt;/code&gt; eleva
para o topo do código somente a declaração, mas não a definição; enquanto o
hasteamento de funções eleva para o topo do código tanto a declaração quando a
definição.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://maxroecker.github.io/img/illustrations/hoisting.svg&quot; alt=&quot;Mecanismo para elevar água.&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Ainda assim, pelos exemplos anteriores, o comportamento de hastear as
declarações de variáveis e funções podem levar a resultados confusos e
proporcionar um código de difícil leitura. É importante que você siga algumas
boas práticas no momento de escrita do código. Elevar as declarações de suas
variáveis para o topo do seu respectivo escopo evita confusão com o mecanismo de
&lt;i lang=&quot;en&quot;&gt;hoisting&lt;/i&gt;, pois seu código deixa-o explícito.&lt;/p&gt;
&lt;p&gt;Outra prática importante é a inicialização de um valor na variável sempre que
possível. Dessa forma, evita-se valores indefinidos durante a execução e
surpresas indesejadas.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Intermediário #3</title>
    <link href="https://maxroecker.github.io/blog/javascript-intermediario-3/"/>
    <updated>2016-01-16T17:47:20Z</updated>
    <id>https://maxroecker.github.io/blog/javascript-intermediario-3/</id>
    <content type="html">&lt;p&gt;Nesse texto, vamos compreender um pouco mais sobre um paradigma importante
quando estamos programando em JavaScript e, além disso, entender uma das
principais características que levaram ao sucesso da linguagem: o seu modelo de
concorrência.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; &lt;strong&gt;as·sin·cro·nis·mo&lt;/strong&gt;: 1. Qualidade ou estado de
assíncrono; 2. Ausência de concorrência no tempo. &lt;/p&gt; &lt;/aside&gt;
&lt;h2 id=&quot;assincronia-em-javascript&quot; tabindex=&quot;-1&quot;&gt;Assincronia em JavaScript &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-3/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Programação assíncrona é um paradigma de programação onde o código pode não
seguir o fluxo de execução “padrão”. Além disso, um código assíncrono pode
tratar de interrupções externas ao programa, tais como a chegada de um evento,
sinal, temporizador, entre outras.&lt;/p&gt;
&lt;p&gt;Em JavaScript, podemos escrever código assíncrono de forma fácil utilizando a
função
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout&quot;&gt;&lt;code&gt;setTimeout&lt;/code&gt;&lt;/a&gt;,
que recebe dois parâmetros: uma função a ser executada e uma quantidade de
milissegundos que indica o tempo de espera para iniciar a execução dessa função.
Veja o exemplo abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;without one.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fully dressed&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;You know&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Smile, my dear!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;you are not&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A saída do código acima será escrita como:&lt;/p&gt;
&lt;pre&gt;&lt;samp&gt;Smile, my dear!
You know
you are not
fully dressed
without one.&lt;/samp&gt;&lt;/pre&gt;
&lt;p&gt;Apesar dos &lt;i lang=&quot;en&quot;&gt;logs&lt;/i&gt; serem colocados fora de ordem, alguns foram
colocados em funções que foram passadas para o &lt;code&gt;setTimeout&lt;/code&gt; e que serão
executadas somente após o tempo de espera for esgotado. Vamos ver outro exemplo
um pouco mais complexo. Considere o código abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;asyncCountTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;asyncCountTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Qual é a saída do código acima? Temos um laço que dispara várias funções por
meio do &lt;code&gt;setTimeout&lt;/code&gt; e que imprimem a variável &lt;code&gt;i&lt;/code&gt;. Por maior que seja a
surpresa, o código acima exibe como saída:&lt;/p&gt;
&lt;pre&gt;&lt;samp&gt;4
4
4
4&lt;/samp&gt;&lt;/pre&gt;
&lt;p&gt;Por quê? A razão desse comportamento se deve à &lt;i lang=&quot;en&quot;&gt;closure&lt;/i&gt;
associada a função passada para o &lt;code&gt;setTimeout&lt;/code&gt;. A variável &lt;code&gt;i&lt;/code&gt; é compartilhada
por todas as &lt;code&gt;closures&lt;/code&gt; e, por isso, tem esse comportamento. O laço continua
sendo executado e a variável &lt;code&gt;i&lt;/code&gt; continua sendo incrementada até chegue ao valor
quatro, que é quando a condição do laço falha. Só então os &lt;i lang=&quot;en&quot;&gt;callbacks&lt;/i&gt; do &lt;code&gt;setTimeout&lt;/code&gt; são executados.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; Caso você não tenha familiaridade com &lt;i lang=&quot;en&quot;&gt;closures&lt;/i&gt;, &lt;a href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-2/&quot;&gt;essa
publicação do blog&lt;/a&gt; pode lhe ajudar. &lt;/p&gt; &lt;/aside&gt;
&lt;p&gt;No entanto, você percebeu que mesmo quando o tempo de espera for zero, a função
não é executada imediatamente? Bem, aqui estamos de frente com um dos efeitos do
modelo de concorrência do JavaScript e que vamos entrar em detalhes a partir de
agora.&lt;/p&gt;
&lt;h2 id=&quot;programacao-orientada-a-eventos&quot; tabindex=&quot;-1&quot;&gt;Programação Orientada a Eventos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-3/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;O JavaScript é uma linguagem que foi inicialmente desenvolvida para adicionar
funcionalidades as páginas HTML do navegador Netscape. É uma linguagem
multiparadigma que suporta programação
&lt;a href=&quot;https://en.wikipedia.org/wiki/Procedural_programming&quot;&gt;procedural&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot;&gt;orientada a objetos&lt;/a&gt;
e &lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot;&gt;funcional&lt;/a&gt;, mas, foi
especialmente desenvolvida para atender a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Event-driven_programming&quot;&gt;programação orientada a eventos&lt;/a&gt;.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; Caso você queira saber um pouco mais sobre a história da linguagem,
&lt;a href=&quot;https://maxroecker.github.io/blog/javascript-basico-1/&quot;&gt;leia essa outra
publicação do blog&lt;/a&gt;. &lt;/p&gt; &lt;/aside&gt;
&lt;p&gt;A programação orientada a eventos ajusta o fluxo do programa de acordo com
eventos, ou seja, interrupções que podem ser feitas a qualquer momento e
necessitam de “reações” por parte do programa. É um paradigma muito utilizado
para o desenvolvimento de &lt;i lang=&quot;en&quot;&gt;drivers&lt;/i&gt; e sensores de
microcontroladores. A programação orientada a eventos também predomina no
desenvolvimento de aplicações com GUI, pois requerem que a aplicação reaja de
acordo com a interação do usuário. Não é por coincidência que ela seria
utilizada em “uma linguagem que quer adicionar algumas funcionalidades em
páginas HTML”, certo?&lt;/p&gt;
&lt;p&gt;Em uma aplicação orientada a eventos, normalmente temos um
&lt;a href=&quot;https://en.wikipedia.org/wiki/Event_loop&quot;&gt;Laço de Eventos&lt;/a&gt; — comumente chamado
de &lt;i lang=&quot;en&quot;&gt;event loop&lt;/i&gt; — que aguarda os eventos acontecerem para chamar
funções que foram designadas à responder um evento específico. E é o
comportamento desse laço o qual vamos detalhar daqui em diante.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://maxroecker.github.io/img/illustrations/steam-engine.svg&quot; alt=&quot;Máquina de ciclos a vapor&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;o-event-loop-do-javascript&quot; tabindex=&quot;-1&quot;&gt;O &lt;i lang=&quot;en&quot;&gt;Event Loop&lt;/i&gt; do JavaScript &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-3/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Toda máquina de execução JavaScript possui um &lt;i lang=&quot;en&quot;&gt;event loop&lt;/i&gt; único
que captura os eventos disparados pelo usuário ou pelo ambiente onde a máquina
está alocada. Se um evento capturado pelo &lt;i lang=&quot;en&quot;&gt;event loop&lt;/i&gt; possuir
algum &lt;i lang=&quot;en&quot;&gt;callback&lt;/i&gt; associado — uma função que deve ser executada
quando o evento ocorrer — então uma &lt;strong&gt;tarefa&lt;/strong&gt; será enfileirada na fila de
tarefas que irá iniciar a execução do &lt;i lang=&quot;en&quot;&gt;callback&lt;/i&gt; pelo motor de
execução JavaScript.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;fila de tarefas&lt;/strong&gt;, também chamada de &lt;i lang=&quot;en&quot;&gt;job queue&lt;/i&gt;, é uma
&lt;a href=&quot;https://www.ime.usp.br/~pf/algoritmos/aulas/fila.html&quot;&gt;estrutura de fila&lt;/a&gt; que
armazena referência para funções que devem ser executadas. De forma geral, o
motor de execução do JavaScript possui um algoritmo bastante simples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Aguarde a fila ter tarefas;&lt;/li&gt;
&lt;li&gt;Execute a primeira tarefa da fila até o fim, isto é, até que a pilha de
execução esteja vazia.&lt;/li&gt;
&lt;li&gt;Retorne ao passo 1.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Na verdade, a função &lt;code&gt;setTimeout&lt;/code&gt; que vimos anteriormente não “executa uma
função após uma quantidade de tempo”, mas, adiciona no &lt;i lang=&quot;en&quot;&gt;event
loop&lt;/i&gt; a função como um &lt;i lang=&quot;en&quot;&gt;callback&lt;/i&gt; para um sinal de um
temporizador que será disparado após a quantidade de tempo do segunto parâmetro.
Existem outras formas de adicionar tarefas a fila, entre elas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adicionar &lt;i lang=&quot;en&quot;&gt;listeners&lt;/i&gt; de eventos com
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters&quot;&gt;&lt;code&gt;addEventListener&lt;/code&gt;&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Utilizando
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval&quot;&gt;&lt;code&gt;setInterval&lt;/code&gt;&lt;/a&gt;
ou
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage&quot;&gt;&lt;code&gt;postMessage&lt;/code&gt;&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Respostas de requisições HTTP utilizando as APIs
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt;
ou &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt; dos
navegadores.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O &lt;i lang=&quot;en&quot;&gt;event loop&lt;/i&gt; é um modelo de concorrência não preemptivo. Não é
possível interromper a execução da função corrente e retornar posteriormente.
Somente uma função é executada por vez. Uma vez que a computação de uma função é
iniciada, ela não é mais interrompida. Assim, não há paralelismo de execução das
funções no &lt;i lang=&quot;en&quot;&gt;event loop&lt;/i&gt;.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; &lt;a href=&quot;https://pt.wikipedia.org/wiki/Preemptividade&quot;&gt;Preemptividade&lt;/a&gt; é a
capacidade de um sistema de interromper temporariamente uma tarefa em execução
sem exigir cooperação, com a intenção de retomar a tarefa posteriormente. &lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;É por isso que, mesmo quando colocado no &lt;code&gt;setTimeout&lt;/code&gt; com tempo de espera zero,
o &lt;i lang=&quot;en&quot;&gt;callback&lt;/i&gt; não é executado imediatamente. Ainda é necessário
terminar a execução da função atual e, somente então, o &lt;i lang=&quot;en&quot;&gt;callback&lt;/i&gt; é executado. Isso explica o comportamendo da saída do
código do exemplo anterior. Na realidade, o &lt;code&gt;setTimeout&lt;/code&gt; não garante que a
função vai ser executada após o período, mas sim que sua tarefa será
enfileirada.&lt;/p&gt;
&lt;p&gt;Outro efeito colateral desse modelo de concorrência é que, se alguma tarefa
demanda muita computação, ela inevitavelmente vai bloquear a fila de tarefas por
muito tempo e, assim, nenhuma outra tarefa poderá ser iniciada. Se a fila de
tarefas está bloqueada, os &lt;i lang=&quot;en&quot;&gt;callbacks&lt;/i&gt; dos eventos das ações do
usuário podem não ser respondidos em tempo adequado e a GUI apresenta estar
“travada”, por exemplo.&lt;/p&gt;
&lt;h2 id=&quot;indo-alem&quot; tabindex=&quot;-1&quot;&gt;Indo além &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-3/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Agora que você já entende o modelo de concorrência, alguns questionamentos podem
estar perambulando pela sua cabeça:&lt;/p&gt;
&lt;blockquote&gt; &lt;p&gt; Mas, quando fazemos uma requisição HTTP utilizando a API fetch,
o usuário ainda é capaz de interagir com a tela mesmo que a requisição demore
vários segundos para ser concluída… Como isso acontece se o &lt;i lang=&quot;en&quot;&gt;event
loop&lt;/i&gt; está bloqueado? &lt;/p&gt; &lt;/blockquote&gt;
&lt;p&gt;Diferentes máquinas virtuais JavaScript implementam algumas funcionalidades em
fluxos de execução paralelos ao &lt;i lang=&quot;en&quot;&gt;event loop&lt;/i&gt; para não bloquear a
fila de tarefas por muito tempo. Normalmente tais funcionalidades estão
relacionadas a operações de entrada e saída que, comumente, são operações
“lentas”. Alguns exemplos de operações de entrada e saída que normalmente são
executadas paralelamente ao &lt;i lang=&quot;en&quot;&gt;event loop&lt;/i&gt; incluem: leitura e
escrita de arquivos, requisições de rede, &lt;i lang=&quot;en&quot;&gt;stream&lt;/i&gt; de multimídia,
acesso ao banco de dados, entre outros.&lt;/p&gt;
&lt;p&gt;Essa publicação apresentou uma versão bastante simplificada de como o &lt;i lang=&quot;en&quot;&gt;event loop&lt;/i&gt; do JavaScript funciona. Ainda há vários pontos que
foram deixados de lado para o bem da sanidade da explicação. No entanto,
acredito que você tenha conseguido entender o funcionamento das máquinas
virtuais JavaScript e compreendido o modelo de concorrência da linguagem e as
consequências que surgem a partir do seu uso. Caso você tenha interesse em uma
visão mais completa, recomendo ler mais sobre:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A fila de microtarefas e as &lt;i lang=&quot;en&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;promises&lt;/a&gt;&lt;/i&gt;;&lt;/li&gt;
&lt;li&gt;A instanciação de &lt;i lang=&quot;en&quot;&gt;event loops&lt;/i&gt; paralelos com
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;&lt;i lang=&quot;en&quot;&gt;Workers&lt;/i&gt;&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;As
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame&quot;&gt;etapas de apresentação&lt;/a&gt;
nos navegadores.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Intermediário #2</title>
    <link href="https://maxroecker.github.io/blog/javascript-intermediario-2/"/>
    <updated>2016-01-13T18:42:06Z</updated>
    <id>https://maxroecker.github.io/blog/javascript-intermediario-2/</id>
    <content type="html">&lt;p&gt;A série &lt;strong&gt;JavaScript Intermediário&lt;/strong&gt; busca passar, de maneira sólida e gradual,
características fundamentais da linguagem. Neste capítulo, vamos voltar nossa
atenção para um importante, esquecido e quase mitológico aspecto da linguagem:
as &lt;i lang=&quot;en&quot;&gt;closures&lt;/i&gt;, também conhecidas como fechos léxicos ou
clausuras.&lt;/p&gt;
&lt;p&gt;Mesmo que você programe há muito tempo em JavaScript e nunca tenha ouvido nunca
falar em &lt;i lang=&quot;en&quot;&gt;closures&lt;/i&gt;, aqui vai uma revelação: &lt;strong&gt;elas estão em todo
lugar&lt;/strong&gt;. &lt;i lang=&quot;en&quot;&gt;Closure&lt;/i&gt; não é um tipo de opção especial da linguagem
nem uma declaração especial ou um padrão de desenvolvimento. Para falar a
verdade, &lt;i lang=&quot;en&quot;&gt;closures&lt;/i&gt; não existem apenas no JavaScript. &lt;i lang=&quot;en&quot;&gt;Closure&lt;/i&gt; é conceito bem mais amplo, com base na teoria de
implementação de linguanges de programação. Justamente por isso, é necessário
entendê-las para que se possa compreender todas as consequências da sua
utilização.&lt;/p&gt;
&lt;p&gt;Contudo, antes de entender o que são &lt;i lang=&quot;en&quot;&gt;closures&lt;/i&gt;, precisamos dar
um passo atrás e entender como as linguagens de programação são executadas e
utilizam a memória do computador.&lt;/p&gt;
&lt;h2 id=&quot;a-pilha-de-execucao&quot; tabindex=&quot;-1&quot;&gt;A pilha de execução &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A grande maioria das linguagens de programação utiliza uma estrutura para
registrar todas as subrotinas ativas de um programa.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack-based_memory_allocation&quot;&gt;Essa estrutura normalmente é implementada como uma pilha&lt;/a&gt;.
Essa pilha tem várias responsabilidades que incluem: armazenar o ponto de
execução atual, armazenar o endereço para qual a subrotina ativa deve retornar
um valor quando terminar a execução, armazenar as variáveis locais, entre
outras. De forma geral, podemos resumir o funcionamento da pilha de execução
como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Toda subrotina chamada empilha um novo quadro de contexto;&lt;/li&gt;
&lt;li&gt;Quadros permanecem na pilha até o fim da execução da subrotina;&lt;/li&gt;
&lt;li&gt;Quando a subrotina termina, o quadro é desempilhado, liberando memória para a
próxima subrotina;&lt;/li&gt;
&lt;li&gt;Quando a pilha estiver vazia, é considerado que o programa chegou ao fim da execução.&lt;/li&gt;
&lt;/ul&gt;
&lt;aside&gt; &lt;p&gt; Um estouro de pilha (&lt;i lang=&quot;en&quot;&gt;stack overflow&lt;/i&gt;) ocorre quando
um programa empilha mais quadros do que a quantidade de memória disponível
permite. &lt;/p&gt; &lt;/aside&gt;
&lt;p&gt;Em JavaScript, consideramos as funções como subrotinas. Veja o código abaixo que
contém três declarações de funções e a chamada de uma delas:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sum&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 4.5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A execução do código acima fará com que a pilha de execução tenha, de forma
simplificada, os estados dado pela figura abaixo.&lt;/p&gt;
&lt;figure&gt;
  &lt;img alt=&quot;Sequência do empilhamento dos quadros da execução do código acima.&quot; title=&quot;undefined&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://maxroecker.github.io/img/_aNqEWT3K6-1100.svg&quot; width=&quot;1100&quot; height=&quot;850&quot;&gt;
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;Temos a chamada da função &lt;code&gt;avg&lt;/code&gt; que empilha seu respectivo quadro contendo os
parâmetros &lt;code&gt;x = 4&lt;/code&gt; e &lt;code&gt;y = 5&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;A partir de um ponto, a função &lt;code&gt;avg&lt;/code&gt; chama a função &lt;code&gt;add&lt;/code&gt;, que por sua vez
empilha seu quadro de contexto contendo também os parâmetros &lt;code&gt;x = 4&lt;/code&gt; e
&lt;code&gt;y = 5&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Ao terminar de executar, &lt;code&gt;add&lt;/code&gt; retorna o valor &lt;code&gt;9&lt;/code&gt; para a variável &lt;code&gt;sum&lt;/code&gt; no
quadro de contexto da função &lt;code&gt;avg&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;A função &lt;code&gt;avg&lt;/code&gt; então chama &lt;code&gt;div&lt;/code&gt;, que por sua vez empilha o seu respectivo
quadro de contexto, contendo os parâmetros &lt;code&gt;x = 9&lt;/code&gt; e &lt;code&gt;y = 2&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;A função &lt;code&gt;div&lt;/code&gt; termina sua execução e retorna um valor para uma variável
anônima, aqui representada como um &lt;code&gt;~&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;A função &lt;code&gt;avg&lt;/code&gt; termina sua execução e retorna o resultado para o escopo
global, aqui também representada como um &lt;code&gt;~&lt;/code&gt;, e que é impressa no console.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Agora, vamos ver um outro exemplo um pouco mais complexo. Considere o código
abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; double &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A execução desse código terá, de forma simplificada, os seguintes estados da
pilha:&lt;/p&gt;
&lt;figure&gt;
  &lt;img alt=&quot;Sequência do empilhamento dos quadros da execução do código acima.&quot; title=&quot;undefined&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://maxroecker.github.io/img/QoGdNrLOWd-1100.svg&quot; width=&quot;1100&quot; height=&quot;700&quot;&gt;
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;Temos a chamada da função &lt;code&gt;mul&lt;/code&gt; que empilha seu respectivo quadro contendo o
parâmetro &lt;code&gt;x = 2&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Ao terminar de executar, &lt;code&gt;mul&lt;/code&gt; retorna uma referência para uma função anônima
— aqui representada como um &lt;code&gt;#&lt;/code&gt; — para a variável &lt;code&gt;double&lt;/code&gt; no quadro de
contexto global;&lt;/li&gt;
&lt;li&gt;O contexto global chama então &lt;code&gt;double&lt;/code&gt;, que por sua vez empilha o seu quadro
de contexto, contendo o parâmetro &lt;code&gt;y = 2&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Mas espere aí… para concluir sua execução a função apontada por &lt;code&gt;double&lt;/code&gt;
precisa do parâmetro &lt;code&gt;x&lt;/code&gt;, que pertencia ao quadro da função &lt;code&gt;mul&lt;/code&gt;. No
entanto, o quadro de contexto de &lt;code&gt;mul&lt;/code&gt; já foi desempilhado porque sua
execução foi finalizada. Onde foi parar &lt;code&gt;x&lt;/code&gt;?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Bem, senhoras e senhores, aqui lhes apresento a &lt;i lang=&quot;en&quot;&gt;closure&lt;/i&gt;. Muito
prazer!&lt;/p&gt;
&lt;h2 id=&quot;closures&quot; tabindex=&quot;-1&quot;&gt;&lt;i lang=&quot;en&quot;&gt;Closures&lt;/i&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;i lang=&quot;en&quot;&gt;Closures&lt;/i&gt; nada mais são que funções que armazenam o contexto
léxico interno para que possam ser utilizadas mesmo quando o quadro de contexto
já não existe mais.&lt;/p&gt;
&lt;p&gt;Uma &lt;i lang=&quot;en&quot;&gt;closure&lt;/i&gt; acontece quando uma função é declarada dentro do
escopo de outra e, além disso, a função interior referencia variáveis locais da
função exterior. Quando a função exterior é executada, uma closure é criada
contendo uma referência da função interior e referências para quaisquer
variáveis no contexto da função exterior que a função interior necessita.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; &lt;i lang=&quot;en&quot;&gt;Closures&lt;/i&gt; são funções são capazes de “lembrar” de
variáveis pertencente ao escopo léxico de onde foram declaradas mesmo quando
executadas fora dele. &lt;/p&gt; &lt;/aside&gt;
&lt;p&gt;Dessa forma, vamos redesenhar o nosso esquema simplificado do estado da pilha de
execução contemplando também o &lt;i lang=&quot;en&quot;&gt;heap&lt;/i&gt;:&lt;/p&gt;
&lt;figure&gt;
  &lt;img alt=&quot;Sequência do empilhamento dos quadros da execução do código acima.&quot; title=&quot;undefined&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://maxroecker.github.io/img/9VSmed7ztd-1100.svg&quot; width=&quot;1100&quot; height=&quot;850&quot;&gt;
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;Temos a chamada da função &lt;code&gt;mul&lt;/code&gt; que empilha seu respectivo quadro contendo o
parâmetro &lt;code&gt;x = 2&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Ao terminar de executar, &lt;code&gt;mul&lt;/code&gt; retorna uma referência de uma &lt;i lang=&quot;en&quot;&gt;closure&lt;/i&gt; anônima — aqui representada como um &lt;code&gt;#&lt;/code&gt; — para a
variável &lt;code&gt;double&lt;/code&gt; no quadro de contexto global;&lt;/li&gt;
&lt;li&gt;O contexto global chama então &lt;code&gt;double&lt;/code&gt;, que por sua vez empilha o seu quadro
de contexto, contendo o parâmetro &lt;code&gt;y = 2&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Ao executar, a &lt;i lang=&quot;en&quot;&gt;closure&lt;/i&gt; apontada por &lt;code&gt;double&lt;/code&gt; pega o valor do
parâmetro &lt;code&gt;x = 2&lt;/code&gt; do contexto salvo e multiplica pelo parâmetro &lt;code&gt;y = 2&lt;/code&gt;. O
valor da multiplicação é retornado e exibido pelo console.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://maxroecker.github.io/img/illustrations/lock.svg&quot; alt=&quot;Um símbolo enclausurado.&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;teoria-e-propriedades-das-closures&quot; tabindex=&quot;-1&quot;&gt;Teoria e propriedades das &lt;i lang=&quot;en&quot;&gt;closures&lt;/i&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Uma linguagem de programação não consegue implementar &lt;i lang=&quot;en&quot;&gt;closures&lt;/i&gt;
se o seu modelo de memória apenas utiliza apenas a pilha para gerenciar a
memória. Em tais linguagens, as variáveis locais são automaticamente desalocadas
quando a função termina sua execução. Entretanto, uma &lt;i lang=&quot;en&quot;&gt;closure&lt;/i&gt;
requer que as variáveis capturadas sobrevivam além da execução da função
original. Por isso, essas variáveis precisam ser alocadas até que não sejam mais
necessárias, normalmente utilizando a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_management#Dynamic_memory_allocation&quot;&gt;memória dinâmica&lt;/a&gt;
— comumente chamada de &lt;i lang=&quot;en&quot;&gt;heap&lt;/i&gt; — ao invés da pilha. O tempo de
vida dessas variáveis é controlado para que permançam acessíveis enquanto houver
alguma &lt;i lang=&quot;en&quot;&gt;closure&lt;/i&gt; que a referencie.&lt;/p&gt;
&lt;p&gt;Isso explica por a grande maioria das linguagens de programação que suportam &lt;i lang=&quot;en&quot;&gt;closures&lt;/i&gt; normalmente acompanham um
&lt;a href=&quot;https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)&quot;&gt;coletor de lixo&lt;/a&gt;.
Alternativas ao uso de coletor de lixo para o gerenciamento de memória seria o
controle manual ou continuar usando um espaço especial da pilha para armazenar a
&lt;i lang=&quot;en&quot;&gt;closure&lt;/i&gt;, mas, ambas as estratégias podem ter um
&lt;a href=&quot;https://en.wikipedia.org/wiki/Undefined_behavior&quot;&gt;comportamento indefinido&lt;/a&gt; uma
vez podem acontecer
“&lt;a href=&quot;https://pt.wikipedia.org/wiki/Apontador_pendente&quot;&gt;referências selvagens&lt;/a&gt;”.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; O &lt;a href=&quot;https://en.wikipedia.org/wiki/Funarg_problem&quot;&gt;Problema
Funarg&lt;/a&gt; descreve essa dificuldade de implementar funções de alta ordem e &lt;i lang=&quot;en&quot;&gt;closures&lt;/i&gt; em linguagens de progração com memória baseada em pilha,
tais como C e C++. &lt;/p&gt; &lt;/aside&gt;
&lt;p&gt;É importante lembrar que o contexto salvo por uma &lt;i lang=&quot;en&quot;&gt;closure&lt;/i&gt; é
imune a interferência externa além da própria &lt;i lang=&quot;en&quot;&gt;closure&lt;/i&gt;. Isso
garante uma área de memória oculta para a função e pode ser útil para
representar um estado interno privado. Além disso, em JavaScript, por &lt;i lang=&quot;en&quot;&gt;closures&lt;/i&gt; serem funções e funções serem objetos, &lt;i lang=&quot;en&quot;&gt;closures&lt;/i&gt; são identificadas apenas pela sua referência, mesmo que
ambas apontem para a mesma função. Vide o exemplo anterior, temos:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; double &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; triple &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 12&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;triple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 12&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;double &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; triple&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusao&quot; tabindex=&quot;-1&quot;&gt;Conclusão &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Para que você utilize o potencial da linguagem JavaScript ao máximo, é
fundamental compreender as &lt;i lang=&quot;en&quot;&gt;closures&lt;/i&gt;. É com elas que você
consegue criar encapsulamento dos dados ou programar orientado a eventos de
forma simples e declarativa. &lt;i lang=&quot;en&quot;&gt;Closure&lt;/i&gt; é um daqueles conceitos
curiosos que são paradoxalmente difíceis de compreender porque são ubíquos
demais e estão por toda parte. Mas, uma vez que o programador se torne apto a
utilizá-lo a seu favor, soluções simples e concisas podem ser desenvolvidas.&lt;/p&gt;
&lt;blockquote cite=&quot;https://www.dreamsongs.com/ObjectsHaveNotFailedNarr.html&quot;&gt; &lt;p&gt;
Uma das conclusões que nós chegamos foi que um objeto não precisa ser um
primitivo conceito em uma linguagem de programação; um objeto e seu
comportamento pode ser construído por meio de um pouco de valores e algumas boas
e velhas expressões lambdas. &lt;/p&gt; &lt;footer&gt; &lt;a href=&quot;https://www.dreamsongs.com/ObjectsHaveNotFailedNarr.html&quot;&gt;Guy L.
Steele&lt;/a&gt; &lt;/footer&gt; &lt;/blockquote&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Intermediário #1</title>
    <link href="https://maxroecker.github.io/blog/javascript-intermediario-1/"/>
    <updated>2015-12-15T17:37:54Z</updated>
    <id>https://maxroecker.github.io/blog/javascript-intermediario-1/</id>
    <content type="html">&lt;p&gt;Nessa publicação, vamos focar em um dos aspectos que mais geram confusão entre
os desenvolvedores que estão iniciando o aprendizado em JavaScript: o escopo
léxico de variáveis. Mas, o que é escopo léxico de uma variável?&lt;/p&gt;
&lt;p&gt;Uma variável definida em um código recebe um identificador único — um nome — que
é utilizado quando queremos referenciar o valor que essa variável aponta. O
trecho do código em que uma variável qualquer é identificada por um nome é
definido como o &lt;strong&gt;escopo léxico da variável&lt;/strong&gt;. Fora desse bloco, a variável é
indefinida ou um outro valor é identificado por esse nome.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; &lt;b&gt;lé·xi·co&lt;/b&gt;: (1) Os vocábulos de uma língua; (2) Vocábulos
usados num domínio especializado. &lt;/p&gt; &lt;/aside&gt;
&lt;p&gt;Na maioria das linguagens descendentes do C, o escopo léxico de uma variável é
definido pelo bloco em que ela foi declarada. Lembrando que um bloco é uma
sequência de declarações entre um par de chaves &lt;code&gt;{…}&lt;/code&gt;. No JavaScript, nem sempre
o bloco é quem define o escopo da variável, tudo depende da forma com que a
variável foi declarada.&lt;/p&gt;
&lt;p&gt;Antes do ECMAScript 2015, só existia uma forma de declarar variáveis: utilizando
da palavra chave &lt;code&gt;var&lt;/code&gt;. O ECMAScript 2015 trouxe mais duas alternativas, o &lt;code&gt;let&lt;/code&gt;
e o &lt;code&gt;const&lt;/code&gt;, que definem um escopo léxico diferente e também ditam a
mutabilidade da variável declarada.&lt;/p&gt;
&lt;h2 id=&quot;declaracao-de-variaveis-com-var&quot; tabindex=&quot;-1&quot;&gt;Declaração de variáveis com &lt;code&gt;var&lt;/code&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-1/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Declarações de variáveis com &lt;code&gt;var&lt;/code&gt; definem um &lt;strong&gt;escopo léxico de função&lt;/strong&gt;, ou
seja, é a função quem define o local que uma variável é identificada por um
nome. Essa abordagem é bastante peculiar e difere da maioria das linguagens,
veja o exemplo abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;foobar&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → foobar&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;exemplo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → foo&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → bar&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → bar&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;exemplo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → foobar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nota-se que, apesar da variável &lt;code&gt;x&lt;/code&gt; declarada dentro da função &lt;code&gt;exemplo&lt;/code&gt; ser
redeclarada novamente dentro do laço, as alterações feitas no laço se mantém
mesmo após a conclusão. Já para a variável &lt;code&gt;x&lt;/code&gt; declarada fora da função
&lt;code&gt;exemplo&lt;/code&gt;, o valor não é alterado. Podemos ver que o bloco não definiu o escopo
da variável &lt;code&gt;x&lt;/code&gt;, mas o corpo da função sim.&lt;/p&gt;
&lt;h2 id=&quot;declaracoes-de-variaveis-let&quot; tabindex=&quot;-1&quot;&gt;Declarações de variáveis &lt;code&gt;let&lt;/code&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-1/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A declaração de variável &lt;code&gt;let&lt;/code&gt; foi adicionada ao ECMAScript 2015 para permitir a
declaração de variáveis tenham um escopo léxico de bloco, e, assim, ter um
comportamento de escopo semelhante ao das linguagens C e Java. Veja o mesmo
exemplo anterior, porém agora utilizando &lt;code&gt;let&lt;/code&gt; na declaração das variáveis:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;foobar&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → foobar&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;exemplo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → foo&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → bar&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → foo&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;exemplo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → foobar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A diferença de resultados se dá principalmente dentro da função, onde agora é o
bloco que delimita o escopo léxico e não mais a função.&lt;/p&gt;
&lt;h2 id=&quot;declaracoes-de-variaveis-const&quot; tabindex=&quot;-1&quot;&gt;Declarações de variáveis &lt;code&gt;const&lt;/code&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-1/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A declaração de variáveis utilizando &lt;code&gt;const&lt;/code&gt;, que também foi padronizada na
ECMAScript 2015, declara uma variável com escopo de bloco, porém, com uma
referência fixa. Ou seja, uma variável &lt;code&gt;const&lt;/code&gt; não pode ser atribuída novamente
após a declaração. Veja o exemplo abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Erro!&lt;/span&gt;
y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bar&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Erro!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;É importante ter em mente que, apesar de nome poder dar a ideia de que essa
declaração cria um valor constante, o que é constante é a referência da
variável. Por isso, caso o valor seja um objeto, você pode mutá-lo sem qualquer
erro. Veja:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

y&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → {name: &#39;bar&#39;}&lt;/span&gt;

y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;foobar&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Erro!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Caso você deseje construir um objeto imutável, é necessário utilizar o
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze&quot;&gt;&lt;code&gt;Object.freeze&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://maxroecker.github.io/img/illustrations/turtle.svg&quot; alt=&quot;Uma tartaruga.&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;conclusao&quot; tabindex=&quot;-1&quot;&gt;Conclusão &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-intermediario-1/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Como um bom programador, uma das coisas mais importantes que você pode aprender
é sempre manter a simplicidade. Quando estamos falando sobre código, podemos
simplificá-lo quando utilizamos apenas variável para um único conceito.&lt;/p&gt;
&lt;p&gt;Algumas vezes podemos ser tentados &amp;quot;reutilizar&amp;quot; uma variável para representar
dois conceitos diferentes. Essa prática deve ser evitada, pois leva a um código
não efetivo e de difícil leitura. Por isso, sempre recomendo a utilização de
&lt;code&gt;const&lt;/code&gt; e &lt;code&gt;let&lt;/code&gt; quanto estiver em um código que permita seu uso, ou seja, que
utilize o ES6. Caso você tenha uma variável que não precise que seu valor seja
reatribuído, faça de &lt;code&gt;const&lt;/code&gt; a sua escolha padrão. Seu código fica mais limpo e
declarativo. Caso a reatribuíção seja necessária, como é o caso de contadores,
acumuladores e outros mecanismos de &lt;em&gt;loops&lt;/em&gt;, utilize &lt;code&gt;let&lt;/code&gt;. Também vai indicar
que a variável somente é utilizada no bloco onde ela foi declarada, e não na
função inteira.&lt;/p&gt;
&lt;p&gt;Siga o princípio de que uma variável deve representar um único conceito e torne
seu código mais legível e declarativo.&lt;/p&gt;
&lt;blockquote&gt; &lt;p&gt; Linguagens não servem somente para expressar pensamentos, mas
para possibilitar pensamentos os quais não existiriam se não fossem elas. &lt;/p&gt;
&lt;footer&gt;Bertrand Russel&lt;/footer&gt; &lt;/blockquote&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Básico #6</title>
    <link href="https://maxroecker.github.io/blog/javascript-basico-6/"/>
    <updated>2015-10-23T09:21:30Z</updated>
    <id>https://maxroecker.github.io/blog/javascript-basico-6/</id>
    <content type="html">&lt;p&gt;Já vimos o funcionamento de
&lt;a href=&quot;https://maxroecker.github.io/blog/javascript-basico-5/&quot;&gt;objetos&lt;/a&gt; e de
&lt;a href=&quot;https://maxroecker.github.io/blog/javascript-basico-4/&quot;&gt;estruturas de controle&lt;/a&gt;
em JavaScript, ambos conceitos essenciais para a aprendizagem da linguagem e
para a escrita de algoritmos. Agora, vamos aprofundar nosso entendimento sobre a
unidade de computação da linguagem JavaScript: as funções.&lt;/p&gt;
&lt;p&gt;Uma função é um trecho de código que pode ser chamado por um fluxo de execução —
incluindo por si mesma — ou por uma variável que a referencia. Quando uma função
é chamada, argumentos são passados para a função como entrada, e a função pode
retornar opcionalmente um valor qualquer.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; &lt;strong&gt;fun.ção:&lt;/strong&gt; (1) O que alguma coisa faz ou é usada
para; (2) Em matemática, uma relação o qual um elemento de um conjunto é
associado a exatamente um outro elemento de outro conjunto. (3) Em computação,
uma rotina que pode retornar um resultado. &lt;/p&gt; &lt;/aside&gt;
&lt;p&gt;Funções são extremamente úteis e podem ser utilizadas para reutilização de
código, encapsulamento e composição de dados em diversas linguagens de
programação. No entanto, o modo como funções são tratadas em JavaScript pode ser
estranha para a maioria dos desenvolvedores. Por isso, é importante ter um bom
entendimento de como funções trabalham em JavaScript, para que você possa
extrair o máximo da linguagem.&lt;/p&gt;
&lt;h2 id=&quot;declarando-e-executando-uma-funcao&quot; tabindex=&quot;-1&quot;&gt;Declarando e executando uma função &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-6/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Uma função pode ser declarada com o auxílio da palavra-chave &lt;code&gt;function&lt;/code&gt; seguido
de:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;o nome da função;&lt;/li&gt;
&lt;li&gt;a lista de parâmetros da função entre parênteses e separado por vírgulas e;&lt;/li&gt;
&lt;li&gt;As declarações que definem essa função entre um par de chaves &lt;code&gt;{…}&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Por exemplo, o código abaixo define uma função chamada &lt;code&gt;quadrado&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;quadrado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numero&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; numero &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; numero&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A função &lt;code&gt;quadrado&lt;/code&gt; tem um único parâmetro — chamado &lt;code&gt;numero&lt;/code&gt; — e é definida por
uma única declaração, que consiste em retornar o valor do parâmetro multiplicado
por ele mesmo. Entretanto, definir uma função não significa executar o código
declarado. Definir uma função significa dar um nome a um trecho de código que
será chamado quando for requisitado.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chamar uma função&lt;/strong&gt; significa realmente executar o trecho de código. Para
chamar uma função em JavaScript, você utiliza o nome da função seguido dos
argumentos de entrada entre um par de parênteses. No exemplo anterior, podemos
chamar a função &lt;code&gt;quadrado&lt;/code&gt; como segue:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;quadrado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nesta chamada, o parâmetro &lt;code&gt;numero&lt;/code&gt; da função &lt;code&gt;quadrado&lt;/code&gt; assume o valor &lt;code&gt;3&lt;/code&gt;. A
função é executada e o resultado, &lt;code&gt;9&lt;/code&gt;, é retornado da função. Para visualizar
esse resultado, vamos atribuí-lo em uma variável e mostrar no console.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; resultado &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;quadrado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resultado&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Valores primitivos, como é o caso de valores do tipo número, são passados para
funções &amp;quot;por valor&amp;quot;. Ou seja, uma cópia co valor é passada para a função quando
ela é chamada. O valor original do argumento não é alterado. Veja o exemplo
abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;somaUm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numero&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;numero&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;numero dentro da função &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; numero&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; numero &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;numero antes da função &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; numero&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;somaUm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numero&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;numero depois da função &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; numero&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A saída desse código será:&lt;/p&gt;
&lt;pre&gt;&lt;samp&gt;numero antes da função 0
numero dentro da função 1
numero depois da função 0
&lt;/samp&gt;&lt;/pre&gt;
&lt;p&gt;No entanto, objetos são passados como &amp;quot;por referência&amp;quot;. Ou seja, o mesmo objeto
é passado para dentro da função e não uma cópia dele. Dessa forma, mutar o
objeto dentro da função tem efeitos colaterais em valores fora da função. Veja:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ativar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cupom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  cupom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ativo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; cupom &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;codigo&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;000X&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;ativo&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;cupom %s - ativo: %s&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cupom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;codigo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cupom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ativo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;ativar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cupom&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;cupom %s - ativo: %s&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cupom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;codigo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cupom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ativo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A saída desse código será:&lt;/p&gt;
&lt;pre&gt;&lt;samp&gt;cupom 000X - ativo: false
cupom 000X - ativo: true&lt;/samp&gt;&lt;/pre&gt;
&lt;p&gt;Devido as características do JavaScript — mais especificamente o &lt;i lang=&quot;en&quot;&gt;hoisting&lt;/i&gt; — uma função não pode ser declarada condicionalmente.
Quando temos duas funções com o mesmo nome, há conflito de referência e isso
causa um erro. Ou seja, &lt;strong&gt;não é possível escrever um código como o abaixo&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nota &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resultado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Reprovado&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resultado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Aprovado&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;O resultado é: &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resultado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;aridade-de-funcoes-e-passagem-de-argumentos&quot; tabindex=&quot;-1&quot;&gt;Aridade de funções e passagem de argumentos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-6/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Diferente de muitas linguagens, o JavaScript não restringe a quantidade de
argumentos que a chamada da função pode receber dada a aridade da função.
Supondo o mesmo exemplo da função &lt;code&gt;quadrado&lt;/code&gt; acima, as chamadas abaixo são
completamente válidas em JavaScript:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;quadrado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numero&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; numero &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; numero&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;quadrado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 4&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;quadrado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 25&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;quadrado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → NaN&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A função &lt;code&gt;quadrado&lt;/code&gt; oficialmente aceita um argumento. Quando executamos a função
passando mais argumentos que a aridade da função, a função os ignora; Se
passamos menos argumentos que aridade da função, o JavaScript atribui
&lt;code&gt;undefined&lt;/code&gt; para os argumentos faltantes.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; A &lt;a href=&quot;https://pt.wikipedia.org/wiki/Aridade&quot;&gt;&lt;strong&gt;aridade&lt;/strong&gt;&lt;/a&gt; de uma
função é o número de parâmetros que a função recebe. Uma função de um parâmetro
é denominada unária; de dois parâmetros, binária; com três parâmetros, ternária;
e assim por diante. Caso uma função não receba parâmetros, a função é denominada
nulária. &lt;/p&gt; &lt;/aside&gt;
&lt;h2 id=&quot;funcoes-como-valores-de-primeira-classe&quot; tabindex=&quot;-1&quot;&gt;Funções como valores de primeira-classe &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-6/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Funções, em JavaScript, são
&lt;a href=&quot;ttp://c2.com/cgi/wiki/?FirstClass&quot;&gt;valores de primeira classe&lt;/a&gt; e, por isso, são
tratadas como qualquer outro valor na linguagem. Assim, funções podem ser
passadas como parâmetros ou retornadas como resultado de uma função. Funções
podem também serem atribuídas em variáveis.&lt;/p&gt;
&lt;p&gt;Além disso, toda função em JavaScript é também um objeto e tem propriedades e
métodos associados. Apesar do &lt;code&gt;typeof&lt;/code&gt; de uma função ser &lt;code&gt;&amp;quot;function&amp;quot;&lt;/code&gt;, uma
função é sempre instância de um objeto. Veja abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;quadrado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numero&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; numero &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; numero&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;informacoes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;funcao&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; funcao&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;funcao &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;funcao &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;funcao&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; funcao &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; quadrado&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;informacoes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;funcao&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O código acima terá a saída&lt;/p&gt;
&lt;pre&gt;&lt;samp&gt;function
true
true
quadrado&lt;/samp&gt;&lt;/pre&gt;
&lt;h2 id=&quot;expressoes-funcionais&quot; tabindex=&quot;-1&quot;&gt;Expressões funcionais &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-6/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Em JavaScript, a declaração de uma função pode ser retornada como um valor, ou
seja, como uma expressão funcional. Podemos atribuir a função &lt;code&gt;quadrado&lt;/code&gt; para
uma variável &lt;code&gt;potencia2&lt;/code&gt; da seguinte forma:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;potencia2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;quadrado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numero&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; numero &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; numero&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;quadrado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 4&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;potencia2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O JavaScript também permite que expressões funcionais sejam anônimas, ou seja,
não requerem um nome para serem definidas. Mais uma vez, podemos reescrever
nossa função &lt;code&gt;quadrado&lt;/code&gt; como uma expressão funcional:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;quadrado&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numero&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; numero &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; numero&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;quadrado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 36&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Apesar de ter um resultado muito semelhante, utilizar uma expressão funcional
anônima tem um significado diferente de uma declaração de função. Um resultado
interessante é que expressões funcionais podem ser &amp;quot;atribuídas condicionamente&amp;quot;,
diferente das funções declaradas. Ou seja, agora, o código abaixo é válido em
JavaScript:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; resultado&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nota &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;resultado&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Reprovado&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;resultado&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Aprovado&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;O resultado é: &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resultado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Funções anônimas são frequentemente utilizadas em JavaScript e permitem escrever
um código coeso e expressivo. Em algumas referências, funções anônimas são
chamadas apenas de &lt;em&gt;lambdas&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;funcoes-de-alta-ordem&quot; tabindex=&quot;-1&quot;&gt;Funções de alta ordem &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-6/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Por serem valores de primeira classe, as funções em JavaScript são
&lt;a href=&quot;http://c2.com/cgi/wiki?HigherOrderFunction&quot;&gt;funções de alta ordem&lt;/a&gt;. Ou seja,
podemos então passar funções como argumentos em outra função ou retornar funções
como resultado de uma função. Veja o exemplo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;multipliquePor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; dobro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;multipliquePor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; triplo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;multipliquePor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dobro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 12&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dobro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 18&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;triplo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 9&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;triplo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 12&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note que a função &lt;code&gt;multipliquePor&lt;/code&gt; pega um parâmetro &lt;code&gt;n&lt;/code&gt; e retorna uma nova
função que pega um parâmetro &lt;code&gt;x&lt;/code&gt; e que então, quando for chamada, multiplica &lt;code&gt;x&lt;/code&gt;
por &lt;code&gt;n&lt;/code&gt;. Dessa forma, podemos criar duas funções, uma que multiplica por dois,
que chamamos de &lt;code&gt;dobro&lt;/code&gt;; e uma que multiplica por três, que chamamos de
&lt;code&gt;triplo&lt;/code&gt;. Ao final, temos as chamadas da funções &lt;code&gt;dobro&lt;/code&gt; e &lt;code&gt;triplo&lt;/code&gt; para alguns
diferentes argumentos.&lt;/p&gt;
&lt;p&gt;Funções de alta ordem são extremamente úteis e muito utilizadas em JavaScript,
principalmente quando desejamos codificar em um estilo mais próximo do paradigma
funcional. Entender funções de alta ordem permite entender um dos conceitos mais
fundamentais do JavaScript: &lt;i lang=&quot;en&quot;&gt;closures&lt;/i&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusao-e-agradecimentos&quot; tabindex=&quot;-1&quot;&gt;Conclusão e agradecimentos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-6/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Nesse episódio aprendemos sobre funções, como declará-las e suas principais
características. A palavra-chave &lt;code&gt;function&lt;/code&gt; pode ser utilizada tanto em uma
declaração de função quanto em uma expressão funcional. É fundamental
compreender que funções, em JavaScript, são valores de primeira classe.&lt;/p&gt;
&lt;p&gt;Chegamos ao fim da série JavaScript Básico, mas não no fim do conteúdo da
linguagem e de suas funcionalidades. Com o conteúdo visto até aqui, você já pode
criar de programas simples e codificar algoritmos em JavaScript. Gostaria de
agradecer ao meu amigo Guilherme e minha amiga Mariana pela revisão dos textos e
que permitiram uma melhor leitura desse blog.&lt;/p&gt;
&lt;p&gt;Pretendo lançar outros textos falando sobre aspectos mais profundos mas
incrivelmente úteis do JavaScript, em termos mais técnicos tais como o processo
de &lt;i lang=&quot;en&quot;&gt;hoisting&lt;/i&gt;, &lt;i lang=&quot;en&quot;&gt;closures&lt;/i&gt;, operações binárias,
entre outros. Também quero escrever mais sobre a programação em paradigma
orientado a objetos e funcional.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Básico #5</title>
    <link href="https://maxroecker.github.io/blog/javascript-basico-5/"/>
    <updated>2015-10-15T17:03:34Z</updated>
    <id>https://maxroecker.github.io/blog/javascript-basico-5/</id>
    <content type="html">&lt;p&gt;Anteriormente, aprendemos como
&lt;a href=&quot;https://maxroecker.github.io/blog/javascript-basico-4/&quot;&gt;controlar a execução do fluxo do código JavaScript através de declarações&lt;/a&gt;.
Também vimos
&lt;a href=&quot;https://maxroecker.github.io/blog/javascript-basico-3/&quot;&gt;como atribuir valores primitivos a variáveis e como manipulá-los no código&lt;/a&gt;.
Entretanto, somente arranhamos a superfície das funcionalidades que a linguagem
oferece. Nessa publicação, vamos entender melhor sobre os objetos.&lt;/p&gt;
&lt;h2 id=&quot;propriedades&quot; tabindex=&quot;-1&quot;&gt;Propriedades &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-5/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Todo valor em JavaScript — exceto o &lt;code&gt;null&lt;/code&gt; e o &lt;code&gt;undefined&lt;/code&gt; — possui propriedades
que podem ser acessadas por uma chave por meio do operador &lt;code&gt;.&lt;/code&gt;. Propriedades são
valores que recebem um nome no objeto. Veja o exemplo abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;javascript&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lenght&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 10&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
num&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toFixed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → function toFixed&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A propriedade &lt;code&gt;lenght&lt;/code&gt; armazena um número que representa a quantidade de
caracteres que essa string possui, ou seja, o comprimento da cadeia. Já a
propriedade &lt;code&gt;toFixed&lt;/code&gt; é uma referência de uma função. Em JavaScript, funções são
tratadas como valores e, por isso, podem ser atribuídas em proprieades. É comum
chamar funções atribuídas em propriedades como &lt;strong&gt;métodos&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;objetos&quot; tabindex=&quot;-1&quot;&gt;Objetos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-5/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Além de valores do tipo primitivo, o JavaScript possui também valores do tipo
&lt;strong&gt;Objeto&lt;/strong&gt;. Objetos são valores que permitem o agrupamento de outros valores
identificados por meio de uma chave. Em sua essência, objetos são
&lt;a href=&quot;https://en.wikipedia.org/wiki/Associative_array&quot;&gt;arranjos associativos&lt;/a&gt; —
também chamados de mapas, tabelas de símbolos ou dicionários — onde cada chave é
uma string única que apontam para outros valores.&lt;/p&gt;
&lt;figure&gt;
  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 475 250&quot;&gt;
  &lt;defs&gt;
    &lt;marker id=&quot;a&quot; orient=&quot;auto&quot; overflow=&quot;visible&quot; refX=&quot;0&quot; refY=&quot;0&quot;&gt;
      &lt;path fill=&quot;var(--tx-2)&quot; fill-rule=&quot;evenodd&quot; stroke=&quot;var(--tx-2)&quot; stroke-linejoin=&quot;round&quot; stroke-width=&quot;.38&quot; d=&quot;M-5.23-2.42 1.32-.01-5.23 2.4a4.1 4.1 0 0 0 0-4.82z&quot;&gt;&lt;/path&gt;
    &lt;/marker&gt;
    &lt;marker id=&quot;b&quot; orient=&quot;auto&quot; overflow=&quot;visible&quot; refX=&quot;0&quot; refY=&quot;0&quot;&gt;
      &lt;path fill=&quot;var(--tx-3)&quot; fill-rule=&quot;evenodd&quot; stroke=&quot;var(--tx-3)&quot; stroke-linejoin=&quot;round&quot; stroke-width=&quot;.38&quot; d=&quot;M-5.23-2.42 1.32-.01-5.23 2.4a4.1 4.1 0 0 0 0-4.82z&quot;&gt;&lt;/path&gt;
    &lt;/marker&gt;
    &lt;marker id=&quot;c&quot; orient=&quot;auto&quot; overflow=&quot;visible&quot; refX=&quot;0&quot; refY=&quot;0&quot;&gt;
      &lt;path fill=&quot;var(--tx-1)&quot; fill-rule=&quot;evenodd&quot; stroke=&quot;var(--tx-1)&quot; stroke-linejoin=&quot;round&quot; stroke-width=&quot;.38&quot; d=&quot;M-5.23-2.42 1.32-.01-5.23 2.4a4.1 4.1 0 0 0 0-4.82z&quot;&gt;&lt;/path&gt;
    &lt;/marker&gt;
  &lt;/defs&gt;
  &lt;rect width=&quot;475&quot; height=&quot;250&quot; fill=&quot;none&quot; rx=&quot;0&quot; ry=&quot;0&quot;&gt;&lt;/rect&gt;
  &lt;path fill=&quot;var(--bg-2)&quot; stroke=&quot;var(--bd-2)&quot; d=&quot;M211 26.01v198H33v-198Z&quot;&gt;&lt;/path&gt;
  &lt;text x=&quot;183.16&quot; y=&quot;-120.81&quot; fill=&quot;var(--tx-1)&quot; font-family=&quot;var(--font-code)&quot; font-size=&quot;16&quot; transform=&quot;rotate(90)&quot;&gt;
    ...
  &lt;/text&gt;
  &lt;path fill=&quot;none&quot; stroke=&quot;var(--bd-2)&quot; d=&quot;M162 38.11h38v38h-38zm-118 0h118v38H44z&quot;&gt;&lt;/path&gt;
  &lt;circle cx=&quot;181&quot; cy=&quot;57.1&quot; r=&quot;6.69&quot; fill=&quot;var(--tx-2)&quot;&gt;&lt;/circle&gt;
  &lt;path fill=&quot;none&quot; stroke=&quot;var(--tx-2)&quot; stroke-width=&quot;2&quot; marker-end=&quot;url(#a)&quot; d=&quot;M179.76 57.81s28.04-4.11 41.16 0c22.3 7 27.59 41.26 48.87 50.34 15.44 6.58 50.13 0 50.13 0&quot;&gt;&lt;/path&gt;
  &lt;rect width=&quot;120.02&quot; height=&quot;35&quot; x=&quot;323.03&quot; y=&quot;89.63&quot; fill=&quot;var(--tx-2)&quot;&gt;&lt;/rect&gt;
  &lt;text x=&quot;55&quot; y=&quot;60.78&quot; fill=&quot;var(--tx-1)&quot; font-family=&quot;var(--font-code)&quot; font-size=&quot;12&quot;&gt;
    propriedade#1
  &lt;/text&gt;
  &lt;text x=&quot;355.24&quot; y=&quot;112.12&quot; fill=&quot;var(--bg-1)&quot; font-family=&quot;var(--font-code)&quot; font-size=&quot;13&quot;&gt;
    valor#1
  &lt;/text&gt;
  &lt;path fill=&quot;none&quot; stroke=&quot;var(--bd-2)&quot; d=&quot;M162 88.11h38v38h-38zm-118 0h118v38H44z&quot;&gt;&lt;/path&gt;
  &lt;circle cx=&quot;181&quot; cy=&quot;107.1&quot; r=&quot;6.69&quot; fill=&quot;var(--tx-3)&quot;&gt;&lt;/circle&gt;
  &lt;path fill=&quot;none&quot; stroke=&quot;var(--tx-3)&quot; stroke-width=&quot;2&quot; marker-end=&quot;url(#b)&quot; d=&quot;M183.28 107.48s30.42-14.78 57.5-5 47.44 35.3 47.44 35.3&quot;&gt;&lt;/path&gt;
  &lt;rect width=&quot;120.02&quot; height=&quot;35&quot; x=&quot;262.89&quot; y=&quot;140.32&quot; fill=&quot;var(--tx-3)&quot;&gt;&lt;/rect&gt;
  &lt;text x=&quot;55&quot; y=&quot;110.78&quot; fill=&quot;var(--tx-1)&quot; font-family=&quot;var(--font-code)&quot; font-size=&quot;12&quot;&gt;
    propriedade#2
  &lt;/text&gt;
  &lt;text x=&quot;295.1&quot; y=&quot;162.81&quot; fill=&quot;var(--bg-1)&quot; font-family=&quot;var(--font-code)&quot; font-size=&quot;13&quot;&gt;
    valor#2
  &lt;/text&gt;
  &lt;path fill=&quot;none&quot; stroke=&quot;var(--bd-2)&quot; d=&quot;M162 138.11h38v38h-38zm-118 0h118v38H44z&quot;&gt;&lt;/path&gt;
  &lt;text x=&quot;55&quot; y=&quot;160.78&quot; fill=&quot;var(--tx-1)&quot; font-family=&quot;var(--font-code)&quot; font-size=&quot;12&quot;&gt;
    propriedade#3
  &lt;/text&gt;
  &lt;circle cx=&quot;181&quot; cy=&quot;157.1&quot; r=&quot;6.69&quot; fill=&quot;var(--tx-1)&quot;&gt;&lt;/circle&gt;
  &lt;path fill=&quot;none&quot; stroke=&quot;var(--tx-1)&quot; stroke-width=&quot;2&quot; marker-end=&quot;url(#c)&quot; d=&quot;M180.07 156.05s34.75-3.83 62.85-23.57c28.1-19.74 43.82-57.26 43.82-57.26&quot;&gt;&lt;/path&gt;
  &lt;rect width=&quot;120.02&quot; height=&quot;35&quot; x=&quot;259.36&quot; y=&quot;37.79&quot; fill=&quot;var(--tx-1)&quot;&gt;&lt;/rect&gt;
  &lt;text x=&quot;291.57&quot; y=&quot;60.28&quot; fill=&quot;var(--bg-1)&quot; font-family=&quot;var(--font-code)&quot; font-size=&quot;13&quot;&gt;
    valor#3
  &lt;/text&gt;
&lt;/svg&gt;
  &lt;figcaption&gt;
    Em JavaScript, um objeto é um conjunto de vários pares de chave-valor. Cada
    chave é única no objeto e aponta para somente um valor.
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;declarando-objetos&quot; tabindex=&quot;-1&quot;&gt;Declarando objetos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-5/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Em JavaScript, os objetos normalmente são declarados através do literal objeto
&lt;code&gt;{…}&lt;/code&gt;, que contém os pares de chave-valor do objeto são separadas por vírgulas.
Desde o ECMAScript 2015,
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas#Objects&quot;&gt;a última propriedade do objeto pode também ser sucedida de uma vírgula&lt;/a&gt;.
As chaves do objeto podem ter qualquer valor, mas seguem as mesmas regras de
nomes para variáveis.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; passaro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Corruíra&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;nomeCientifico&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Troglodytes musculus&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;acessando-as-propriedades&quot; tabindex=&quot;-1&quot;&gt;Acessando as propriedades &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-5/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Como qualquer outro valor, você pode acessar as propriedades de um objeto com o
operador &lt;code&gt;.&lt;/code&gt;. Veja a continuação do exemplo anterior:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;passaro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nome&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Corruíra&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;passaro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nomeCientifico&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Troglodytes musculus&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você também pode atribuir valores para as propriedades da mesma forma como feito
com variáveis.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;passaro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nome &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bem-te-vi&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
passaro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nomeCientifico &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Pitangus sulphuratus&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;passaro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nome&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Bem-te-vi&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;passaro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nomeCientifico&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Pitangus sulphuratus&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;É possível também utilizar strings como chave de objetos. Utilizar strings como
chave permite a vantagem de escrever chaves que o nome não segue as regras dos
identificadores de variáveis. Ou seja, você pode ter uma chave começando com
número ou contendo espaço, por exemplo. No entanto, chaves definidas por strings
possuem sintaxe um pouco diferente, veja abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; passaro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string-property property&quot;&gt;&#39;nome&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Trinca-ferro&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string-property property&quot;&gt;&#39;nome cientifico&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Saltator similis&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Há também diferença ao acessar propriedades que a chave que não segue as regras
de identificadores de variáveis. Nesses casos, é necessário utilizar o operador
de acesso &lt;code&gt;[…]&lt;/code&gt;. Veja os acessos do objeto do código anterior abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;passaro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nome&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Trinca-ferro&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;passaro&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;nome&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Trinca-ferro&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;passaro&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;nome cientifico&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Saltator similis&lt;/span&gt;

passaro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nome &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Tico-tico&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
passaro&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;nome cientifico&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Zonotrichia capensis&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;passaro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nome&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Tico-tico&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;passaro&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;nome&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Zonotrichia capensis&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;passaro&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;nome cientifico&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Saltator similis&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;adicionando-propriedades&quot; tabindex=&quot;-1&quot;&gt;Adicionando propriedades &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-5/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Por serem arranjos associativos, os objetos permite a inserção de propriedades
após a declaração. Assim, podemos reescrever o exemplo anterior da seguinte
forma:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; passaro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Objeto sem propriedades declaradas&lt;/span&gt;
passaro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nome &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Sabiá-laranjeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
passaro&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;nome cientifico&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Turdus rufiventris&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;passaro&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;nome&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Sabiá-laranjeira&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;passaro&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;nome cientifico&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Turdus rufiventris&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;verificando-a-existencia-de-uma-propriedade&quot; tabindex=&quot;-1&quot;&gt;Verificando a existência de uma propriedade &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-5/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Quando acessamos uma propriedade que não existe no objeto, recebemos como
resultado &lt;code&gt;undefined&lt;/code&gt;. Agora, se uma propriedade existe seu valor é &lt;code&gt;undefined&lt;/code&gt;,
acessá-la também resulta em &lt;code&gt;undefined&lt;/code&gt;. Verificar se o valor de uma propriedade
é &lt;code&gt;undefined&lt;/code&gt; não é garantia que a propriedade não exista no objeto.&lt;/p&gt;
&lt;p&gt;Para verificar se uma propriedade existe em um objeto, utilizamos o operador
&lt;code&gt;in&lt;/code&gt;, que retorna &lt;code&gt;true&lt;/code&gt; caso a chave a esquerda exista no objeto ou &lt;code&gt;false&lt;/code&gt;
caso contrário.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; chave &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cor&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chave &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; passaro&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → false&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;passaro&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;chave&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → undefined&lt;/span&gt;

passaro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Amarelo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chave &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; passaro&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;passaro&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;chave&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Amarelo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;removendo-propriedades&quot; tabindex=&quot;-1&quot;&gt;Removendo propriedades &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-5/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;O operador &lt;code&gt;delete&lt;/code&gt; remove a propriedade do objeto.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;cor&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; passaro&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; passaro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cor&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;cor&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; passaro&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;iterando-sobre-as-propriedades-com-for-in&quot; tabindex=&quot;-1&quot;&gt;Iterando sobre as propriedades com &lt;code&gt;for…in&lt;/code&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-5/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;É possível também iterar em todas as chaves de um objeto por meio da declaração
&lt;code&gt;for…in&lt;/code&gt;. A cada iteração, uma das chaves é visitada pelo laço. A declaração
&lt;code&gt;for…in&lt;/code&gt; itera sobre as propriedades enumeráveis de um objeto em uma ordem
arbitrária. Veja:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; passaro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string-property property&quot;&gt;&#39;nome&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Patativa&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string-property property&quot;&gt;&#39;nome cientifico&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Sporophila leucoptera&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string-property property&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string-property property&quot;&gt;&#39;extinct&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; chave &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; passaro&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Propriedade %s - Tipo: %s&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; chave&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; passaro&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;chave&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O resultado do código acima pode ser igual ao resultado escrito abaixo, ou ter
uma ordem diferente.&lt;/p&gt;
&lt;pre&gt;
&lt;samp&gt;
  Propriedade extinct - Tipo: boolean
  Propriedade nome cientifico - Tipo: string
  Propriedade id - Tipo: number
  Propriedade nome - Tipo: string
&lt;/samp&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;diferencas-entre-valores-primitivos-e-objetos&quot; tabindex=&quot;-1&quot;&gt;Diferenças entre valores primitivos e objetos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-5/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;No JavaScript, objetos e valores primitivos são categorizados da seguinte forma:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Valores primitivos são valores do tipo booleano, número, string ou os valores
&lt;code&gt;null&lt;/code&gt; e &lt;code&gt;undefined&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Qualquer outro valor é um objeto.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A grande diferença entre os valores primitivos e objetos é o modo como eles são
comparados e a mutabilidade de seus conteúdos.&lt;/p&gt;
&lt;h3 id=&quot;comparacao&quot; tabindex=&quot;-1&quot;&gt;Comparação &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-5/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Os valores primitivos são comparados através do seu “conteúdo”, ou seja, se dois
valores primitivos tem o mesmo conteúdo, eles são iguais.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; tres &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → false&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tres &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;xyz&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;xyz&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Já objetos são comparados através da sua referência, cada valor tem sua
identidade única e é somente igual a si mesmo. Objetos com o mesmo conteúdo não
são considerados iguais.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

obj1 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; obj2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → false&lt;/span&gt;
obj1 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; obj1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;

obj1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; obj2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Atribuímos a referência de obj2 em obj1&lt;/span&gt;

obj1 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; obj2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;mutabilidade&quot; tabindex=&quot;-1&quot;&gt;Mutabilidade &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-5/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Valores primitivos são considerados &lt;strong&gt;imutáveis&lt;/strong&gt;, ou seja, é impossível mudar
uma propriedade ou o seu valor para esses tipos de dados. Toda vez que você os
manipula, na verdade você gera novos valores a partir dos antigos, mesmo que
sejam idênticos.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;string&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lenght&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 6&lt;/span&gt;

a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lenght &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lenght&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 6&lt;/span&gt;

a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;outra string&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lenght&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 12&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por outro lado, objetos são &lt;strong&gt;mutáveis&lt;/strong&gt;. Alterar, adicionar ou remover uma
propriedade de um objeto não gera um novo objeto a partir do antigo. O mesmo
objeto modificado. Ou seja, quando atribuímos objetos para variáveis ou para
propriedades de objetos, na verdade estamos indicando somente uma referência
para o objeto. Se duas referências diferentes direcionam a um mesmo valor,
alterar o valor reflete em mudanças para todos os objetos que “apontam” para
ele.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; passaro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Patativa&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; ave &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; passaro&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ave&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nome&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Patativa&lt;/span&gt;

ave&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nome &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Patativa-do-campo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;passaro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nome&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Patativa-do-campo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusao&quot; tabindex=&quot;-1&quot;&gt;Conclusão &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-5/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Objetos fornecem modos de agrupar vários valores em um só &amp;quot;conjunto&amp;quot;. É uma das
estruturas de dados mais básicas do JavaScript. Quase todo elemento dentro da
linguagem é um objeto.&lt;/p&gt;
&lt;p&gt;Apesar de possuírem o mesmo nome, objetos não devem ser confundidos com o
conceito de objeto em programação orientada a objetos, definido como
&lt;a href=&quot;https://pt.wikipedia.org/wiki/Objeto_(ci%C3%AAncia_da_computa%C3%A7%C3%A3o)&quot;&gt;instância de uma classe&lt;/a&gt;.
Como dito anteriormente, objetos em Javascript são arranjos associativos
dinâmicos.&lt;/p&gt;
&lt;blockquote&gt; &lt;p&gt; As maioria das pessoas acredita que a ciência da computação é
uma arte para gênios. Na realidade é o oposto. São somente muitas pessoas
desenvolvendo coisas umas sobre as outras, como um muro de pequenas pedras. &lt;/p&gt;
&lt;footer&gt; Donald Knuth &lt;/footer&gt; &lt;/blockquote&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Básico #4</title>
    <link href="https://maxroecker.github.io/blog/javascript-basico-4/"/>
    <updated>2015-09-15T16:25:51Z</updated>
    <id>https://maxroecker.github.io/blog/javascript-basico-4/</id>
    <content type="html">&lt;p&gt;No &lt;a href=&quot;http://maxroecker.github.io/blog/javascript-basico-3/&quot;&gt;artigo anterior&lt;/a&gt;
vimos como criar variáveis e atribuir valores à elas. Também foi mostrado alguns
atalhos de atribuição e formas de modificar os valores das variáveis. Nesse
texto vamos aumentar nossa compreensão de códigos em JavaScript e entender as
declarações de controle que a linguagem possui.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; &lt;strong&gt;de·cla·ra·ção:&lt;/strong&gt; (1) Ação ou efeito de declarar; (2)
Afirmação formal; (3) Asserção explícita; &lt;/p&gt; &lt;/aside&gt;
&lt;p&gt;A partir de agora nossos códigos começam a ficar mais extensos, contendo várias
linhas. O console JavaScript dos navegadores não é adequado para essas
situações. Salvar os códigos em arquivos JavaScript e executá-los no Node.js é
uma boa opção. Para executar, por exemplo, um arquivo chamado &lt;code&gt;example.js&lt;/code&gt; no
Node, você pode acessar o diretório do arquivo no terminal e digitar:&lt;/p&gt;
&lt;pre&gt;&lt;kbd&gt;node example.js&lt;/kbd&gt;&lt;/pre&gt;
&lt;h2 id=&quot;expressoes-e-declaracoes&quot; tabindex=&quot;-1&quot;&gt;Expressões e Declarações &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-4/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Expressões&lt;/strong&gt; são declarações de código que produzem um valor. Como visto
anteriormente, nós utilizamos expressões a todo momento no JavaScript: uma
atribuição é uma expressão, uma comparação é uma expressão, uma operação
aritmética é uma expressão, entre outras.&lt;/p&gt;
&lt;p&gt;Todavia, somente expressões não resolvem os problemas que precisamos lidar
quando estamos codificando. Por exemplo, muitas vezes queremos que um fragmento
do código seja executado dada uma condição; ou ainda, queremos que um trecho de
código seja executado múltiplas vezes. Para isso nós utilizamos as declarações
de controle de fluxo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Declarações&lt;/strong&gt; de controle de fluxo, também chamadas de &lt;i lang=&quot;en&quot;&gt;statements&lt;/i&gt;, são palavras chaves que descrevem o comportamento do
código. O JavaScript possui um conjunto compacto de declarações que podem ser
combinadas para adicionar complexidade o seu código. Expressões também são
declarações, mas possuem a diferença de que sempre retornam um valor.&lt;/p&gt;
&lt;h2 id=&quot;declaracao-de-bloco&quot; tabindex=&quot;-1&quot;&gt;Declaração de bloco &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-4/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Uma das declarações mais básicas da linguagem é a de definição de bloco,
utilizada para agrupar um conjunto de outras declarações. Todo bloco é
delimitado por um par de chaves &lt;code&gt;{…}&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  [declaração 1]
  [declaração 2]
  [declaração 3]
  […]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Importante:&lt;/strong&gt; Diferente das linguagens C ou Java, no JavaScript, um bloco não
define o escopo das variáveis declaradas com &lt;code&gt;var&lt;/code&gt;. O escopo em JavaScript está
intimamente ligado com a declaração de funções. Vamos aprofundar o assunto de
escopo de variáveis em artigos futuros, mas veja o exemplo abaixo para entender
melhor:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 0&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 1&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A variável &lt;code&gt;a&lt;/code&gt; não é oculta pela segunda declaração de uma variável com mesmo
nome. Ambas as declarações são a mesma variável. Por isso, após a saída do
bloco, o valor alterado dentro do bloco é mantido.&lt;/p&gt;
&lt;h2 id=&quot;declaracoes-condicionais&quot; tabindex=&quot;-1&quot;&gt;Declarações condicionais &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-4/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Uma declaração condicional é uma declaração de controle de fluxo que executa ou
não um trecho de código dependendo de uma condição booleana a ser avaliada.&lt;/p&gt;
&lt;h3 id=&quot;condicional-unica-if-else&quot; tabindex=&quot;-1&quot;&gt;Condicional única &lt;code&gt;if … else&lt;/code&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-4/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A declaração &lt;code&gt;if&lt;/code&gt; tem o comportamento de executar a próxima declaração ou bloco
de declarações, se a condição avaliada seja &lt;code&gt;true&lt;/code&gt;. Um &lt;code&gt;if&lt;/code&gt; pode ser pareado com
um &lt;code&gt;else&lt;/code&gt; e assim executar a declaração que o sucede se o valor da condição for
&lt;code&gt;false&lt;/code&gt;. Você também pode encadear vários &lt;code&gt;if&lt;/code&gt;, que serão testados um de cada
vez. Veja o exemplo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;condicao1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Condição 1 verdadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;condicao2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Bloco de declarações&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Condição 2 também verdadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Condição 2 falsa&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;condicao3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Condição 3 verdadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;condicao4&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Condição 3 é falsa e condição 4 verdadeira&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Condição 3 e 4 são falsas&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;falsy-e-truthy&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Falsy&lt;/em&gt; e &lt;em&gt;Truthy&lt;/em&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-4/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Nas declarações condicionais, a condição sempre avaliada a expressão em &lt;code&gt;true&lt;/code&gt;
ou &lt;code&gt;false&lt;/code&gt;. No entanto, mesmo que a expressão não seja do tipo booleano, o
JavaScript, em sua coersão de tipos, trata alguns valores especiais e os avalia
como &lt;code&gt;false&lt;/code&gt; quando são utilizados em um contexto booleano. Esses valores são
chamados de &lt;em&gt;falsy&lt;/em&gt;. São eles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Valores indefinidos &lt;code&gt;undefined&lt;/code&gt; e &lt;code&gt;null&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Números &lt;code&gt;0&lt;/code&gt; e &lt;code&gt;NaN&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;String vazia &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; e &lt;code&gt;&#39;&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Qualquer outro valor da linguagem JavaScript, incluindo objetos, são avaliados
como &lt;code&gt;true&lt;/code&gt; e por são chamados de &lt;em&gt;truthy&lt;/em&gt;. Por isso é preciso atenção especial
com valores primitivos &lt;code&gt;true&lt;/code&gt; e &lt;code&gt;false&lt;/code&gt; e com instâncias de Boolean. Veja o
exemplo abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;A condição é falsa, pois p é do tipo boolean&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;A condição é verdadeira pois c é um objeto.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;condicional-multipla-switch-case&quot; tabindex=&quot;-1&quot;&gt;Condicional múltipla &lt;code&gt;switch … case&lt;/code&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-4/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;O &lt;code&gt;switch&lt;/code&gt; é uma declaração condicional poderosa e complexa que permite que o
desenvolvedor escreva uma expressão de condição combine uma expressão com um
valor enumerado. Se houver combinação, o &lt;code&gt;switch&lt;/code&gt; é ativado e executa as
declarações que seguem. Sua sintaxe pode ser resumida em:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;switch ([expressão]) {
  case [expressão1]:
    [declaração]
  case [expressão2]:
    [declaração]
  …
  default:
    [declaração]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O &lt;code&gt;switch&lt;/code&gt; possui um mecanismo de &lt;i lang=&quot;en&quot;&gt;fall-through&lt;/i&gt;, ou seja, a
partir do momento que a expressão combina com um valor, todas as próximas
declarações são executadas também. Veja no exemplo abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; temperatura &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;temperatura&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Temperatura: 0 graus&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Temperatura: 20 graus&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Temperatura: 30 graus&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Temperatura: acima de 30 graus&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; clima &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Nublado&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;clima&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Sol&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hoje está um dia de sol&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Nublado&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hoje o céu está nublado&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Chuva&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hoje está chuvoso&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Clima não informado&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos ver a saída desse código abaixo:&lt;/p&gt;
&lt;pre&gt;&lt;samp&gt;Temperatura: 20 graus
Temperatura: 30 graus
Temperatura: acima de 30 graus
Hoje o céu está nublado
Hoje está chuvoso
Clima não informado&lt;/samp&gt;&lt;/pre&gt;
&lt;p&gt;O JavaScript, ao se deparar com uma declaração &lt;code&gt;switch&lt;/code&gt; primeiramente avalia a
expressão de condição e inicia uma cadeia de busca de rótulos que combinem com a
condição. Caso houver combinação, as declarações associadas a ele são
executadas. Além disso, o mecanismo de &lt;i lang=&quot;en&quot;&gt;fall-through&lt;/i&gt; também é
ativado. Assim, todas as declarações abaixo do valor combinado também são
executadas, inclusive a declaração &lt;code&gt;default&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Caso você não queira que o mecanismo de &lt;i lang=&quot;en&quot;&gt;fall-through&lt;/i&gt; tenha
efeito, você pode utilizar a declaração &lt;code&gt;break&lt;/code&gt; que força a saída do fluxo do
&lt;code&gt;switch&lt;/code&gt;. Veja o mesmo código anterior utilizando o &lt;code&gt;break&lt;/code&gt; para cada uma das
condições:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; temperatura &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;temperatura&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Temperatura: 0 graus&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Temperatura: 20 graus&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Temperatura: 30 graus&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Temperatura: acima de 30 graus&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; clima &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Nublado&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;clima&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Sol&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hoje está um dia de sol&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Nublado&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hoje o céu está nublado&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Chuva&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hoje está chuvoso&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Clima não informado&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Que vai ter, como esperado, a saída:&lt;/p&gt;
&lt;pre&gt;&lt;samp&gt;Temperatura: 20 graus
Hoje o céu está nublado&lt;/samp&gt;&lt;/pre&gt;
&lt;p&gt;Por utilidade, o &lt;code&gt;default&lt;/code&gt; é sempre colocado ao final do bloco, mas não precisa
necessariamente ser assim. O efeito colateral de colocar o &lt;code&gt;default&lt;/code&gt; antes do
final é que, por ele ativar o mecanismo de &lt;i lang=&quot;en&quot;&gt;fall-through&lt;/i&gt;,
qualquer declaração abaixo também será executada, o que é raramente desejado.&lt;/p&gt;
&lt;h2 id=&quot;declaracoes-de-laco&quot; tabindex=&quot;-1&quot;&gt;Declarações de laço &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-4/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Declarações de laço são utilizadas para executar código repetido. Há três
principais declarações de laço em JavaScript: &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, e &lt;code&gt;do … while&lt;/code&gt;.
Também é possível dar rótulos para esses laços e localizá-los através de um nome
com as declarações &lt;code&gt;label&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt; e &lt;code&gt;continue&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;laco-condicional-simples-while&quot; tabindex=&quot;-1&quot;&gt;Laço condicional simples &lt;code&gt;while&lt;/code&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-4/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A declaração &lt;code&gt;while&lt;/code&gt;, a mais simples das declarações de laço, executa a próxima
declaração enquanto o valor da expressão avaliada for &lt;code&gt;true&lt;/code&gt;. Se a expressão for
&lt;code&gt;false&lt;/code&gt;, o laço para de ser executado e o fluxo segue para a próxima declaração
após o laço. A expressão de condição é sempre testada antes das declarações
serem executadas. Para fazer laços infinitos, ou seja, laços que nunca param,
basta colocar a condição como &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Vamos calcular &lt;math display=&quot;inline&quot;&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;/math&gt; utilizando o &lt;code&gt;while&lt;/code&gt;, veja o código abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; resultado &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; expoente &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expoente &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  resultado &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; resultado &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  expoente&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resultado&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 1024&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;laco-condicional-simples-do-while&quot; tabindex=&quot;-1&quot;&gt;Laço condicional simples &lt;code&gt;do…while&lt;/code&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-4/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A declaração &lt;code&gt;do…while&lt;/code&gt; tem um comportamento parecido com o &lt;code&gt;while&lt;/code&gt;: executa uma
enquanto uma condição booleana é &lt;code&gt;true&lt;/code&gt;. A diferença entre o &lt;code&gt;while&lt;/code&gt; e o
&lt;code&gt;do…while&lt;/code&gt; é a ordem de avaliação da expre ssão da condição em relação a
declaração. Enquanto no &lt;code&gt;while&lt;/code&gt;, se a expressão for &lt;code&gt;false&lt;/code&gt;, a declaração não
chega nem a ser executada, para o &lt;code&gt;do…while&lt;/code&gt;, a declaração é sempre executada ao
menos uma vez, indepentende da expressão ser &lt;code&gt;true&lt;/code&gt; ou &lt;code&gt;false&lt;/code&gt;. Laços infinitos
também podem ser feitos bastando colocar a condição como &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Usando o mesmo exemplo anterior, vamos calcular &lt;math display=&quot;inline&quot;&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;/math&gt; utilizando o
&lt;code&gt;do … while&lt;/code&gt;, veja o código abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; resultado &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; expoente &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  resultado &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; resultado &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  expoente &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expoente &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resultado&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 1024&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;lacos-completos-com-for&quot; tabindex=&quot;-1&quot;&gt;Laços completos com &lt;code&gt;for&lt;/code&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-4/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Um laço &lt;code&gt;for&lt;/code&gt; também repete a próxima declaração até que a condição dada
avaliada como &lt;code&gt;false&lt;/code&gt;. Porém, junto com a condição, ela carrega outras duas
declarações: a &lt;strong&gt;inicialização&lt;/strong&gt; e o &lt;strong&gt;passo&lt;/strong&gt;. Um &lt;code&gt;for&lt;/code&gt;, ao ser executado, faz
os seguintes passos ordenadamente:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Executa a inicialização&lt;/li&gt;
&lt;li&gt;Se a condição é &lt;code&gt;true&lt;/code&gt;, executa a declaração correspondente; se for &lt;code&gt;false&lt;/code&gt;,
sai do laço sem executar a declaração nem o passo;&lt;/li&gt;
&lt;li&gt;Executa o passo e volta ao item número 2.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A inicialização é normalmente utilizada para atribuir valores iniciais às
variáveis de controle. Já o passo, indica qual o ritmo que o &lt;code&gt;for&lt;/code&gt; deve ter.
Lembre-se, como a inicialização e o passo são declarações, podem ser vazias
também para criar laços infinitos.&lt;/p&gt;
&lt;p&gt;Vamos ver o mesmo exemplo de cálculo de &lt;math display=&quot;inline&quot;&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;/math&gt; escrito com &lt;code&gt;for&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; resultado &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; expoente &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; expoente &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; expoente &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  resultado &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; resultado &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resultado&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 1024&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja que a variável &lt;strong&gt;expoente&lt;/strong&gt; foi declarada na inicialização do laço, e o seu
passo é dado de 1 em 1.&lt;/p&gt;
&lt;h3 id=&quot;declaracoes-de-rotulo-e-quebra-de-fluxo&quot; tabindex=&quot;-1&quot;&gt;Declarações de rótulo e quebra de fluxo &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-4/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;O JavaScript permite a criação de rótulos que identificam uma declaração.
Qualquer declaração pode ser rotulada, porém esse recurso é mais utilizada em
laços aninhados. Dessa forma, você pode interromper a execução de laços
aninhados específicos de forma declarativa.&lt;/p&gt;
&lt;h4 id=&quot;declaracoes-de-rotulo&quot; tabindex=&quot;-1&quot;&gt;Declarações de rótulo &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-4/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Declaração de rotulação que marca uma posição em seu código. O rótulo segue as
mesmas regras que nomes dados para variáveis. Dada pela sintaxe:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[rótulo]: [declaração]&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;quebra-de-fluxo-com-break&quot; tabindex=&quot;-1&quot;&gt;Quebra de fluxo com &lt;code&gt;break&lt;/code&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-4/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Como já vimos no exemplo do &lt;code&gt;switch&lt;/code&gt;, a declaração &lt;code&gt;break&lt;/code&gt; sem um rótulo
interrompe a execução da declaração atual. Em caso de laços, a declaração
&lt;code&gt;break&lt;/code&gt; faz que o laço atual pare de ser executado imediatamente e continue a
execução a partir da próxima declaração após o laço. Podemos utilizar o &lt;code&gt;break&lt;/code&gt;
acompanhado de um &lt;code&gt;label&lt;/code&gt;, assim quando execução é interrompida, ela inicia a
partir da primeira declaração após o rótulo. Sua sintaxe é simples:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;break
break [rótulo]&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;quebra-de-fluxo-com-continue&quot; tabindex=&quot;-1&quot;&gt;Quebra de fluxo com &lt;code&gt;continue&lt;/code&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-4/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A declaração &lt;code&gt;continue&lt;/code&gt; também quebra o fluxo de execução, mas só pode ser
utilizado em laços. Enquanto o &lt;code&gt;break&lt;/code&gt; para a execução do laço, o &lt;code&gt;continue&lt;/code&gt;
quebra a atual iteração do laço e inicia uma nova. Ou seja, faz com que a
condição seja testada novamente e, no caso do &lt;code&gt;for&lt;/code&gt;, o passo seja executado
também. Quando acompanhado de um rótulo, o &lt;code&gt;continue&lt;/code&gt; tem o mesmo comportamento,
mas para o laço rotulado. A sintaxe é&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;continue
continue [rótulo]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O exemplo abaixo é um modo ruim e pouco eficiente de exibir os naturais menores
que 100 — mas auxilia a compreensão do &lt;code&gt;continue&lt;/code&gt; e &lt;code&gt;break&lt;/code&gt; junto a um rótulo
mostrados.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token literal-property property&quot;&gt;lacoExterno&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt; lacoExterno&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt; lacoExterno&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusao&quot; tabindex=&quot;-1&quot;&gt;Conclusão &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-4/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Declarações são os blocos de construção da linguagem. Utilizar declarações em
sequência dá ao seu código novas maneiras de ser executado, permitindo
interferir no fluxo com que as instruções são executadas de acordo com as
condições que você desejar. Já os valores, que também são declarações, sempre
resultam um valor e podem ser utilizados em variáveis e também em outras
declarações.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Introdução ao Node.js</title>
    <link href="https://maxroecker.github.io/blog/introducao-ao-nodejs/"/>
    <updated>2015-09-14T15:45:25Z</updated>
    <id>https://maxroecker.github.io/blog/introducao-ao-nodejs/</id>
    <content type="html">&lt;p&gt;O &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;, popularmente conhecido apenas como Node, é um
ambiente de execução JavaScript que não acompanha um navegador. O Node utiliza o
&lt;a href=&quot;https://developers.google.com/v8/&quot;&gt;V8&lt;/a&gt; como motor de execução, o mesmo
utilizado pelo navegador Google Chrome. O Node também possui um sistema
gerenciador de pacotes, o &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt;, que contém alguns
milhares de módulos open-source para disponíveis em repositório.&lt;/p&gt;
&lt;p&gt;Utilizando os mesmos princípios do JavaScript, o Node utiliza um modelo de
concorrência baseado em
&lt;strong&gt;&lt;a href=&quot;https://pt.wikipedia.org/wiki/La%C3%A7o_de_eventos&quot;&gt;laço de eventos&lt;/a&gt;&lt;/strong&gt; que
roda em uma &lt;em&gt;thread&lt;/em&gt; única. No entanto, grande parte das operações que podem
bloquear o laço por muito tempo são implementadas de forma assíncrona, evitando
que código JavaScript bloqueie o laço por muito tempo.&lt;/p&gt;
&lt;p&gt;Convencionalmente, as implementações de servidores em linguagens como Java e PHP
utilizam a estratégia de criar uma &lt;em&gt;thread&lt;/em&gt; para cada conexão. A criação de uma
&lt;em&gt;thread&lt;/em&gt; acompanha uma alocação de memória que chega a até alguns megabytes.
Isso pode se tornar custoso a medida que o número de conexões paralelas aumenta.&lt;/p&gt;
&lt;p&gt;Pragmaticamente, quando o Node.js precisa executar uma operação entrada e saída
— leituras de arquivos, rede, banco de dados, entre outras — ao invés de
bloquear o fluxo até que o resultado esteja disponível, ele escala o fluxo em
uma fila de tarefas que volta a ser executado quando o resultado estiver
disponível.&lt;/p&gt;
&lt;p&gt;Esse modelo de concorrência assíncrono permite que apenas uma &lt;em&gt;thread&lt;/em&gt; seja
capaz de manipular vários fluxos de execução diferentes sem a necessidade de
gerenciar &lt;em&gt;threads&lt;/em&gt; paralelas, uma tarefa árdua e propícia a bugs.&lt;/p&gt;
&lt;p&gt;No entanto, essa característica assíncrona do código pode parecer estranha para
desenvolvedores que estão acostumados com ambientes servidores que fazem
operações síncronas. Ainda assim, a filosofia de execução assíncrona para todas
as coisas é a chave para o sucesso do Node. Enquanto os ambientes servidores
convencionais forçam as conexões a se manterem em linha enquanto arquivos são
carregados no servidor ou requisições de rede são executadas, o Node despacha
cada conexão recebida e continua a aceitar as próximas enquanto os eventos
assíncronos fazem o trabalho &amp;quot;por trás&amp;quot;.&lt;/p&gt;
&lt;p&gt;O Node não é o único a adotar essa estratégia. Outras plataformas que
compartilham de um modelo de concorrência similar, como é o caso do
&lt;a href=&quot;https://twistedmatrix.com/trac/&quot;&gt;Twisted Python&lt;/a&gt; e do
&lt;a href=&quot;http://www.tornadoweb.org/en/stable/&quot;&gt;Tornado&lt;/a&gt; para a linguagem Python, além da
especificação
&lt;a href=&quot;http://www.javabeat.net/asynchronous-servlet-servlet-3-0/&quot;&gt;Servlets 3.0&lt;/a&gt; para a
linguagem Java.&lt;/p&gt;
&lt;h2 id=&quot;instalando-o-node-js&quot; tabindex=&quot;-1&quot;&gt;Instalando o Node.js &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/introducao-ao-nodejs/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Vamos instalar o Node através do &lt;a href=&quot;https://github.com/creationix/nvm&quot;&gt;NVM&lt;/a&gt;. No
terminal, digite:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rodando o comando acima irá fazer o download do &lt;em&gt;script&lt;/em&gt; que instala o NVM e
executá-lo. Esse &lt;em&gt;script&lt;/em&gt; clona o repositório do NVM em uma pasta temporária
&lt;code&gt;~/.nvm&lt;/code&gt; e coloca as variáveis de ambiente em algum arquivo de perfil do
terminal (&lt;code&gt;~/._profile&lt;/code&gt;, &lt;code&gt;~/.zshrc&lt;/code&gt;, &lt;code&gt;~/.profile&lt;/code&gt;, ou &lt;code&gt;~/.rc&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Você pode verificar se o NVM foi instalado com sucesso utilizando o commando abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-v&lt;/span&gt; nvm&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se tudo deu certo, a saída deve ser &amp;quot;&lt;samp&gt;nvm&lt;/samp&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Vamos agora instalar o Node. Para rodar a última versão estável, execute o
commando a seguir:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;nvm &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; stable&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Após isso, ative o Node instalado utilizando.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;nvm use stable&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você pode aprender mais sobre o NVM na
&lt;a href=&quot;https://github.com/nvm-sh/nvm&quot;&gt;página do GitHub do projeto&lt;/a&gt;. Para verificar a
instalação do Node, digite o comando abaixo.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;um-pequeno-exemplo&quot; tabindex=&quot;-1&quot;&gt;Um pequeno exemplo &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/introducao-ao-nodejs/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Para exemplificar a facilidade em criar servidores HTTP com o Node, vamos fazer
um em alguns minutos? Vamos criar um web server que responde &amp;quot;Hello World&amp;quot; em
formato texto simples para qualquer requisição. Exemplo tirado da
&lt;a href=&quot;https://nodejs.org/&quot;&gt;página oficial&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; http &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;http&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

http
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;text/plain&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello World&#92;n&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1337&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Servidor rodando em http://127.0.0.1:1337/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para rodar, salve o arquivo com um nome, por exemplo, &lt;code&gt;example.js&lt;/code&gt; e execute-o
com o Node, no terminal, da seguinte forma:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; example.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você deve receber como saída a mensagem &amp;quot;&lt;samp&gt;Servidor rodando em
http://127.0.0.1:1337/&lt;/samp&gt;&amp;quot;. Com o seu navegador, digite na barra de
endereços o endereço &lt;code&gt;http://127.0.0.1:1337/&lt;/code&gt; e veja a sua mensagem.&lt;/p&gt;
&lt;h2 id=&quot;conclusao&quot; tabindex=&quot;-1&quot;&gt;Conclusão &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/introducao-ao-nodejs/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;O Node resolveu muitos problemas que as novas aplicações web e mobile
demandavam, mas não é uma bala de prata que serve para qualquer aplicação.
Certos problemas requerem soluções difernetes e o Node pode não funcionar muito
bem. Ainda assim, é uma ótima ferramenta para ter em seu inventário.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Básico #3</title>
    <link href="https://maxroecker.github.io/blog/javascript-basico-3/"/>
    <updated>2015-09-09T17:00:03Z</updated>
    <id>https://maxroecker.github.io/blog/javascript-basico-3/</id>
    <content type="html">&lt;p&gt;No
&lt;a href=&quot;https://maxroecker.github.io/posts/2015-09-01-javascript-basico-2/&quot;&gt;artigo anterior&lt;/a&gt;
vemos como manipular basicamente os valores de tipo primitivo da linguagem,
entre eles: números, strings, booleanos e valores indefinidos. Também vimos como
fazer algumas operações aritméticas e de comparação entre expressões. No
entanto, somente valores não são suficientes para expressar algoritmos
complexos. É necessário utilizar a memória do computador para armazenar valores
computados e acessá-los depois. Nesse texto vamos ver como atribuir e nomear
valores por meio do uso de &lt;strong&gt;variáveis&lt;/strong&gt;.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; &lt;strong&gt;va·ri·á·vel:&lt;/strong&gt; (1) Em matemática, algo que pode
assumir um valor de um conjunto de valores; (2) Em computação, espaço reservado
na memória de um computador, capaz de armazenar um determinado tipo de dado que
pode alterar-se durante a execução do programa. &lt;/p&gt; &lt;/aside&gt;
&lt;h2 id=&quot;variaveis&quot; tabindex=&quot;-1&quot;&gt;Variáveis &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-3/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Todo valor do JavaScript precisa ser armazenado em um local na memória do
computador, para identificarmos tal local utilizamos as &lt;strong&gt;variáveis&lt;/strong&gt;. Em uma
definição bem simples, variáveis são nomes para os locais onde os valores são
armazenados.&lt;/p&gt;
&lt;blockquote&gt; &lt;p&gt; A representação é a essência da programação. &lt;/p&gt; &lt;footer&gt;Fred
Brooks, The Mythical Man-Month&lt;/footer&gt; &lt;/blockquote&gt;
&lt;p&gt;Para definirmos uma variável, utilizamos a palavra &lt;code&gt;var&lt;/code&gt; seguida do nome
escolhido para a variável. Variáveis podem ter qualquer nome, com exceção de
palavras reservadas. &lt;code&gt;var&lt;/code&gt; é um exemplo de palavra reservada, você não pode dar
o nome de uma variável de &lt;code&gt;var&lt;/code&gt;. Outras palavras reservadas incluem controles de
fluxo e definições do próprio JavaScript. Nomes de variáveis também não podem
conter espaços e não podem começar com números, mas podem conter números depois
do primeiro caracter. Alguns símbolos também podem ser utilizados, como o &lt;code&gt;$&lt;/code&gt; e
o &lt;code&gt;_&lt;/code&gt;. Por exemplo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; $b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Valor de a: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Valor de a: 3&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Valor de $b: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; $b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Valor de $b: 9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;É importante ter em mente que variáveis não devem ser interpretadas como
“caixas” que guardam os valores, mas sim como “placas” que apontam para onde os
valores estão. Assim como placas, você pode mudar a posição apontada de uma
variável, e por isso você pode reutilizar uma variável para outros valores. Veja
o exemplo abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; tempo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Sol&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; temperatura &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Tempo agora: %s %d°&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tempo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; temperatura&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

tempo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Nublado&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
temperatura &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; temperatura &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Tempo agora: %s %d°&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tempo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; temperatura&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos ver que mudamos o valor da variável &lt;code&gt;tempo&lt;/code&gt; de &lt;code&gt;&#39;Sol&#39;&lt;/code&gt; para &lt;code&gt;&#39;Nublado&#39;&lt;/code&gt;.
Já para a variável &lt;code&gt;temperatura&lt;/code&gt;, mudamos o valor dela de &lt;code&gt;22&lt;/code&gt; para &lt;code&gt;20&lt;/code&gt;, uma
vez que utilizamos o próprio da variável na atribuição. Percebeu que nós não
utilizamos a palavra chave &lt;code&gt;var&lt;/code&gt; quando atribuímos o segundo valor? Isso é
possível porque a variável já foi declarada e só queremos atribuir um valor a
ela, não declarar uma nova variável.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; Os símbolos dentro da string na função &lt;code&gt;console.log&lt;/code&gt; são
utilizadas para a &lt;a href=&quot;https://en.wikipedia.org/wiki/String_interpolation&quot;&gt;interpolação de
string&lt;/a&gt;. Interpolação de string é uma técnica que substitui símbolos
especiais na string por valores passados. Cada símbolo indica uma formatação
especial. No exemplo, o símbolo &lt;code&gt;%s&lt;/code&gt; indica que o valor é uma string,
enquanto o &lt;code&gt;%d&lt;/code&gt; indica que o valor é um número. &lt;/p&gt; &lt;/aside&gt;
&lt;h2 id=&quot;atalhos-de-atribuicao&quot; tabindex=&quot;-1&quot;&gt;Atalhos de atribuição &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-3/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Muitas vezes a mesma variável fornece e recebe o valor para uma expressão — como
é o caso da variável &lt;code&gt;temperatura&lt;/code&gt; do exemplo anterior — e por isso há alguns
atalhos para o operador de atribuição que diminuem a quantidade de escrita de
código. Veja a seguir:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; tempo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Sol&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; temperatura &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Tempo agora: %s %d°&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tempo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; temperatura&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

tempo &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; com nuvens&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
temperatura &lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Tempo agora: %s %d°&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tempo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; temperatura&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Na atribuição utilizando o &lt;code&gt;+=&lt;/code&gt;, o JavaScript executa uma concatenação com o
valor a direita e depois atribui o resultado a variável tempo. Algo similar
acontece com a atribuição utilizando &lt;code&gt;-=&lt;/code&gt;, só que nesse caso o JavaScript faz
uma subtração do valor a direita e o resultado é atribuído a variável
&lt;code&gt;temperatura&lt;/code&gt;. Esses atalhos também funcionam para os operadores aritméticos
&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; e &lt;code&gt;%&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Outros dois atalhos atribuição são o &lt;strong&gt;incremento&lt;/strong&gt; (&lt;code&gt;++&lt;/code&gt;) e o &lt;strong&gt;decremento&lt;/strong&gt;
(&lt;code&gt;--&lt;/code&gt;). Ambos só funcionam para números inteiros e possuem um comportamento
simples: adicionam ou subtraem o número da variável em uma unidade e atribuem o
resultado a própria variável. Veja o exemplo abaixo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; t1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; t2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

t1&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
t2&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Temperatura 1: %d°&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; t1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Temperatura 1: 23°&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Temperatura 2: %d°&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; t2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Temperatura 2: 10°&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Atribuições utilizando &lt;code&gt;++&lt;/code&gt; e &lt;code&gt;--&lt;/code&gt; também retornam um valor, então você pode
reescrever o código acima como:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; t1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; t2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Temperatura 1: %d°&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; t1&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Temperatura 1: 22°&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Temperatura 2: %d°&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; t2&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Temperatura 2: 11°&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Temperatura 1: %d°&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; t1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Temperatura 1: 23°&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Temperatura 2: %d°&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; t2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Temperatura 2: 10°&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No entanto, atribuições &lt;code&gt;++&lt;/code&gt; e &lt;code&gt;--&lt;/code&gt; tem comportamento diferente dependendo da
posição em que são colocados. Quando precedem o valor, eles retornam o valor
após o incremento/decremento; caso eles sucedam, eles retornam o valor antes do
incremento/decremento. Assim:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; t1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; t2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Temperatura 1: %d°&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;t1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Temperatura 1: 23°&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Temperatura 2: %d°&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;t2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Temperatura 2: 10°&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Temperatura 1: %d°&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; t1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Temperatura 1: 23°&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Temperatura 2: %d°&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; t2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → Temperatura 2: 10°&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;atribuicao-condicional&quot; tabindex=&quot;-1&quot;&gt;Atribuição condicional &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-3/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;É possível atribuir valores para varáveis de forma condicional utilizando o
operador ternário &lt;code&gt;?&lt;/code&gt;. O operador ternário possui uma sintaxe similar a:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[condição] ? [valor caso verdadeiro] : [valor caso falso]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos entender melhor o comportamento da atribuição condicional com um exemplo.
Suponha que você queira exibir um texto se o número &lt;code&gt;n&lt;/code&gt; é par ou ímpar. Para
verificar que um número é ímpar, você pode testar se módulo do número por dois é
zero (ou seja, não sobra resto da divisão do número &lt;code&gt;n&lt;/code&gt; por dois). Se essa
condição é verdadeira, então atribuiremos &lt;code&gt;&#39;par&#39;&lt;/code&gt; ao resultado. Caso contrário,
atribuíremos &lt;code&gt;&#39;ímpar&#39;&lt;/code&gt;. Um código para esse pequeno algoritmo poderia ser:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// pode ser qualquer número&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; resultado &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;par&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ímpar&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resultado&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Teste o código acima com outros valores para a variável &lt;code&gt;n&lt;/code&gt; e veja os resultados.&lt;/p&gt;
&lt;h2 id=&quot;conclusao&quot; tabindex=&quot;-1&quot;&gt;Conclusão &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-3/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Variáveis são o principal meio de acesso à memória que, quando utilizadas juntas
com valores, forma o fundamento da execução de qualquer código e da
representação dos dados de um algoritmo. No próximo artigo veremos as
declarações de controle de fluxo de execução, como condicionais ou de
repetições, para evoluirmos ainda mais a nossa capacidade de desenvolver códigos
em JavaScript.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Básico #2</title>
    <link href="https://maxroecker.github.io/blog/javascript-basico-2/"/>
    <updated>2015-09-01T22:29:00Z</updated>
    <id>https://maxroecker.github.io/blog/javascript-basico-2/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Valores&lt;/strong&gt; são os elementos mais simples dentro de uma linguagem: são
expressões que não podem ser reduzidas a nenhuma outra — ou seja, estão em sua
forma normal. Por exemplo: 2 é um valor, ele é auto-contido e não há como
simplificar. Já (1+2) é uma expressão que não representa um valor, pois pode ser
derivado e reduzido como 3.&lt;/p&gt;
&lt;aside&gt; &lt;p&gt; Em lógica matemática, um objeto encontra-se em sua &lt;strong&gt;forma
normal&lt;/strong&gt; se este não pode ser reescrito de forma mais simples. &lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Todo valor deve ser armazenado em um local na memória do computador e ocupa
algum espaço em bits. O JavaScript possui duas categorias de valores:
&lt;strong&gt;primitivos&lt;/strong&gt; e &lt;strong&gt;objetos&lt;/strong&gt;. Nesse artigo vamos focar nos valores do tipo
primitivo. Valores primitivos representam os dados simples e podem ter os tipos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Número&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Booleano&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Existem outros tipos primitivos mais avançados, mas para uma introdução à
linguagem, esses três são suficientes.&lt;/p&gt;
&lt;h2 id=&quot;numero&quot; tabindex=&quot;-1&quot;&gt;Número &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Valores do tipo número são, surpreendentemente, valores numéricos. O JavaScript
armazena qualquer número como um
&lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_754&quot;&gt;ponto flutuante de precisão dupla&lt;/a&gt;. Ou
seja, cada número utiliza 64 bits da memória do computador para ser armazenado.
Alguns bits são utilizados para identificar números negativos ou também para
indicar a fração decimal do número. Na verdade,
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER&quot;&gt;o maior valor numérico inteiro que o JavaScript representa está próximo aos 9 quadrilhões&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Abra o console JavaScript do seu navegador — &lt;kbd&gt;&lt;kbd class=&quot;key&quot;&gt;Ctrl&lt;/kbd&gt; +
&lt;kbd class=&quot;key&quot;&gt;Shift&lt;/kbd&gt; + &lt;kbd class=&quot;key&quot;&gt;J&lt;/kbd&gt;&lt;/kbd&gt; — e experimente
entrar com os números inteiros &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt; e &lt;code&gt;16&lt;/code&gt;, apertado &lt;kbd class=&quot;key&quot;&gt;Enter&lt;/kbd&gt; após cada um deles. Você pode ver que o console sempre
irá retornar para você o valor da sua expressão informada, caso ela seja
avaliada em um valor; caso contrário, ela retorna &lt;code&gt;undefined&lt;/code&gt;. Não se preocupe
em entender o que significa isso por agora, vamos tratar sobre esse valor
especial daqui a pouco.&lt;/p&gt;
&lt;blockquote&gt; &lt;p&gt; Computadores são como os deuses do Velho Testamento: muitas
regras e nenhuma piedade. &lt;/p&gt; &lt;footer&gt; Joseph Campbell, The Power of Myth
&lt;/footer&gt; &lt;/blockquote&gt;
&lt;p&gt;Para representar números inteiros em base decimal, como já visto, basta
escrevê-los &lt;strong&gt;sem usar zero esquerda&lt;/strong&gt;. Números fracionais são escritos com
ponto, então o número 1,5 em JavaScript é escrito como &lt;code&gt;1.5&lt;/code&gt;. Você também pode
omitir a parte inteira quando ela é nula, assim, &lt;strong&gt;0,78&lt;/strong&gt; pode ser escrito como
&lt;code&gt;0.78&lt;/code&gt; ou &lt;code&gt;.78&lt;/code&gt;; No entando, é sempre recomendado que você adicione o zero. Você
também pode escrever números muito grandes ou muito pequenos através de
&lt;a href=&quot;https://pt.wikipedia.org/wiki/Nota%C3%A7%C3%A3o_cient%C3%ADfica&quot;&gt;notação científica&lt;/a&gt;,
usando o &lt;code&gt;e&lt;/code&gt; para indicar o expoente da base 10. Veja abaixo as diferentes
formas de escrever o número o mesmo número:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 0.1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 0.1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1e-1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 0.1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Há a possibilidade de escrever também números inteiros em bases
&lt;a href=&quot;https://pt.wikipedia.org/wiki/Sistema_de_numera%C3%A7%C3%A3o_hexadecimal&quot;&gt;hexadecimal&lt;/a&gt;
(16), &lt;a href=&quot;https://pt.wikipedia.org/wiki/Sistema_octal&quot;&gt;octal&lt;/a&gt; (8) ou
&lt;a href=&quot;https://pt.wikipedia.org/wiki/Sistema_de_numera%C3%A7%C3%A3o_bin%C3%A1rio&quot;&gt;binária&lt;/a&gt;
(2). Para escrever em base hexadecimal, basta adicionar um &lt;code&gt;0x&lt;/code&gt; à frente de um
número com dígitos &lt;code&gt;01234567890ABCDF&lt;/code&gt;. Já para escrever o número em octal,
precede-se o número com um &lt;code&gt;0&lt;/code&gt; e em seguida qualquer dígito &lt;code&gt;01234567&lt;/code&gt;, por
isso, escrever &lt;code&gt;014&lt;/code&gt; é diferente de &lt;code&gt;14&lt;/code&gt; em JavaScript, o primeiro indica um
número em base octal e o segundo um número em base decimal.&lt;/p&gt;
&lt;p&gt;Números binários são escritos com um &lt;code&gt;0b&lt;/code&gt; à frente do número com digitos &lt;code&gt;01&lt;/code&gt;.
Para mostrar a diferença na escrita, o número 42 nas diferentes bases é escrito
como:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 42&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0b101010&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 42&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;052&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 42&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0x2a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;operacoes-matematicas&quot; tabindex=&quot;-1&quot;&gt;Operações matemáticas &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-2/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As quatro operações aritméticas básicas: &lt;strong&gt;adição&lt;/strong&gt;, &lt;strong&gt;subtração&lt;/strong&gt;,
&lt;strong&gt;multiplicação&lt;/strong&gt; e &lt;strong&gt;divisão&lt;/strong&gt;; são dadas no JavaScript pelos símbolos &lt;code&gt;+&lt;/code&gt;,
&lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt; e &lt;code&gt;/&lt;/code&gt;, respectivamente. Esses símbolos são chamados de operadores, e
sempre utilizam dos números a sua direita e a sua esquerda para realizar a
operação. Outro operador importante é o operador de &lt;strong&gt;módulo&lt;/strong&gt; ou &lt;strong&gt;resto da
divisão&lt;/strong&gt;, escrito com &lt;code&gt;%&lt;/code&gt;. Experimente executar as seguintes expressões no
console.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 5&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 0.9&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → -42&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 6.25&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como esperado, a multiplicação e a divisão tem prioridade, seguindo a
&lt;a href=&quot;https://pt.wikipedia.org/wiki/Ordem_de_opera%C3%A7%C3%B5es&quot;&gt;ordem de precedência&lt;/a&gt;.
Caso você precise da ordem explicita, você deve utilizar os parênteses.&lt;/p&gt;
&lt;h3 id=&quot;valores-numericos-especiais&quot; tabindex=&quot;-1&quot;&gt;Valores numéricos especiais &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-2/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Há três valores numéricos em JavaScript que não se comportam como números
comuns. Os primeiros são os que representam os infinitos positivo e negativo —
representados na linguagem como &lt;code&gt;Infinity&lt;/code&gt; e &lt;code&gt;-Infinity&lt;/code&gt; — que apesar de não
poderem ser utilizados em operações aritméticas, podem ser comparados com outros
números e podem ser úteis para resolver alguns problemas.&lt;/p&gt;
&lt;p&gt;O terceiro é &lt;code&gt;NaN&lt;/code&gt;, do inglês &lt;i lang=&quot;en&quot;&gt;Not a Number&lt;/i&gt;, ou seja, um valor
do tipo número mas que representa um &amp;quot;não-número&amp;quot;. Operações aritméticas
indefinidas ou mal-formadas resultam em &lt;code&gt;NaN&lt;/code&gt;, veja alguns exemplos:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → NaN&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → NaN&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → NaN&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → NaN&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;strings&quot; tabindex=&quot;-1&quot;&gt;Strings &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Strings&lt;/strong&gt; são cadeia de caracteres utilizadas para representar texto escrito.
Sua representação em JavaScript é dada pelo conteúdo dentro de um par de aspas
duplas (&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;) ou aspas simples (&lt;code&gt;&#39;&#39;&lt;/code&gt;). Por exemplo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;À noite, vovô Kowalsky vê o ímã cair no pé do pinguim queixoso e vovó põe açúcar no chá de tâmaras do jabuti feliz&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&#39;Gazeta publica hoje no jornal uma breve nota de faxina na quermesse.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Qualquer caractere pode ser colocado entre as aspas e o JavaScript se encarrega
de atribuir um valor para elas. No entanto, alguns caracteres especiais — como
os que indicam uma nova linha ou um espaço de tabulação — precisam ser
representados de forma diferente. Para representar esses caracteres especiais
utilizamos a notação contra-barra (ou &lt;i lang=&quot;en&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Escape_character&quot;&gt;character escaping&lt;/a&gt;&lt;/i&gt;).
Ou seja, quando uma contra-barra é encontrada no texto, o caractere seguinte
indica um caractere especial. Por exemplo, uma string que contenha &lt;code&gt;&#92;n&lt;/code&gt; indica
que há uma quebra de linha. A lista abaixo indica os principais caracteres
especiais:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#92;n&lt;/code&gt; — Quebra de linha&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#92;&amp;quot;&lt;/code&gt; — Aspas duplas&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#92;&#39;&lt;/code&gt; — Aspas simples&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#92;&#92;&lt;/code&gt; — Contra-barra&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#92;t&lt;/code&gt; — Espaço de tabulação&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ou seja, para escrever a frase &amp;quot;&lt;em&gt;Usamos o &amp;quot;&#92;n&amp;quot; para escrever uma quebra de
linha&lt;/em&gt;&amp;quot; em uma string no JavaScript, é necessário escrevê-la da seguinte forma:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Usamos o &#92;&quot;&#92;&#92;n&#92;&quot; para escrever uma quebra de linha&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Strings não podem ser adicionadas, divididas, multiplicas ou subtraídas. Mas
podem ser concatenadas com o operador &lt;code&gt;+&lt;/code&gt;. Por exemplo, a expressão
&lt;code&gt;&#39;ja&#39; + &#39;va&#39; + &#39;script&#39;&lt;/code&gt; produz o resultado &lt;code&gt;&#39;javascript&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;booleanos&quot; tabindex=&quot;-1&quot;&gt;Booleanos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Muitas vezes precisamos de dados tão simples que indiquem somente uma decisão:
&amp;quot;sim&amp;quot; e &amp;quot;não&amp;quot;, &amp;quot;ligado&amp;quot; e &amp;quot;desligado&amp;quot;, &amp;quot;ativo&amp;quot; e &amp;quot;inativo&amp;quot;, entre outros.
Valores booleanos indicam exatamente isso e são representados por &lt;code&gt;true&lt;/code&gt; ou
&lt;code&gt;false&lt;/code&gt;. Esses valores são chamados de booleanos em homenagem ao matemático
&lt;a href=&quot;https://pt.wikipedia.org/wiki/George_Boole&quot;&gt;George Boole&lt;/a&gt;, grande contribuidor
nos campos de lógica matemática e álgebra abstrata. Apesar de serem simples, são
essenciais quando estamos lidando com estruturas de controle ou de laço dentro
da linguagem.&lt;/p&gt;
&lt;h3 id=&quot;operacoes-booleanas&quot; tabindex=&quot;-1&quot;&gt;Operações booleanas &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-2/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Valores booleanos podem ser operados através dos operadores lógicos
&lt;a href=&quot;https://pt.wikipedia.org/wiki/Conjun%C3%A7%C3%A3o_l%C3%B3gica&quot;&gt;e&lt;/a&gt;,
&lt;a href=&quot;https://pt.wikipedia.org/wiki/Disjun%C3%A7%C3%A3o_l%C3%B3gica&quot;&gt;ou&lt;/a&gt; e
&lt;a href=&quot;https://pt.wikipedia.org/wiki/Nega%C3%A7%C3%A3o&quot;&gt;negação&lt;/a&gt;, escritos
respectivamente como &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt; e &lt;code&gt;!&lt;/code&gt;. Note que o operador de negação &lt;code&gt;!&lt;/code&gt; é
unário, ou seja, ele inverte o próximo valor booleano informado. Exemplos:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;
&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → false&lt;/span&gt;
&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;
&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → false&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → false&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;comparacoes&quot; tabindex=&quot;-1&quot;&gt;Comparações &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-2/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A maior parte dos valores primitivos em JavaScript possui uma
&lt;a href=&quot;https://en.wikipedia.org/wiki/Total_order&quot;&gt;ordenação total&lt;/a&gt;. Ou seja, possuem a
ideia de que um valor é &amp;quot;maior que outro&amp;quot; ou &amp;quot;precede&amp;quot; outro. Para avaliar essa
relação, utilizamos &lt;strong&gt;operadores de comparação&lt;/strong&gt;, que resultam em um valor
booleano &lt;code&gt;true&lt;/code&gt; ou &lt;code&gt;false&lt;/code&gt;. Os operadores de comparação são:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;, que indica &amp;quot;&lt;em&gt;maior que&lt;/em&gt;&amp;quot;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;, que indica &amp;quot;&lt;em&gt;maior ou igual a&lt;/em&gt;&amp;quot;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;, que indica &amp;quot;&lt;em&gt;igual a&lt;/em&gt;&amp;quot;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;, que indica &amp;quot;&lt;em&gt;menor ou igual a&lt;/em&gt;&amp;quot;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;, que indica &amp;quot;&lt;em&gt;menor que&lt;/em&gt;&amp;quot;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!=&lt;/code&gt;, que indica &amp;quot;&lt;em&gt;diferente de&lt;/em&gt;&amp;quot;;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alguns exemplos:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → false&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → false&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&#39;Alvar&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Zoink&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&#39;Jaiko&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jaik&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;
&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Números são comparados de acordo com o valor real. Strings são comparadas pela
&lt;a href=&quot;https://en.wikipedia.org/wiki/Lexicographical_order&quot;&gt;ordem lexicográfica&lt;/a&gt;, para
os valores booleanos, &lt;code&gt;true&lt;/code&gt; sempre sucede &lt;code&gt;false&lt;/code&gt; e ambos nunca são iguais.&lt;/p&gt;
&lt;p&gt;Uma exceção a essa regra é o valor &lt;code&gt;NaN&lt;/code&gt;. Na maioria das vezes um valor é igual
a ele mesmo, mas com o &lt;code&gt;NaN&lt;/code&gt; isso não acontece. Em JavaScript, &lt;code&gt;NaN == NaN&lt;/code&gt;
sempre retorna &lt;code&gt;false&lt;/code&gt;. A justificativa é que normalmente &lt;code&gt;NaN&lt;/code&gt; indica uma
computação aritmética indefinida e isso não significa que ela seja igual a outra
computação inválida.&lt;/p&gt;
&lt;h2 id=&quot;valores-indefinidos&quot; tabindex=&quot;-1&quot;&gt;Valores indefinidos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Há dois valores especiais, &lt;code&gt;null&lt;/code&gt; e &lt;code&gt;undefined&lt;/code&gt;, que são utilizados para indicar
a falta de um valor próprio — são valores que indicam que não há informação.
Muitas operações que não resultam em um valor válido produzem o valor
&lt;code&gt;undefined&lt;/code&gt; por serem obrigadas a retornar um valor. Contextualmente, não há
diferença entre &lt;code&gt;null&lt;/code&gt; e &lt;code&gt;undefined&lt;/code&gt;, ou seja, você pode considerá-los sinônimos
na maioria das vezes.&lt;/p&gt;
&lt;p&gt;Alguns autores chegam a afirmar que esse é um acidente dentro do projeto da
linguagem. Houve uma proposta de unificar esses valores, mas ela foi
&lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony%3atypeof_null&quot;&gt;rejeitada&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Podemos notar uma diferença entre os dois valores quando utilizamos o operador
&lt;code&gt;typeof&lt;/code&gt; da linguagem, que fornece que fornece uma string nomeando o tipo do
próximo valor dado à ela. Por exemplo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → &quot;number&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → &quot;string&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → &quot;boolean&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → &quot;object&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// → &quot;undefined&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusao&quot; tabindex=&quot;-1&quot;&gt;Conclusão &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-2/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Esse artigo ficou um pouco longo, mas acho importante ter esse entendimento
inicial de valores e operações básicas para compreensão do JavaScript. Para os
próximos artigos, trataremos de assuntos como variáveis, atribuições e de suas
especialidades.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Básico #1</title>
    <link href="https://maxroecker.github.io/blog/javascript-basico-1/"/>
    <updated>2015-08-25T09:15:25Z</updated>
    <id>https://maxroecker.github.io/blog/javascript-basico-1/</id>
    <content type="html">&lt;p&gt;O &lt;strong&gt;JavaScript&lt;/strong&gt; é uma linguagem de programação criada em 1995 com o objetivo de
adicionar dinamicidade aos documentos HTML no navegador Netscape. O JavaScript,
junto com o HTML e o CSS, constituem os três pilares tecnológicos da &lt;em&gt;web&lt;/em&gt;. O
JavaScript permite que código seja executado nos navegadores dos usuários que
acessam uma página &lt;em&gt;web&lt;/em&gt;, adicionando interatividade e permitindo a construção
de aplicações ricas.&lt;/p&gt;
&lt;p&gt;O JavaScript uma
&lt;a href=&quot;https://en.wikipedia.org/wiki/Scripting_language&quot;&gt;linguagem de script&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_programming_language&quot;&gt;dinâmica&lt;/a&gt; com
&lt;a href=&quot;https://en.wikipedia.org/wiki/First-class_function&quot;&gt;funções de primeira classe&lt;/a&gt;
e que suporta a criação de
&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot;&gt;objetos&lt;/a&gt; baseados em
&lt;a href=&quot;https://en.wikipedia.org/wiki/Prototype-based_programming&quot;&gt;protótipos&lt;/a&gt;. Por
essas características, é considerada uma linguagem de multi-paradigma,
oferecendo suporte para programação de estilo
&lt;a href=&quot;https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_imperativa&quot;&gt;imperativo&lt;/a&gt;,
&lt;a href=&quot;https://pt.wikipedia.org/wiki/Orienta%C3%A7%C3%A3o_a_objetos&quot;&gt;orientado a objetos&lt;/a&gt;
e &lt;a href=&quot;https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_funcional&quot;&gt;funcional&lt;/a&gt;.
Mas não se preocupe em entender todos esses conceitos por agora.&lt;/p&gt;
&lt;aside&gt;&lt;p&gt; Uma &lt;strong&gt;linguagem de script&lt;/strong&gt; é uma linguagem de
programação desenvolvida para um ambiente de execução específico. &lt;/p&gt;&lt;/aside&gt;
&lt;p&gt;Apesar de ter seu nascimento em navegadores, atualmente o JavaScript é uma
linguagem que habita também o lado do servidor. Por exemplo, a engine
&lt;a href=&quot;https://developers.google.com/v8/&quot;&gt;V8&lt;/a&gt; é utilizada no navegador Google Chrome,
mas é utilizado também pelo &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;voltando-para-1995&quot; tabindex=&quot;-1&quot;&gt;Voltando para 1995 &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-1/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A Netscape contrata Brendan Eich para liderar o desenvolvimento de uma nova
linguagem de programação que permitiria que o novíssimo suporte do Navegador à
linguagem Java se tornasse mais acessível. Eich decide que uma linguagem de
&lt;em&gt;script&lt;/em&gt; com tipagem fraca seria ideal para o ambiente e para o público alvo da
época: &lt;em&gt;web designers&lt;/em&gt; que desejavam adicionar algumas funcionalidades em páginas
web sem a necessidade de compilar código em &lt;em&gt;bytecode&lt;/em&gt; ou ter conhecimento
avançado de orientação a objetos.&lt;/p&gt;
&lt;p&gt;Essa primeira versão da linguagem criada por Brendan Eich foi chamada de
“Mocha”. No entanto, para o lançamento oficial, ela foi nomeada de “LiveScript”.
Posteriormente, foi rebatizada JavaScript por iniciativa do setor de
&lt;em&gt;marketing&lt;/em&gt;. No entanto, isso se revelaria um erro que assombraria os
&lt;em&gt;web designers&lt;/em&gt; por muitos anos… Em 4 de Dezembro de 1995, a NetScape junto a Sun
anunciam o JavaScript, uma nova linguagem que tinha um único objetivo: ser um
complemento para o HTML e para o Java.&lt;/p&gt;
&lt;p&gt;O JavaScript rapidamente ganhou vida própria, sendo cada vez mais utilizado para
adicionar funcionalidades à documentos HTML do que para controlar &lt;em&gt;applets&lt;/em&gt;
Java. No entanto, seu sucesso como uma linguagem de programação com uma curva de
aprendizagem baixa — não precisava de um compilador, nem de um processo de
&lt;em&gt;build&lt;/em&gt; ou de uma IDE — combinado com algumas falhas de seguranças descobertas
nos meses seguintes construíram a imagem de que a linguagem não era séria o
suficiente para o desenvolvimento de aplicações complexas.&lt;/p&gt;
&lt;p&gt;Mas o sucesso do JavaScript não passou despercebido pela Microsoft, empresa por
trás do Internet Explorer. A Microsoft respondeu ao JavaScript da Netscape
lançando a VBScript, que permitia a interação de componentes das páginas HTML
junto ao sistema operacional Windows. Além disso, em 16 de Julho de 1996, a
Microsoft lança uma “versão do JavaScript” para o Internet Explorer 3.0, e a
batiza de JScript.&lt;/p&gt;
&lt;p&gt;O JScript não era totalmente compatível com o JavaScript. Códigos feitos para
uma linguagem não funcionavam na outra em grande parte das vezes. Isso acirrou
ainda mais a disputa entre ambos os navegadores. Era comum que alguns os
desenvolvedores abandonassem os usuários de um navegador ou outro ao invés de
escrever um código compatível para ambos.&lt;/p&gt;
&lt;p&gt;Em Novembro de 1997, a Netscape e a Sun iniciam o processo de padronizar a
linguagem com a ajuda da &lt;em&gt;European Computer Manufacturers Association&lt;/em&gt; (ECMA), e
dão a ela um novo nome: ECMAScript. O processo de padronização durou vários
anos. A ECMAScript 2 foi em Junho de 1998, a ECMAScript 3 em Dezembro de 1994 e
os trabalhos na ECMAScript 4 começaram em 2000.&lt;/p&gt;
&lt;p&gt;Nos anos seguintes, o Java perdeu força com os &lt;em&gt;applets&lt;/em&gt;, o VBScript foi
descontinuado pela Microsoft e o Internet Explorer ganhou a batalha contra o
Netscape Navigator. O domínio de 95% do mercado pelo Internet Explorer no início
dos anos 2000 fez com que o JScript se torna-se o padrão &lt;em&gt;de facto&lt;/em&gt; de uma
linguagem que permitia “documentos HTML dinâmicos”. Eventualmente, a Microsoft,
que inicialmente participava ativamente do processo de padronização, parou de
contribuir e o projeto da ECMAScript 4 foi arquivado por período indefinido.&lt;/p&gt;
&lt;p&gt;A história começou a mudar em 2004, quando a Mozilla, sucessora da Netscape,
lança o Firefox e abocanha uma pequena mas significativa parte do mercado do
Internet Explorer. Em 2005, a Mozilla junta-se a ECMA International, e começa a
trabalhar junto com a Macromedia — que desejava padronizar a linguagem
ActionScript utilizada pelo Flash — para reviver a padronização do ECMAScript 4.&lt;/p&gt;
&lt;p&gt;Nos próximos anos, o Google lança o navegador Chrome com a máquina virtual de
JavaScript própria — a &lt;a href=&quot;https://v8.dev/&quot;&gt;V8&lt;/a&gt; — e a primeira a utilizar tradução
dinâmica. Além disso, o desenvolvimento &lt;em&gt;web&lt;/em&gt; popularizou-se ainda mais e
diversas bibliotecas e ferramentas começaram a ser disponibilizadas com código
livre e que prometiam acabar com a incompatibilidade do JavaScript nos diversos
navegadores, tais como o &lt;a href=&quot;https://jquery.com/&quot;&gt;JQuery&lt;/a&gt; e o
&lt;a href=&quot;https://mootools.net/&quot;&gt;MooTools&lt;/a&gt;. Eventualmente chegou-se ao consenso de que
era necessário padronizar de vez a linguagem. Assim, em Dezembro de 2009, a
quinta e &amp;quot;definitiva&amp;quot; versão da ECMAScript é finalmente lançada.&lt;/p&gt;
&lt;p&gt;A partir de 2009, vários esforços foram tomados para melhorar e aumentar a
capacidade do ECMAScript. E, em 2015, a sexta versão da linguagem é lançada com
muitas novas funcionalidades, tornando-se definitivamente uma linguagem madura.
Atualmente o JavaScript é considerado uma implementação da ECMAScript, assim
como o ActionScript e o JScript.&lt;/p&gt;
&lt;h2 id=&quot;serie-sobre-javascript&quot; tabindex=&quot;-1&quot;&gt;Série sobre JavaScript &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-1/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pretendo iniciar essa série de artigos sobre JavaScript para compartilhar um
pouco do conhecimento que adquiri nos últimos anos, pois acredito que somente
aprende-se uma coisa de verdade quando você ensina-se ela. Sei que há muito
conteúdo de qualidade sobre JavaScript pela &lt;em&gt;web&lt;/em&gt; — basta uma pesquisada no
Google — mas muito do conteúdo relevante é dado em língua inglesa ou apresentam
conceitos que já são obsoletos, ou seja, um obstáculo para desenvolvedores
iniciantes e aspirantes em programação que querem aprender sobre essa poderosa
linguagem.&lt;/p&gt;
&lt;p&gt;Nessa série, vou exibir inicialmente aspectos primários da linguagem e aos
poucos ir revelando detalhes importantes e complexos conforme avançamos. Vou me
esforçar para tratar o assunto da maneira fácil para você compreender, mas é
importante que você já tenha algum entendimento de codificação e lógica de
programação. Faço sempre uso de uma grande quantidade de exemplos, afinal, &lt;strong&gt;a
melhor forma de aprender a codificar é codificando&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote cite=&quot;http://lkml.org/lkml/2000/8/25/132&quot;&gt;
  &lt;p&gt;
    Talk is cheap, show me the code.
  &lt;/p&gt;
  &lt;footer&gt;
    &lt;a href=&quot;http://lkml.org/lkml/2000/8/25/132&quot;&gt;Linus Torvalds&lt;/a&gt;
  &lt;/footer&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quer começar já? Pois então vamos lá! Caso você esteja num navegador atualizado
— como o Google Chrome ou o Mozilla Firefox — aperte &lt;kbd&gt;&lt;kbd class=&quot;key&quot;&gt;Ctrl&lt;/kbd&gt; + &lt;kbd class=&quot;key&quot;&gt;Shift&lt;/kbd&gt; + &lt;kbd class=&quot;key&quot;&gt;J&lt;/kbd&gt;&lt;/kbd&gt; e você verá uma tela com um cursor. Bem vindo ao
&lt;strong&gt;Console JavaScript&lt;/strong&gt; do seu navegador! Tente digitar a seguinte expressão
abaixo e aperte &lt;kbd class=&quot;key&quot;&gt;Enter&lt;/kbd&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Olá Mundo!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Em seguida, digite a próxima expressão e novamente aperte &lt;kbd class=&quot;key&quot;&gt;Enter&lt;/kbd&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Viu resultado? Parabéns! Você fez sua primeira atribuição de valor em uma
variável e imprimiu o resultado na tela. Simples, não? Esse é só um exemplo
básico de como utilizar o console para lhe auxiliar nesse período de
aprendizado, ele é seu companheiro e sua melhor ferramenta para aprender
JavaScript.&lt;/p&gt;
&lt;p&gt;Tente agora uma coisa um pouco mais complexa, escreva a função abaixo no
console. &lt;strong&gt;Dica&lt;/strong&gt;: quando for pular a linha, use &lt;kbd&gt;&lt;kbd class=&quot;key&quot;&gt;Shift&lt;/kbd&gt; + &lt;kbd class=&quot;key&quot;&gt;Enter&lt;/kbd&gt;&lt;/kbd&gt; e após de digitar
tudo aperte &lt;kbd class=&quot;key&quot;&gt;Enter&lt;/kbd&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fac&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fac&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Após isso, execute os seguintes comandos:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;fac&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;fac&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;fac&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;fac&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Viu que valores na tela? Você notou algum padrão? Compreendeu o que a função
faz? 😄&lt;/p&gt;
&lt;h3 id=&quot;livros&quot; tabindex=&quot;-1&quot;&gt;Livros &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-1/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jsforcats.com/&quot;&gt;JavaScript for Cats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eloquentjavascript.net/&quot;&gt;Eloquent JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;links&quot; tabindex=&quot;-1&quot;&gt;Links &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-1/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/javascript-scene/learn-javascript-b631a4af11f2&quot;&gt;Learn JavaScript Essentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jstherightway.org/&quot;&gt;JavaScript: The Right Way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://javascriptissexy.com/how-to-learn-javascript-properly/&quot;&gt;How to Learn JavaScript Properly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;videos&quot; tabindex=&quot;-1&quot;&gt;Vídeos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-1/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLQCmSnNFVYnT1-oeDOSBnt164802rkegc&quot;&gt;Desvendando a linguagem JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.codeschool.com/courses/javascript-road-trip-part-1&quot;&gt;Code School: JavaScript Road Trip Part 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;agradecimentos&quot; tabindex=&quot;-1&quot;&gt;Agradecimentos &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/javascript-basico-1/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Agradeço a &lt;a href=&quot;https://www.linkedin.com/in/suzanicristina/&quot;&gt;Suzani Cristina&lt;/a&gt; pela
revisão do texto e de algumas informações da história da linguagem. Obrigado!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Porque você deveria aprender JavaScript</title>
    <link href="https://maxroecker.github.io/blog/porque-voce-deveria-aprender-javascript/"/>
    <updated>2015-08-21T00:50:01Z</updated>
    <id>https://maxroecker.github.io/blog/porque-voce-deveria-aprender-javascript/</id>
    <content type="html">&lt;p&gt;A web se tornou a plataforma padrão de desenvolvimento nos últimos anos. Isso é
evidenciado pelo tanto de &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;ferramentas&lt;/a&gt;,
&lt;a href=&quot;http://www.i-programmer.info/news/167-javascript/5418-javascript-to-be-the-default-langauge-for-gnome.html&quot;&gt;ambientes gráficos&lt;/a&gt;,
&lt;a href=&quot;http://electron.atom.io/&quot;&gt;plataformas de desenvolvimento&lt;/a&gt; e
&lt;a href=&quot;http://www.chromium.org/chromium-os&quot;&gt;sistemas operacionais&lt;/a&gt; que utilizam suas
tecnologias para apresentar conteúdo. Hoje, até aplicações para dispositivos
móveis nativas incorporam tecnologias do HTML, CSS e JavaScript. Nem o hardware
tem escapado dessa mudança. Projetos como
&lt;a href=&quot;https://lostechies.com/derickbailey/2013/07/30/let-me-teach-you-arduino-with-javascript/&quot;&gt;Arduino&lt;/a&gt;,
&lt;a href=&quot;http://nodebots.io/&quot;&gt;NodeBots&lt;/a&gt; e &lt;a href=&quot;https://tessel.io/&quot;&gt;Tessel&lt;/a&gt; vislumbram que em
um futuro próximo poderemos ter JavaScript como uma linguagem comum para
sistemas embarcados.&lt;/p&gt;
&lt;p&gt;No entanto, ainda existe uma certa &amp;quot;barreira&amp;quot; aprender essa linguagem. Ela já
foi considerada uma linguagem brinquedo, que tinha somente a função de criar
alguns efeitos na interface do usuário ou adicionar alguma interação. Hoje essa
situação mudou.&lt;/p&gt;
&lt;h2 id=&quot;a-aurora-de-um-novo-tempo&quot; tabindex=&quot;-1&quot;&gt;A aurora de um novo tempo &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/porque-voce-deveria-aprender-javascript/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Em meados de 2004, o Google lança o Gmail. O serviço de e-mail ganhou destaque
por garantir espaço quase ilimitado gratuitamente. Além disso, sua interface
tinha uma característica interessante: partes da interface eram carregadas
dinamicamente, sem a necessidade de um redirecionamento da página inteira. O
cliente &lt;em&gt;web&lt;/em&gt; do Gmail foi desenvolvido utilizando &lt;strong&gt;AJAX&lt;/strong&gt;, do inglês &lt;i lang=&quot;en&quot;&gt;Asynchronous Javascript And XML&lt;/i&gt;, que permitia a troca de
informações com o servidor de forma assíncrona com o
&lt;a href=&quot;https://developer.mozilla.org/pt-BR/docs/Web/API/XMLHttpRequest&quot;&gt;XMLHttpRequest&lt;/a&gt;.
Ou seja, o AJAX permitia que conteúdo do Gmail fosse carregado de acordo com a
demanda do usuário, sem necessidade do recarregamento da página inteira. O
advento do AJAX provocou mudanças profundas no desenvolvimento de aplicações,
adicionando dinamismo e interatividade e permitindo que aplicações &lt;em&gt;web&lt;/em&gt; fossem
competitivas com aplicações nativas.&lt;/p&gt;
&lt;blockquote cite=&quot;http://www.adaptivepath.com/ideas/ajax-new-approach-web-applications/&quot;&gt;
&lt;p&gt; AJAX não é uma tecnologia. Na verdade são muitas tecnologias, cada uma
florescendo por conta própria, trabalhando juntas de forma poderosa &lt;/p&gt;
&lt;footer&gt; &lt;a href=&quot;http://www.adaptivepath.com/ideas/ajax-new-approach-web-applications/&quot;&gt;
Jesse James Garrett &lt;/a&gt;  &lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;Já em 2009, o lançamento do &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; permitiu que o
JavaScript, aliado a um
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_I/O&quot;&gt;I/O não bloqueante&lt;/a&gt; e
&lt;a href=&quot;https://en.wikipedia.org/wiki/Event-driven_programming&quot;&gt;orientado a eventos&lt;/a&gt;,
ganhasse espaço no lado do servidor das aplicações. Sua adoção foi muito rápida,
principalmente para atender a nova demanda de aplicativos &lt;em&gt;web&lt;/em&gt; e mobile que
exigiam grandes quantidades de respostas em tempo real. Dois anos mais tarde, em
2011, foi lançado o &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt;, gerenciador de pacotes e de
bibliotecas para o Node, causando uma explosão em sua popularidade. Atualmente,
&lt;a href=&quot;http://www.modulecounts.com/&quot;&gt;o NPM é o repositório de pacotes com maior quantidade de módulos disponíveis&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;vantagens&quot; tabindex=&quot;-1&quot;&gt;Vantagens &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/porque-voce-deveria-aprender-javascript/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;performance&quot; tabindex=&quot;-1&quot;&gt;Performance &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/porque-voce-deveria-aprender-javascript/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nos navegadores e ambientes modernos, a maioria dos códigos JavaScript é
executado de
&lt;a href=&quot;https://hacks.mozilla.org/2017/02/a-crash-course-in-just-in-time-jit-compilers/&quot;&gt;forma bastante otimizada&lt;/a&gt;.
Apesar de ser uma linguagem de &lt;i lang=&quot;en&quot;&gt;script&lt;/i&gt;, e, por isso, utilizar
uma máquina virtual em tempo de execução, o JavaScript possui um desempenho
ótimo para o desenvolvimento de aplicações.&lt;/p&gt;
&lt;h4 id=&quot;multiparadigma&quot; tabindex=&quot;-1&quot;&gt;Multiparadigma &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/porque-voce-deveria-aprender-javascript/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;O JavaScript é uma linguagem multiparadigma, o que aumenta a flexibilidade do
desenvolvimento. Caso você queira trabalhar com orientação à objetos, a
linguagem possui um modelo de herança baseada em protótipo. É possível também
utilizar os conceitos como encapsulamento, polimorfismo e composição de forma
bastante simples.&lt;/p&gt;
&lt;p&gt;No entanto, se você prefere uma abordagem mais funcional, o JavaScript contém
várias características herdadas das linguagens funcionais que incluem: funções
de alta ordem e &lt;i lang=&quot;en&quot;&gt;closures&lt;/i&gt;. Alguns métodos clássicos das
linguagens funcionais estão presentes no JavaScript, tais como &lt;span lang=&quot;en&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&quot;&gt;&lt;code&gt;Array#map&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;,
&lt;span lang=&quot;en&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;&lt;code&gt;Array#filter&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;
e &lt;span lang=&quot;en&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt;&lt;code&gt;Array#reduce&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;h4 id=&quot;reusabilidade&quot; tabindex=&quot;-1&quot;&gt;Reusabilidade &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/porque-voce-deveria-aprender-javascript/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Código escrito em JavaScript é portável e facilmente reusável em outros locais.
A linguagem segue um princípio forte de retrocompatibilidade, então é bem
possível você pegar um código de dez anos atrás e executá-lo com sucesso em
qualquer máquina virtual recente.&lt;/p&gt;
&lt;p&gt;Além disso, possibilidade de executar o mesmo código tanto no cliente quanto em
servidores &lt;em&gt;web&lt;/em&gt; permite um ganho de produtividade imenso. Outro destaque da
linguagem é a facilidade e disponibilidade de utilizar códigos de terceiros com
a utilização do NPM.&lt;/p&gt;
&lt;h2 id=&quot;conclusao&quot; tabindex=&quot;-1&quot;&gt;Conclusão &lt;a class=&quot;header-anchor&quot; href=&quot;https://maxroecker.github.io/blog/porque-voce-deveria-aprender-javascript/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hoje, a &lt;strong&gt;Lei de Atwood&lt;/strong&gt; nunca pareceu ser tão verdadeira. O JavaScript tem
dominado todas as áreas de desenvolvimento de aplicações, desde
&lt;a href=&quot;https://developers.facebook.com/docs/javascript&quot;&gt;aplicativos sociais&lt;/a&gt;,
&lt;a href=&quot;https://www.google.com/docs/about/&quot;&gt;suítes de programas de escritório&lt;/a&gt; ou
&lt;a href=&quot;http://phaser.io/&quot;&gt;jogos&lt;/a&gt; com grande processamento gráfico.&lt;/p&gt;
&lt;blockquote cite=&quot;http://blog.codinghorror.com/the-principle-of-least-power/&quot;&gt;
&lt;p&gt; Qualquer aplicação que possa ser escrita em JavaScript, eventualmente será
escrita em JavaScript. &lt;/p&gt; &lt;footer&gt; &lt;a href=&quot;http://blog.codinghorror.com/the-principle-of-least-power/&quot;&gt; Jeff Atwood
&lt;/a&gt; &lt;/footer&gt; &lt;/blockquote&gt;
&lt;p&gt;Aprender JavaScript pode lhe abrir várias oportunidades e, além disso, nunca é
demais possuir mais uma habilidade no seu inventário.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://maxroecker.github.io/blog/hello-world/"/>
    <updated>2015-08-15T10:25:33Z</updated>
    <id>https://maxroecker.github.io/blog/hello-world/</id>
    <content type="html">&lt;p&gt;Era quarta-feira, dia 12 de agosto, quando estava conversando com meu grande
amigo João Luiz, entusiasmado com um &lt;em&gt;framework&lt;/em&gt; para &lt;em&gt;node.js&lt;/em&gt; que acabávamos
de fazer funcionar e de como foi sofrido para reconfigurá-lo, pois nem eu ou ele
lembramos de anotar os passos. E então surgiu a ideia de fazer anotações sobre o
que aprendemos, para facilitar encontrar essas informações depois — e com isso a
ideia de um blog.&lt;/p&gt;
&lt;p&gt;Resolvi bater uma aposta comigo mesmo em manter a regularidade de posts nesse
blog, escrevendo sobre coisas que eu tenho mais interesse: computadores e web.
Ainda tem muito o que melhorar por aqui, mas para um começo está bom.&lt;/p&gt;
</content>
  </entry>
</feed>
