{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Max N. Roecker",
	"language": "pt-br",
	"home_page_url": "https://maxroecker.github.io/",
	"feed_url": "https://maxroecker.github.io/feed/feed.json",
	"description": "Página e Blog de Max Naegeler Roecker",
	"author": {
		"name": "Max Naegeler Roecker",
		"url": "https://maxroecker.github.io"
	},
	"items": [
		{
			"id": "https://maxroecker.github.io/blog/cruxhash",
			"url": "https://maxroecker.github.io/blog/cruxhash",
			"title": "Apresentando: CRUXHash",
			"content_html": "<p><em>Hash</em> é, provavelmente, um dos conceitos mais importantes que um programador\ndeve conhecer. É por meio de <em>hashes</em> que conseguimos criar as\n<a href=\"https://en.wikipedia.org/wiki/Hash_table\">tabelas <em>hash</em></a>, <a href=\"https://auth0.com/blog/hashing-passwords-one-way-road-to-security/\">armazenar senhas de\nforma\nsegura</a>,\n<a href=\"https://en.wikipedia.org/wiki/Checksum\">fazer detecção de erros</a> e também\n<a href=\"https://en.wikipedia.org/wiki/One-way_compression_function\">compressão de dados</a>.\nSão <em>hashes</em> que também permitem criar <a href=\"https://en.wikipedia.org/wiki/Bloom_filter#Cache_filtering\">sistemas de cache globais em redes de\nfornecimento de\nconteúdo</a>,\npopularmente conhecidas como CDNs.</p>\n<p>Formalmente, uma função <em>hash</em>, traduzida em português como “função de\nespalhamento”, é uma função que mapeia um conjunto de dados de tamanho\narbitrário em um conjunto de dados de tamanho fixo. Veja, por exemplo, a função\nabaixo:</p>\n<figure>\n<math display=\"block\">\n  <mrow>\n    <mi>f</mi>\n    <mo>:</mo>\n    <mi>ℤ</mi>\n    <mo>→</mo>\n    <mi>ℤ</mi>\n    <mtext>&#x00A0;&#x00A0;tal que&#x00A0;&#x00A0;</mtext>\n    <mi>f</mi>\n    <mo stretchy=\"false\">(</mo>\n    <mi>x</mi>\n    <mo stretchy=\"false\">)</mo>\n    <mo>=</mo>\n    <mi>x</mi>\n    <mo>mod</mo>\n    <mn>10</mn>\n  </mrow>\n</math>\n</figure>\n<p>Essa função pode ser considerada uma função <em>hash</em>. Ela receberá um número\ninteiro qualquer e irá retornar o resto da divisão por dez. Qualquer resto de\ndivisão por um número <math display=\"inline\"><mi>n</mi></math>, será um número entre\n<math display=\"inline\"><mn>0</mn></math> e <math display=\"inline\"><mo stretchy=\"false\">(</mo><mi>n</mi><mo>-</mo><mn>1</mn><mo stretchy=\"false\">)</mo>\n</math>, ou seja, um intervalo fixo. Veja outra função\nabaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hashStr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> hashed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    hashed <span class=\"token operator\">=</span> hashed <span class=\"token operator\">^</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> hashed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>A função <code>hashStr</code> acima, escrita em JavaScript, também pode ser considerada uma\nfunção <em>hash</em>. Afinal, ela converte uma <em>string</em> de tamanho arbitrário em um\nnúmero, combinando caractere a caractere. O operador <code>^</code>, nesse exemplo, está\nfazendo um\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">“ou-exclusivo binário”</a>,\nque sempre retorna um número de 32 bits.</p>\n<p>Os resultados de uma função <em>hash</em> são chamados de <em>hash codes</em>, <em>digests</em> ou\nsimplesmente <em>hashes</em>. Boas funções <em>hash</em> são rápidas e puras, ou seja, a mesma\nentrada sempre irá retornar a mesma saída.</p>\n<h2 id=\"diferenciando-objetos\" tabindex=\"-1\">Diferenciando objetos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/cruxhash\">#</a></h2>\n<p>Outro uso bastante comum é a possibilidade de diferenciar rapidamente objetos\ncom múltiplas propriedades. Suponha que você queira comparar dois objetos por\nmeio das propriedades que compõem cada um deles. Uma solução trivial seria\ncomparar cada propriedade, par-à-par, e, se todas forem equivalentes, os objetos\nserão considerados iguais. No entanto, caso alguma propriedade for diferente, os\nobjetos serão diferentes. Veja a tabela abaixo, onde comparamos dois objetos,\n<code>A</code> e <code>B</code>:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Propriedade</th>\n<th><code>A</code></th>\n<th><code>B</code></th>\n<th style=\"text-align:center\">Iguais?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>nome</code></td>\n<td><code>Pedremildo</code></td>\n<td><code>Pedremildo</code></td>\n<td style=\"text-align:center\">✓</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>sobrenome</code></td>\n<td><code>Trunk</code></td>\n<td><code>Trunk</code></td>\n<td style=\"text-align:center\">✓</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>nascimento</code></td>\n<td><code>1991-08-14</code></td>\n<td><code>1991-08-04</code></td>\n<td style=\"text-align:center\">✗</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>email</code></td>\n<td><code>email@exemplo.com</code></td>\n<td><code>email@exemplo.com</code></td>\n<td style=\"text-align:center\">◌</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Resultado</strong></td>\n<td></td>\n<td></td>\n<td style=\"text-align:center\">Diferentes</td>\n</tr>\n</tbody>\n</table>\n<p>Se compararmos <code>A</code> e <code>B</code>, vemos que os objetos não são iguais porque a\npropriedade <code>nascimento</code> é diferente. Note que, precisamos comparar até o\nmomento em que uma propriedade possua valores diferentes. Por isso, a\npropriedade <code>email</code> sequer é verificada. Assim, esse algoritmo é linearmente\nproporcional à quantidade de propriedades que devemos comparar.</p>\n<p>Essa solução acima pode ser utilizada para objetos pequenos, com algumas dezenas\nde propriedades. No entanto, imagine um objeto mais complexo, com centenas de\npropriedades. Ou ainda que seja aninhado, com objetos internos e precisam ser\ncomparados entre si da mesma forma. Você pode ver que, nesse cenário, comparar\npropriedade por propriedade pode demorar um pouco…</p>\n<p>Para nos ajudar com essa tarefa, podemos utilizar <em>hash</em> que sirva como uma\n“assinatura” para o objeto. Esse <em>hash</em> pode ser criado por meio das\npropriedades do próprio objeto. Assim, quando compararmos a igualdade de um\nobjeto com outro, podemos verificar primeiro a assinatura. Se a assinatura for\ndiferente, não precisamos verificar nenhuma outra propriedade, porque alguma\ndelas será diferente.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Propriedade</th>\n<th><code>A</code></th>\n<th><code>B</code></th>\n<th style=\"text-align:center\">Iguais?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>hash</code></td>\n<td><code>19735</code></td>\n<td><code>28465</code></td>\n<td style=\"text-align:center\">✗</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>nome</code></td>\n<td><code>Pedremildo</code></td>\n<td><code>Pedremildo</code></td>\n<td style=\"text-align:center\">◌</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>sobrenome</code></td>\n<td><code>Trunk</code></td>\n<td><code>Trunk</code></td>\n<td style=\"text-align:center\">◌</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>nascimento</code></td>\n<td><code>1991-08-14</code></td>\n<td><code>1991-08-04</code></td>\n<td style=\"text-align:center\">◌</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>email</code></td>\n<td><code>email@exemplo.com</code></td>\n<td><code>email@exemplo.com</code></td>\n<td style=\"text-align:center\">◌</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Resultado</strong></td>\n<td></td>\n<td></td>\n<td style=\"text-align:center\">Diferentes</td>\n</tr>\n</tbody>\n</table>\n<p>Veja que agora, quando comparamos a propriedade <code>hash</code>, que foi construída a\npartir das propriedades do objeto, temos imediatamente um valor diferente, sem\nprecisar consultar as outras propriedades. No entanto, se as assinaturas forem\niguais, isso significa que os objetos são iguais?</p>\n<h2 id=\"colisoes\" tabindex=\"-1\">Colisões <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/cruxhash\">#</a></h2>\n<p>Como já vimos, uma função <em>hash</em> mapeia um conjunto de tamanho arbitrário em um\nconjunto de tamanho fixo. Como você está mapeando um conjunto de dados\npossivelmente maior em um conjunto de dados fixo, pelo\n<a href=\"https://pt.wikipedia.org/wiki/Princ%C3%ADpio_da_casa_dos_pombos\">princípio da casa dos pombos</a>,\nalguns valores diferentes na entrada vão ser mapeados para uma mesma saída.\nQuando isso acontece, temos uma <strong>colisão</strong>.</p>\n<p>Colisões são problemáticas para funções <em>hash</em>. Em tabelas <em>hash</em>, <a href=\"https://en.wikipedia.org/wiki/Hash_table#Collision_resolution\">colisões\ndiminuem o\ndesempenho</a>. Em\ncriptografia,\n<a href=\"https://en.wikipedia.org/wiki/Collision_attack\">colisões diminuem a segurança</a>.\nEm compressão de dados,\n<a href=\"https://en.wikipedia.org/wiki/One-way_compression_function\">colisões diminuem a taxa de compactação</a>.\nBoas funções <em>hash</em> desejam diminuir a taxa de colisão tentando seguir uma\ndistribuição uniforme. Assim, nenhum intervalo terá mais ou menos chances de\nsofrer colisão.</p>\n<p>Em nosso caso de comparação de objetos, colisões nos obrigam a ter que comparar,\ninevitavelmente, todas as propriedades. Afinal, mesmo que dois objetos tenham o\nmesmo <em>hash</em>, eles ainda podem ser diferentes. Só conferindo todas as\npropriedades que temos a garantia que os objetos são realmente iguais. Agora, se\nassinatura for diferente, temos a garantia de que o objeto não é igual. Por\nisso, utilizar <em>hashes</em> é uma forma de agilizar o processo de diferenciar\nobjetos.</p>\n<aside>\n<p>\n  <a href=\"https://en.wikipedia.org/wiki/Bloom_filter\">Bloom filter</a> é uma\n  estrutura de dados probabilística que utiliza <em lang=\"en\">hash</em> e que\n  possui um fundamento parecido. Ela permite verificar se um elemento está no\n  conjunto ou não.\n</p>\n<p>\n  Falsos positivos podem acontecer, mas falsos negativos não. Portanto, a\n  estrutura é capaz de responder sobre a pertinência de um elemento de duas\n  formas: “pode estar no conjunto” ou “não está no conjunto“.\n</p>\n</aside>\n<h2 id=\"apresentando-cruxhash\" tabindex=\"-1\">Apresentando: CRUXHash <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/cruxhash\">#</a></h2>\n<p>Para facilitar a criação de <em>hashes</em> de valores primitivos ou objetos em\nJavaScript, criei uma pequena biblioteca: a\n<a href=\"https://github.com/MaxRoecker/cruxhash\"><strong>CRUXHash</strong></a>. Para instalar, utilize o\nnpm.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i cruxhash</code></pre>\n<p>A CRUXHash é uma biblioteca que provê um conjunto de funções simples para criar\n<em>hashes</em> inteiros e sem sinal para valores em JavaScript. Veja o exemplo abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> hash<span class=\"token punctuation\">,</span> getSeed <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'cruxhash'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Smile, my dear!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 897319059</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getSeed</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my seed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1866919164</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">'コンニチハ, Hello world, Καλημέρα κόσμε 😀'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1149923829</span></code></pre>\n<p>A sua principal função, <code>hash</code>, permite criar um <em>hash</em> de qualquer valor\nprimitivo JavaScript: uma <em>string</em>, um booleano, um número… Além disso, permite\nque você passe, como segundo parâmetro, um <code>seed</code>, um número que inicializa o\nprocesso e que pode trazer resultados diferentes de acordo com sua necessidade.</p>\n<aside>\n  <p>\n    A implementação de <em lang=\"en\">hash</em> de <em lange=\"en\">strings</em>\n    é baseada no algoritmo\n    <a href=\"https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp\">Murmur3.</a>\n    Já o <em lang=\"en\">hash</em> de números é baseado no algoritmo de\n    <a href=\"http://burtleburtle.net/bob/hash/integer.html\">\n      sete saltos de <em lang=\"en\">bits</em> de Thomas Wang.\n    </a>\n  </p>\n</aside>\n<p>Para tratar de objetos, a função <code>hash</code> trabalha de uma forma especial. Primeiro\nela verifica se o objeto possui um método <code>hashCode</code> e passa, recursivamente,\nseu resultado para o <code>hash</code>. Esse comportamento é útil para reutilizar objetos\ncom um processo de <em>hash</em> já definido. Veja:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> hash <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'cruxhash'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1858670630</span>\n\nobj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 796438301</span></code></pre>\n<p>Se o objeto possuir o método <code>valueOf</code> sobrescrito, como é o caso de objetos\ninstâncias de <code>Date</code>, <code>Number</code>, <code>Boolean</code>, etc… a função <code>hash</code> irá\nconsiderá-lo.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> hash <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'cruxhash'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2014-07-08'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 271363852</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2014-07-08'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 271363852</span></code></pre>\n<p>Todo objeto que herde <code>Object.prototype</code>, terá o <code>valueOf</code> implementado. No\nentanto, essa implementação sempre retorna o próprio objeto. Para evitar uma\nrecursão infinita, o método obriga que o <code>valueOf</code> seja sobrescrito.</p>\n<p>Agora, se o objeto implementar o\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">Protocolo Iterável</a>,\num <em>hash</em> será criado a partir de cada elemento do iterável e, ao final, todos\nserão combinados em um <em>hash</em> só. Veja:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> hash <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'cruxhash'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> objA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> objB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> objC <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>objA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2974883921</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>objB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2974883921</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>objC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 473105883</span></code></pre>\n<p>Veja que, os iteráveis <code>objA</code> e <code>objB</code> possuem uma sequência com os mesmos\nelementos na mesma ordem e, por isso, seus <em>hashes</em> são idênticos. Veja, também,\nque a ordem faz diferença. A mudança de ordem dos elementos nos iteráveis <code>objA</code>\ne <code>objC</code> resulta em um <em>hash</em> completamente diferente.</p>\n<aside>\n  <p>\n    Em funções <em>hash</em>, é desejável que pequenas mudanças na entrada que\n    causem grandes diferenças na saída. Esse comportamento é conhecido como\n    <a href=\"https://en.wikipedia.org/wiki/Avalanche_effect\">efeito avalanche.</a>\n  </p>\n</aside>\n<p>No entanto, a função <code>hash</code> vai tratar de forma especial estruturas onde a ordem\ndos elementos não importa, como é o caso do <code>Set</code> ou <code>Map</code>. Veja:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> hash <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./index'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1421611346</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1421611346</span></code></pre>\n<p>E por fim, caso você passe um objeto simples, o <em>hash</em> será criado com base no\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\"><code>Object.entries</code>,</a>\nou seja, objetos que possuírem mesmas propriedades com mesmos valores, terão\n<em>hashes</em> iguais.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> hash <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./index'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1418113148</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1418113148</span></code></pre>\n<h2 id=\"conclusoes\" tabindex=\"-1\">Conclusões <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/cruxhash\">#</a></h2>\n<p>Finalizo por aqui a apresentação da CRUXHash. A biblioteca disponibiliza outras\nfunções para usos em casos mais específicos. Por isso, recomendo que você veja\nno <a href=\"https://github.com/MaxRoecker/cruxhash\">repositório oficial</a> a documentação\nda API disponível.</p>\n<p>Criei essa biblioteca de acordo com minha necessidade em projetos pessoais e\nprofissionais. Caso você queira adicionar algum comportamento, entre em contato\ncomigo. PRs são sempre bem vindos!</p>\n<h2 id=\"agradecimentos\" tabindex=\"-1\">Agradecimentos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/cruxhash\">#</a></h2>\n<p>Agradeço meu amigo\n<a href=\"https://www.linkedin.com/in/henrique-neves-da-silva-5a93a660/\">Henrique Neves</a>\npela revisão e pelas considerações importantes no texto!</p>\n",
			"date_published": "2021-05-14T23:33:49Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/web-components-2",
			"url": "https://maxroecker.github.io/blog/web-components-2",
			"title": "Web Components #2",
			"content_html": "<p>Como vimos <a href=\"https://maxroecker.github.io/blog/web-components-1/\">na publicação anterior</a>, o termo <em>web\ncomponents</em> se refere ao conjunto de APIs disponibilizadas na plataforma <em>web</em>\nque permitem a criação de elementos personalizados que podem ser instanciados de\nforma declarativa como qualquer <em>tag</em> HTML.</p>\n<p>Com a API de\n<a href=\"https://html.spec.whatwg.org/#custom-elements\"><strong>elementos personalizados</strong></a>,\nos desenvolvedores são capazes de criar novas <em>tags</em> HTML. É a API fundamental\npara os <em>web components</em> e traz uma forma padronizada de criar componentes\nreutilizáveis com nada mais que HTML, CSS e JavaScript. Sem a necessidade de\nutilizar uma bibliotecas ou <em>frameworks</em>. Dessa forma, temos menos código, mais\ncompatibilidade e mais reutilização.</p>\n<h2 id=\"introducao\" tabindex=\"-1\">Introdução <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/web-components-2\">#</a></h2>\n<p><a href=\"https://maxroecker.github.io/blog/web-components-1/\">Como já vimos</a>, para definir um elemento personalizado\nbasta você estender a classe <code>HTMLElement</code> e associar ela à uma <em>tag</em>,\nutilizando o método <code>define</code> do global <code>customElements</code>. Para exemplificar,\nvamos criar um componente chamado <code>wc-counter</code>, que irá ser um simples contador.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">WCCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nwindow<span class=\"token punctuation\">.</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wc-counter'</span><span class=\"token punctuation\">,</span> WCCounter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Assim, podemos utilizar nosso elemento da seguinte forma:</p>\n<pre class=\"language-html\" tabindex=\"0\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>wc-counter</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>wc-counter</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>É importante lembrar que utilizar um elemento personalizado não é diferente de\nutilizar um <code>div</code> ou qualquer outro elemento do HTML. No entanto, algumas regras\nde nomenclatura precisam ser seguidas:</p>\n<ol>\n<li>O nome precisa conter um hífen (<code>-</code>). Dessa forma o analisador sintático pode\ndistinguir um elemento personalizado de elementos padrões. Além disso,\nprevine conflitos caso novas <em>tags</em> forem adicionadas ao HTML no futuro.</li>\n<li>Você não pode registrar uma mesma <em>tag</em> mais uma vez. Fazer isso irá lançar\num <code>DOMException</code>. Uma vez que uma <em>tag</em> está associada à uma classe, não há\nvolta.</li>\n<li>Elementos personalizados só podem ser utilizados em par. Ou seja, se você\ndeclarou um elemento como <code>meu-elemento</code>, você deve escrevê-lo como\n<code>&lt;meu-elemento&gt;&lt;/meu-elemento&gt;</code>. Escrever <code>&lt;meu-elemento /&gt;</code> não funciona.</li>\n</ol>\n<h2 id=\"definindo-a-api-do-elemento\" tabindex=\"-1\">Definindo a API do elemento <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/web-components-2\">#</a></h2>\n<p>Como utilizamos a <a href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4/\">sintaxe <code>class</code></a>\npara definir o construtor do elemento, já utilizamos o <code>extends</code> para estender o\ncomportamento do <code>HTMLElement</code>. Estender o comportamento do <code>HTMLElement</code>\ngarante que seu elemento irá seguir a API do DOM e significa que qualquer\npropriedade ou métodos que você adicione à classe se tornam parte da interface\nDOM do elemento. Ou seja, podemos utilizar a classe para definir a API pública\nda sua <em>tag</em>.</p>\n<p>Imagine que queremos adicionar duas propriedades: <code>value</code> e <code>disabled</code>, que\nindica o valor atual do contador e se está desabilitado ou não, respectivamente.\nVamos adicionar também dois métodos: <code>increment</code> e <code>decrement</code>, que aumentam e\ndiminuem o contador em uma unidade. Veja:</p>\n<p><playground-ide project-src=\"/projects/2018-04-02-web-components-2/1/project.json\" line-numbers=\"\" resizable=\"\">\n</playground-ide></p>\n<p>Nesse exemplo estamos criando as propriedades <code>value</code> e <code>disabled</code> utilizando\n<em>getters</em> e <em>setters</em> de objetos do JavaScript. Além disso, estamos refletindo\nseus valores em atributos no DOM por meio dos métodos <code>setAttribute</code> e\n<code>removeAttribute</code>.</p>\n<aside>\n<p>\n  Como qualquer elemento personalizado estende a classe\n  <code>HTMLElement</code>, toda a API do DOM está disponível no código do\n  próprio elemento. Ou seja, é possível manipular atributos com\n  <code>setAttribute</code> e <code>removeAttribute</code>, adicionar ouvintes\n  de eventos com <code>addEventListener</code>, acessar os descendentes com\n  <code>children</code> ou selecionar elementos com <code>querySelector</code>.\n</p>\n</aside>\n<h2 id=\"definindo-o-comportamento-do-elemento\" tabindex=\"-1\">Definindo o comportamento do elemento <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/web-components-2\">#</a></h2>\n<p><a href=\"https://maxroecker.github.io/blog/web-components-1/\">Na publicação anterior</a>, vimos que é possível\nadicionar conteúdo ao elemento manipulando o DOM. Também vimos que para garantir\no encapsulamento do elemento, é importante utilizar um <em>shadow</em> DOM. Vamos\nadicionar, ao <em>shadow</em> DOM, três elementos: um <code>button</code> para decrementar o\nvalor, um <code>span</code> para exibir o valor e outro <code>button</code> para incrementar o valor.</p>\n<p>Podemos exibir os valor no <code>span</code> apropriado e adicionar ouvintes para reagir as\ninterações do usuário quando o elemento for conectado à árvore principal do DOM,\npor meio do método <code>connectedCallback</code>. Além disso, podemos reagir às mudanças\nnas propriedades <code>value</code>, assim, quando <code>value</code> for alterado, vamos alterar o\nconteúdo do elemento. Podemos fazer isso alterando os <em>setters</em> de cada\npropriedade. Veja abaixo:</p>\n<p><playground-ide project-src=\"/projects/2018-04-02-web-components-2/2/project.json\" line-numbers=\"\" resizable=\"\">\n</playground-ide></p>\n<p>E se eu quiser instanciar nosso <code>wc-counter</code> com um valor definido? Relembrando\ncomo outros elementos do HTML funcionam, bastaria eu adicionar o nome da\npropriedade e o valor na marcação, como abaixo:</p>\n<pre class=\"language-html\" tabindex=\"0\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>wc-counter</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>wc-counter</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>No entanto, você vai perceber que isso não tem efeito algum. Não funciona porque\nainda não sincronizamos o atributo <code>value</code> à propriedade <code>value</code>. Atributos e\npropriedades são\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes#content_versus_idl_attributes\">mecanismos distintos</a>\nno DOM e não necessariamente sincronizados. Um atributo indica uma marcação no\ndocumento e serializado em uma <em>string</em>, já uma propriedade é um valor no objeto\ne pode ter qualquer tipo de valor do JavaScript.</p>\n<aside>\n  <p>\n    O elemento <code>input</code>, por exemplo, possui o atributo\n    <code>value</code> que inicializa a propriedade homônima. No entanto, após a\n    instanciação, não há reflexão entre o atributo e propriedade. Mudanças na\n    propriedade não alteram o atributo e mudanças no atributo não alteram a\n    propriedade.\n  </p>\n</aside>\n<h2 id=\"reagindo-a-mudancas-nos-atributos\" tabindex=\"-1\">Reagindo a mudanças nos atributos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/web-components-2\">#</a></h2>\n<p>Para reagir a mudanças nos atributos precisamos definir quais atributos serão\nobservados. Para isso, crie a propriedade estática <code>observedAttributes</code>, que\nretorne o nome dos atributos que queira observar. Após isso, sobrescreva o\nmétodo <code>attributeChangedCallback</code>, que recebe como argumento três valores: o\nnome, o valor anterior e o valor atual do atributo. O método\n<code>attributeChangedCallback</code> sempre é chamado quando um atributo observado for\nalterado. Veja:</p>\n<p><playground-ide project-src=\"/projects/2018-04-02-web-components-2/3/project.json\" line-numbers=\"\" resizable=\"\">\n</playground-ide></p>\n<p>Veja que o qualquer mudança no atributo irá ser refletida na propriedade. A\nmarcação no HTML funciona como o esperado e inicializa a propriedade com o valor\n<code>8</code>. Também adicionamos a reação de desativar os botões caso o atributo\n<code>disabled</code> esteja definido.</p>\n<aside>\n  <p>\n    Tome cuidado com os efeitos colaterais dentro do\n    <code>attributeChangedCallback</code>. Poderíamos, por exemplo, ser tentados\n    a adicionar essa reação ao <i lang=\"en\">setter</i> da propriedade\n    <code>disabled</code>. No entanto, este <i lang=\"en\">setter</i> manipula o\n    próprio atributo <code>disabled</code>, que dispara novamente o\n    <code>attributeChangedCallback</code>… causando um <i lang=\"en\">loop</i>\n    infinito.\n  </p>\n</aside>\n<h2 id=\"estilizando-de-acordo-com-o-estado\" tabindex=\"-1\">Estilizando de acordo com o estado <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/web-components-2\">#</a></h2>\n<p>Como também já vimos, podemos estilizar o elemento utilizando um <code>&lt;style&gt;</code>\nencapsulado pelo <em>shadow</em> DOM. Suponha que você queira estilizar o texto do\n<code>span</code> para negrito, bastaria mudar a marcação atribuída no <em>shadow</em> DOM. No\nentanto, se você estilizar o “próprio” elemento hospedeiro do <em>shadow</em> DOM, você\nutiliza o pseudo-seletor <code>:host</code>. Vamos mudar para que elemento hospedeiro se\ncomporte tal como um <code>block</code>:</p>\n<p><playground-ide project-src=\"/projects/2018-04-02-web-components-2/4/project.json\" line-numbers=\"\" resizable=\"\">\n</playground-ide></p>\n<p>Veja que também diminuímos a opacidade caso o elemento esteja desabilitado. Uma\nvez que nosso elemento reflete a propriedade no atributo <code>disabled</code>, podemos\nutilizar seletores de atributos para reagir a essa mudança.</p>\n<aside>\n  <p>\n    Por padrão, qualquer elemento personalizado possui a propriedade\n    <code>display</code> como <code>inline-block</code>.\n  </p>\n</aside>\n<p>Elementos personalizados podem ser estilizados utilizando CSS como qualquer\noutro elemento HTML. Ou seja, se o usuário do nosso elemento <code>wc-counter</code> quiser\nmudar o elemento, ele pode. Lembre-se, o encapsulamento só impede que os estilos\nda <em>shadow</em> DOM “vazem” para o DOM principal, no entanto o efeito cascata do CSS\ncontinua valendo.</p>\n<p><playground-ide project-src=\"/projects/2018-04-02-web-components-2/5/project.json\" line-numbers=\"\" resizable=\"\">\n</playground-ide></p>\n<p>Veja também que “adicionamos” um delay na definição do elemento, e, enquanto ele\nnão é definido, aplicou-se um estilo temporário com o uso da pseudo-classe\n<code>:defined</code>. Caso não tenha visto, recarregue o resultado clicando no botão “↻”.</p>\n<h2 id=\"elementos-nao-definidos-e-desconhecidos\" tabindex=\"-1\">Elementos não definidos e desconhecidos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/web-components-2\">#</a></h2>\n<p>O HTML é bastante flexível. Por exemplo, ao declarar uma <em>tag</em> <code>&lt;accordion&gt;</code> em\num documento, o navegador vai aceitá-la sem problemas, mesmo que <code>&lt;accordion&gt;</code>\nnão faça parte do vocabulário. Esse comportamento é previsto pela <a href=\"https://html.spec.whatwg.org/multipage/dom.html#htmlunknownelement\">própria\nespecificação do\nHTML</a>.\nElementos desconhecidos são instâncias de <code>HTMLUnknownElement</code>.</p>\n<p>O mesmo não vale para elementos personalizados. Elementos personalizados\n“potenciais” são sempre instâncias de <code>HTMLElement</code>, mesmo que ainda não foram\ndefinidos. Ou seja, se você criar um elemento com uma <em>tag</em> que contém um <code>-</code>,\nesse elemento será instância de <code>HTMLElement</code>. Veja:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// \"accordion\" não é um elemento conhecido do HTML nem um elemento personalizado</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'accordion'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HTMLUnknownElement</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\n\n<span class=\"token comment\">// \"wc-accordion\" é um nome válido para elemento personalizado</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wc-accordion'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HTMLUnknownElement</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → false</span></code></pre>\n<p>O global <code>customElements</code> também contém alguns métodos úteis. Por exemplo, caso\nvocê já tenha registrado um elemento personalizado, você pode pegar uma\nreferência do construtor utilizando o método <code>get</code> e passando a <em>tag</em>. Caso o\nelemento não tenha sido registrado ainda, <code>get</code> retorna <code>undefined</code>.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">let</span> WCCounter <span class=\"token operator\">=</span> customElements<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wc-counter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WCCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Você também pode definir <em>callbacks</em> para futuras definições de elementos com o\nmétodo <code>whenDefined</code>. Este método retorna uma instância de <code>Promise</code> que\nresolve-se quando o elemento for definido ou rejeita-se quando o nome passado\nnão for um nome de elemento personalizado válido.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">customElements<span class=\"token punctuation\">.</span><span class=\"token function\">whenDefined</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wc-counter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\"wc-counter\" está pronto!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"conclusao\" tabindex=\"-1\">Conclusão <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/web-components-2\">#</a></h2>\n<p>Elementos personalizados são uma forma de definir novas <em>tags</em> HTML e permitem a\ncriação de componentes reutilizáveis quando combinado com outras tecnologias,\ncomo o <em>shadow</em> DOM. Eles fornecem várias vantagens:</p>\n<ul>\n<li>Interoperabilidade entre os navegadores;</li>\n<li>São bem integrados à ferramentas de <em>debug</em> já presentes nos navegadores e\nconhecidas pelos desenvolvedores;</li>\n<li>Não precisam de qualquer biblioteca ou <em>framework</em> para iniciar e provêm um\nmodelo de programação familiar ao DOM. Você precisa apenas de HTML, CSS e\nJavaScript.</li>\n</ul>\n<p>Mas essa série de publicações ainda não acabou. Ainda temos que falar sobre\noutras especificações que pertencem ao “ecossistema” de <em>web components</em>. Até a\npróxima!</p>\n",
			"date_published": "2018-04-02T19:49:13Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/ids-globais",
			"url": "https://maxroecker.github.io/blog/ids-globais",
			"title": "IDs são globais",
			"content_html": "<p>Você sabia que se você precisar acessar um elemento de um documento HTML marcado\ncom um <code>id</code>, basta você acessar a variável com o mesmo nome? Ou seja, se você\ntiver uma marcação assim:</p>\n<pre class=\"language-html\" tabindex=\"0\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>foo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>No console do navegador você pode digitar <code>foo</code> e terá acesso ao elemento DOM.\n<strong>Mas, por quê?</strong> É um comportamento padrão dos navegadores para\nfacilitar o <em>debug</em> ou isso é o padrão esperado?</p>\n<p>Na verdade, o comportamento acima é previsto pelo próprio HTML. A\n<a href=\"https://html.spec.whatwg.org/#named-access-on-the-window-object\">especificação do HTML</a>\ndetermina que o objeto <code>window</code> deve conter uma propriedade que referencia um\nelemento da árvore DOM se:</p>\n<ul>\n<li>Há apenas um elemento no documento o qual o nome da propriedade seja igual ao\natributo <code>id</code>.</li>\n<li>Há apenas um elemento no documento o qual o nome da propriedade seja igual ao\natributo <code>name</code> e este elemento for um <code>a</code>, <code>applet</code>, <code>embed</code>, <code>form</code>,\n<code>frame</code>, <code>frameset</code>, <code>iframe</code>, <code>img</code> ou <code>object</code>.</li>\n</ul>\n<p>Em certos casos onde há mais de um elemento que satisfaça as condições acima,\noutras regras são aplicadas e um\n<a href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/HTMLCollection\"><code>HTMLCollection</code></a>\npode ser retornado ao acessar a variável. No entanto, a ideia principal é\nmantida: uma variável representando elementos no DOM será criada no escopo\nglobal. Assim, o código abaixo funciona tal como o esperado, afinal, acessar uma\nvariável global é acessar uma propriedade do <code>window</code>:</p>\n<pre class=\"language-html\" tabindex=\"0\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Clique aqui!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    btn<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Você clicou!'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>No entanto, é preciso de atenção. Se já existir uma variável com o valor, ela\nnão será substituída pela referência do elemento. Por exemplo, se escrever o\natributo <code>id=&quot;fetch&quot;</code> ele não irá substituir a\n<a href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/Fetch_API\">função <code>fetch</code></a>\npresente nos navegadores modernos.</p>\n<p>Como a própria especificação diz, este é um comportamento para manter a\nretrocompatibilidade e não recomendam se apoiar nele para desenvolver seus\ncódigos. Além disso, conforme novas funcionalidades vão sendo adicionadas à\nplataforma <em>web</em>, aumentam as chances de haver um conflito de nomes e seu código\ndeixar de funcionar. Por isso, quando precisar selecionar um elemento na árvore\nDOM, utilize as funções\n<a href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/Document/getElementById\"><code>document.getElementById</code></a>\nou\n<a href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/Document/querySelector\"><code>document.querySelector</code></a>.</p>\n",
			"date_published": "2018-02-22T10:34:01Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/web-components-1",
			"url": "https://maxroecker.github.io/blog/web-components-1",
			"title": "Web Components #1",
			"content_html": "<p>Você já deve conhecer o HTML, certo? Uma ótima ferramenta para construir\naplicações na <em>web</em>. O HTML é declarativo, portável, bem suportado e fácil de\ntrabalhar. Quando você está construindo um documento ou uma aplicação com HTML\nvocê tem algumas opções disponíveis. Você quer criar uma âncora? Utilize a <em>tag</em>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\"><code>&lt;a&gt;</code></a>. Quer criar\num parágrafo? Utilize a <em>tag</em>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p\"><code>&lt;p&gt;</code></a>. Um botão?\nVocê pode utilizar a <em>tag</em>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\"><code>&lt;button&gt;</code></a>\nou a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/button\"><code>&lt;input type=&quot;button&quot;&gt;</code></a>.</p>\n<p>Mas e se, por exemplo, você quiser criar uma\n<a href=\"https://en.wikipedia.org/wiki/Tab_(interface)\">aba</a>? Que <em>tag</em> do HTML você vai\nusar? E se for um <a href=\"https://en.wikipedia.org/wiki/Tooltip\"><em>tooltip</em></a> ou um\n<a href=\"https://en.wikipedia.org/wiki/Accordion_(GUI)\"><em>accordion</em></a>? O vocabulário do\nHTML é limitado e não existe uma <em>tag</em> que descreva completamente cada um dos\nelementos de interface anteriores. Normalmente, tais componentes envolvem\nutilizar mais de uma <em>tag</em> HTML associado à um pouco de comportamento dado em um\n<em>script</em>. Isso não é uma tarefa simples. E fica cada vez mais complexa quanto\nmais elementos em tela você precisar controlar. Não seria mais fácil uma forma\nde você poder “estender” o HTML e poder criar elementos personalizados para a\nsua necessidade, encapsulando estilo, comportamento e marcação em uma só\n“entidade”?</p>\n<figure>\n  <img src=\"https://maxroecker.github.io/img/illustrations/lock.svg\" alt=\"Um leão heráldico.\" decoding=\"async\" loading=\"lazy\">\n</figure>\n<p>Os <a href=\"https://en.wikipedia.org/wiki/Web_Components\"><em>web components</em></a> são a\nresposta da plataforma <em>web</em> para este problema. Com eles, você pode criar\nelementos personalizados e fazer uma extensão do HTML, preenchendo as lacunas e\nligando a estrutura declarativa com o comportamento via código. Se você está com\num problema que o HTML não pode resolver, talvez a criação de um elemento\npersonalizado pode. Elementos personalizados permitem que os navegadores\nadicionem comportamento ao HTML e preservando os benefícios que já possui.</p>\n<p>Os <em>web components</em> são, na verdade, um termo “guarda-chuva” para um conjunto de\nAPIs e tecnologias disponibilizadas nos navegadores que, quando utilizadas em\nconjunto, permitem a criação de componentes completos. Se fundamentam em três\nprincipais especificações:</p>\n<ul>\n<li><a href=\"https://html.spec.whatwg.org/#custom-elements\">Elementos personalizados</a>;</li>\n<li><a href=\"https://dom.spec.whatwg.org/#shadow-trees\"><em>Shadow</em> DOM</a>;</li>\n<li><a href=\"https://html.spec.whatwg.org/multipage/scripting.html#the-template-element\">O elemento <em>template</em></a>.</li>\n</ul>\n<p>Antes de detalhar cada uma dessas especificações, vamos fazer um apanhado geral\nde como <em>web components</em> trabalham e como você pode utilizá-los.</p>\n<h2 id=\"como-definir-e-instanciar-um-web-component\" tabindex=\"-1\">Como definir e instanciar um <em>web component</em> <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/web-components-1\">#</a></h2>\n<p>Para criar um <em>web component</em> basta você estender a classe\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a> e\nregistrar uma tag associada a essa classe por meio do método <code>define</code> do objeto\nglobal <code>customElements</code>. Simples assim! Veja um exemplo no código abaixo que\nestá utilizando a <a href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4\">sintaxe de classes</a>\ndo ES2015.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nwindow<span class=\"token punctuation\">.</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello-world'</span><span class=\"token punctuation\">,</span> HelloWorld<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>A partir de agora, utilizar o elemento <code>hello-world</code> não é diferente de utilizar\num <code>div</code>. Você pode utilizar a tag de forma declarativa no HTML. Ou criar um\nelemento de forma imperativa por meio do DOM. Você também pode utilizar as APIs\ndo DOM para selecionar e manipular seu elemento personalizado como qualquer\noutro. Veja abaixo:</p>\n<p><playground-ide project-src=\"/projects/2018-01-30-web-components-1/1/project.json\" editable-filesystem=\"\" line-numbers=\"\" resizable=\"\">\n</playground-ide></p>\n<p>Você pode ver que, como com seu elemento personalizado presente na árvore DOM,\nnada é exibido no navegador. Isso acontece porque ainda não adicionamos conteúdo\nao <em>web component</em>.</p>\n<h2 id=\"adicionando-conteudo-ao-web-component\" tabindex=\"-1\">Adicionando conteúdo ao <em>web component</em> <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/web-components-1\">#</a></h2>\n<p>Todo e qualquer comportamento do componente é dado pela a classe associada à\n<em>tag</em>. No nosso caso, se queremos adicionar um conteúdo ao <code>hello-world</code>,\nprecisamos defini-lo na classe <code>HelloWorld</code>. Como o próprio nome do componente\nsugere, vamos exibir a frase “Hello, World!” em um <code>h1</code> no nosso componente.\nPara fazer isso, sobreescrevemos o método <code>connectedCallback</code>. Veja:</p>\n<p><playground-ide project-src=\"/projects/2018-01-30-web-components-1/2/project.json\" editable-filesystem=\"\" line-numbers=\"\" resizable=\"\">\n</playground-ide></p>\n<aside>\n  <p>\n    O método <code>connectedCallback</code> é executado quando o elemento é\n    “conectado” à árvore DOM. Outros métodos também são disponibilizados pela\n    API de elementos personalizados e formam o “ciclo de vida” de um\n    <i>web component</i>, veja <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks\">aqui</a>.\n  </p>\n</aside>\n<h2 id=\"adicionando-estilos-ao-web-component\" tabindex=\"-1\">Adicionando estilos ao <em>web component</em> <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/web-components-1\">#</a></h2>\n<p>Bom, agora que temos nosso componente, vamos estilizá-lo para que o <code>h1</code> tenha\numa cor azul. Podemos fazer isso com CSS utilizando o elemento <code>style</code> e\natribuímos ao <code>head</code> do documento. Veja:</p>\n<p><playground-ide project-src=\"/projects/2018-01-30-web-components-1/3/project.json\" editable-filesystem=\"\" line-numbers=\"\" resizable=\"\">\n</playground-ide></p>\n<p>No entanto você vai perceber que outros elementos <code>h1</code> foram estilizados também.\nIsso acontece porque o comportamento padrão do CSS é global. Uma folha de\nestilos afeta todos os elementos de um documento. No entanto, para solucionar\neste problema, temos em mãos a API <strong><em>Shadow</em> DOM</strong>.</p>\n<h2 id=\"encapsulando-o-web-component\" tabindex=\"-1\">Encapsulando o <em>web component</em> <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/web-components-1\">#</a></h2>\n<p>A <em>Shadow</em> DOM é uma API que permite criar subárvores DOM encapsuladas da árvore\nDOM principal. Assim, qualquer marcação, estilo ou <em>script</em> que seja definido no\n<em>shadow</em> DOM só afeta o próprio <em>shadow</em> DOM. Nós podemos fazer isso por meio\ndo método <code>attachShadow</code>. Veja:</p>\n<p><playground-ide project-src=\"/projects/2018-01-30-web-components-1/4/project.json\" editable-filesystem=\"\" line-numbers=\"\" resizable=\"\">\n</playground-ide></p>\n<p>Se você ver o resultado, agora somente o <code>h1</code> do <em>web component</em> está estilizado\ne, graças ao <em>shadow</em> DOM, não temos efeitos colaterais em outros elementos da\nárvore DOM.</p>\n<h2 id=\"conclusao\" tabindex=\"-1\">Conclusão <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/web-components-1\">#</a></h2>\n<p>O termo <em>web components</em> define um conjunto de especificações de baixo nível\nque, quando utilizadas em conjunto, permitem criar verdadeiros componentes que\npodem ser reutilizados em uma aplicação sem a necessidade de convenção,\nbiblioteca ou <em>framework</em>.</p>\n<p>Existem outras especificações abrangidas pelo termo <em>web components</em> e que não\nvimos nesta introdução; como o elemento <code>template</code>, o elemento slot ou os\nmódulos de CSS. Meu objetivo é criar uma série de publicações abordando os\ndetalhes de cada uma dessas especificações. Além disso, vamos ver algumas boas\npráticas quando estamos trabalhando com componentes e como podemos utilizá-los\npara solucionar problemas durante o desenvolvimento de aplicações para a <em>web</em>.</p>\n<p>Conforme o desenvolvimento <em>web</em> se torna mais complexo, desenvolvedores irão\n“repassar” mais responsabilidades para a plataforma, que amadurece e evolui.\nEste é o caso dos <em>web components</em> que, atualmente, já são suportados na grande\nmaioria dos grandes navegadores.</p>\n<p>No entanto, essa é uma tecnologia ainda em fase de construção. Certas\nespecificações ainda estão em fase inicial ou com suporte bastante limitado, mas\nque ilustram um futuro promissor para a tecnologia.</p>\n",
			"date_published": "2018-01-30T01:00:55Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/captura-e-borbulhamento-de-eventos",
			"url": "https://maxroecker.github.io/blog/captura-e-borbulhamento-de-eventos",
			"title": "Captura e borbulhamento de eventos",
			"content_html": "<p>Um dos aspectos mais confusos quando estamos trabalhando com eventos são os\nestágios que um evento passa enquanto é propagado pela árvore DOM: a <strong>captura</strong>\ne o <strong>borbulhamento</strong>. Não é sempre que temos problemas, mas você pode ter uma\nbaita dor de cabeça se você não entender o que cada um dessas etapas faz e como\nelas funcionam.</p>\n<p>A captura e o borbulhamento de eventos são mecanismos de propagação que\ndescrevem o que acontece quando um mesmo evento é “escutado” por dois elementos\nque são descendentes. Antes de prosseguir, dê uma olhada neste ótimo\n<a href=\"https://mdn.github.io/learning-area/javascript/building-blocks/events/show-video-box.html\">exemplo do MDN</a>,\nque também pode ser visto abaixo:</p>\n<iframe src=\"https://mdn.github.io/learning-area/javascript/building-blocks/events/show-video-box.html\" loading=\"lazy\" width=\"100%\" height=\"512\"></iframe>\n<p>Nesse exemplo, o HTML tem a seguinte marcação:</p>\n<pre class=\"language-html\" tabindex=\"0\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>Display video<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hidden<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rabbit320.mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rabbit320.webm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/webm<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Quando há um clique em <code>&lt;button&gt;</code>, o vídeo é exibido mudando a classe do <code>&lt;div&gt;</code>\nde <code>hidden</code> para <code>showing</code> (há um CSS para isso também). Além disso, se você\nclicar no <code>div</code> do vídeo, ela irá automaticamente fechar e, se você clicar no\nvídeo, ele irá iniciar a execução. Veja o script abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> video <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbutton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  div<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'showing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndiv<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  div<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hidden'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nvideo<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  video<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Entretanto, temos um problema com essa implementação e você já deve ter\npercebido: se você abre o vídeo e clica para iniciar a execução, o vídeo “some”\ne você precisa abrir de novo pelo botão. Isso acontece porque o <code>&lt;video&gt;</code>, que\nouve eventos de clique é descendente de <code>&lt;div&gt;</code>, que também ouve eventos de\nclique. Ou seja, quando você clica no vídeo para iniciar a execução, ambos os\nouvintes são executados e, por isso, o vídeo fecha.</p>\n<h2 id=\"captura-e-borbulhamento\" tabindex=\"-1\">Captura e borbulhamento <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/captura-e-borbulhamento-de-eventos\">#</a></h2>\n<p>Quando um evento é disparado por um elemento que possui algum antecessor (no\nexemplo acima, <code>&lt;video&gt;</code> tem <code>&lt;div&gt;</code> como antecessor), os navegadores podem\npropagá-lo em dois estágios: a captura e o borbulhamento.</p>\n<p>No estágio de captura, o navegador verifica se o antecessor mais distante do\nelemento (normalmente, o <code>&lt;html&gt;</code>) possui um ouvinte do evento, e, se existir,\nele o executa. E então ele passa para o próximo antecessor, e faz a mesma coisa;\ne assim por diante até que atinja o elemento que foi efetivamente clicado.</p>\n<p>Já no estágio de borbulhamento, o contrário é feito: o navegador verifica se o\nelemento que foi efetivamente clicado tem um ouvinte para o evento e, em caso\nafirmativo, executa o código associado; então ele vai para antecessor mais\npróximo e faz a mesma coisa, e assim por diante até chegar no antecessor mais\ndistante, o <code>&lt;html&gt;</code>.</p>\n<p>Você pode ver os dois fluxos sumarizados na imagem abaixo:</p>\n<figure>  \n  <img alt=\"Diagrama representado a captura e o borbulhamento de eventos no DOM\" title=\"undefined\" loading=\"lazy\" decoding=\"async\" src=\"https://maxroecker.github.io/img/3yTE12NbwG-800.svg\" width=\"800\" height=\"400\">\n</figure>\n<p>Nas versões atuais do DOM, todos os ouvintes de eventos são registrados somente\npara o estágio de borbulhamento por padrão. Por isso, em nosso exemplo, o evento\nde clique borbulha de <code>&lt;video&gt;</code> para o antecessor <code>&lt;div&gt;</code>. Assim, ele irá\nencontrar o ouvinte de clique em <code>&lt;video&gt;</code> e vai começar a rodar o vídeo. Logo\nem seguida, ele vai encontrar o ouvinte em <code>&lt;div&gt;</code> e vai ocultar o vídeo.</p>\n<h3 id=\"parando-a-propagacao-dos-eventos\" tabindex=\"-1\">Parando a propagação dos eventos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/captura-e-borbulhamento-de-eventos\">#</a></h3>\n<p>O comportamento do exemplo acima é bastante chato, mas pode ser consertado. O\nDOM, por meio da classe <code>Event</code>, fornece o método <code>stopPropagation</code> que pode ser\nchamado em um ouvinte quando queremos parar qualquer uma das propagações.</p>\n<p>Dessa forma, podemos fazer nosso ouvinte de clique no <code>&lt;video&gt;</code> parar a\npropagação caso o vídeo não esteja sendo executado. Assim, se <code>stopPropagation</code>\nfor chamado, o ouvinte em <code>&lt;div&gt;</code> não é executado. Veja:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">video<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>video<span class=\"token punctuation\">.</span>played<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    video<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    video<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Como mencionei acima, os eventos são sempre propagados, por padrão, no estágio\nde borbulhamento. No entanto, você pode alterar esse comportamento ao registrar\no ouvinte configurando o terceiro parâmetro da função <code>addEventListener</code>, por\nexemplo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">div<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    div<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hidden'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">capture</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>No entanto, é importante lembrar que, se um evento é escutado nos dois\nestágios de propagação, o estágio de captura será sempre executado primeiro e,\ndepois, seguido do estágio de borbulhamento.</p>\n<aside>\n  <p>\n    Porque existem dois estágios de propagação de eventos? Isso se deve aos dias\n    onde os navegadores não eram muito compatíveis entre si. O Netscape\n    utilizava somente a propagação por captura, já o Internet Explorer, usava\n    somente a propagação por borbulhamento. Quando o W3C resolveu padronizar\n    esse comportamento e fazer os navegadores entrarem em consenso, resolveu-se\n    utilizar um sistema com as duas formas de propagação, que é implementado\n    pelos navegadores atualmente.\n  </p>\n</aside>\n<h2 id=\"delegacao-de-eventos\" tabindex=\"-1\">Delegação de eventos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/captura-e-borbulhamento-de-eventos\">#</a></h2>\n<p>Imagine que você tem vários elementos <code>&lt;li&gt;</code> em uma lista <code>&lt;ul&gt;</code>, como na\nmarcação abaixo:</p>\n<pre class=\"language-html\" tabindex=\"0\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item-a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Item A<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item-b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Item B<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item-c<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Item C<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  …\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Imagine que quando um elemento dessa lista sofrer um clique, você quer exibir um\nalerta para o usuário com o <code>id</code> do elemento clicado. Você pode adicionar um\nouvinte em cada elemento, como você pode ver abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#list li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  item<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// target é o elemento que foi clicado</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>E se essa lista for dinâmica? Imagine que seja comum adicionar e remover itens,\nvocê terá que ficar adicionando e removendo ouvintes toda vez para garantir o\nfuncionamento do seu código. Isso parece trabalhoso…</p>\n<p>No entanto, podemos utilizar a propagação de eventos a nosso favor para fazer\numa <strong>delegação de eventos</strong>. Esse conceito é bastante utilizado quando você\nquer que um mesmo trecho de código seja executado em um grande número de\ndescendentes. Ou seja, é mais fácil você apenas adicionar um ouvinte no\nantecessor direto e esperar que os eventos sejam propagados por borbulhamento\naté ele. Com a propagação de eventos, podemos atingir o mesmo resultado acima\ncom o seguinte código:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// target ainda é o elemento que foi clicado</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Com o código acima, as preocupações com a adição ou remoção de itens deixam de\nexistir porque só temos um ouvinte para toda a lista.</p>\n<h2 id=\"conclusao\" tabindex=\"-1\">Conclusão <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/captura-e-borbulhamento-de-eventos\">#</a></h2>\n<p>Com o que vimos até agora, você já tem um bom fundamento sobre os diferentes\nestágios de propagação de eventos: a captura e o borbulhamento. Apesar de um\ndeles raramente ser utilizado, é importante conhecer como o DOM funciona para\nque você saiba resolver problemas quando eles surgirem.</p>\n<p>Um bom desenvolvedor de <em>software</em> deve conhecer as ferramentas com que\ntrabalha, e se você trabalha com <em>web</em>, deve conhecer o DOM.</p>\n",
			"date_published": "2018-01-14T02:02:00Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/o-que-e-o-dom",
			"url": "https://maxroecker.github.io/blog/o-que-e-o-dom",
			"title": "O que é o DOM?",
			"content_html": "<p>O <strong>Modelo Objeto de Documento</strong> (DOM, do inglês <em lang=\"en\">Document Object\nModel</em>) é uma estrutura de dados que representa a estrutura e o conteúdo de\num documento <em>web</em>. Técnicamente, o DOM é uma representação orientada a objetos\nde documentos HTML e XML, e fornece funções e métodos para que um programa possa\ninteragir com eles.</p>\n<p>O DOM é definido pelas especificações da <a href=\"https://www.w3.org/DOM/\">W3C</a> e da\n<a href=\"https://dom.spec.whatwg.org/\">WHATWG</a>, e implementado pelos navegadores. Muitos\nnavegadores podem estender essa especificação e disponibilizar funcionalidades\nque não são adotadas por todos os navegadores, então é preciso cuidado e é\nsempre recomendado seguir o padrão das especificações.</p>\n<p>Como dito, o DOM representa um documento <em>web</em> como uma API orientada a objetos.\nTodas as propriedades, métodos e eventos disponíveis para manipular e criar\npáginas <em>web</em> são organizadas em objetos. Uma página HTML, por exemplo, será\nrepresentada pela classe <code>Document</code>. Já uma tabela, escrita com a tag <code>&lt;table&gt;</code>,\nserá representada pela classe <code>HTMLTableElement</code>.</p>\n<p>O DOM define métodos que servem para buscar elementos também. Um exemplo é o\n<code>querySelectorAll</code>, que recebe um seletor CSS em uma <em>string</em> e retornar\nelementos descendentes que casam com o seletor dado.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> paragraphs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> paragraph <span class=\"token keyword\">of</span> paragraphs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"o-dom-e-o-javascript\" tabindex=\"-1\">O DOM e o JavaScript <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/o-que-e-o-dom\">#</a></h2>\n<p>No exemplo anterior, e em quase todos os exemplos que você vai encontrar quando\npesquisar e trabalhar com DOM, você utilizará o JavaScript. No entanto, é\nimportante entender e separar o DOM e o JavaScript. DOM não é uma linguagem de\nprogramação, mas sem o DOM o JavaScript não seria capaz de compreender páginas\n<em>web</em> e adicionar interação à elas.</p>\n<p>No início da <em>web</em>, o JavaScript e o DOM eram muito interligados. Mas, com o\ndesenvolvimento das especificações e da tecnologia <em>web</em>, eles se desenvolveram\nem duas entidades distintas. O DOM moderno é projetado para ser implementado em\nqualquer linguagem de programação. Veja um exemplo de utilização do DOM em\nPython usando a biblioteca\n<a href=\"https://docs.python.org/3/library/xml.dom.minidom.html\"><code>minidom</code></a>.</p>\n<pre class=\"language-py\" tabindex=\"0\"><code class=\"language-py\"><span class=\"token keyword\">import</span> xml<span class=\"token punctuation\">.</span>dom<span class=\"token punctuation\">.</span>minidom <span class=\"token keyword\">as</span> dom\n\ndocument <span class=\"token operator\">=</span> dom<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span><span class=\"token string\">'./index.html'</span><span class=\"token punctuation\">)</span>\np_list <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>getElementsByTagName<span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> p_list<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"acessando-o-dom\" tabindex=\"-1\">Acessando o DOM <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/o-que-e-o-dom\">#</a></h2>\n<p>Nos navegadores não é necessário adicionar uma biblioteca para utilizar o DOM,\nqualquer <code>script</code> JavaScript executado no ambiente dos navegadores tem acesso\na ele. Veja um exemplo abaixo de um documento HTML que utiliza o DOM para\nconstruir um cabeçalho com a frase “Olá Mundo!”.</p>\n<pre class=\"language-html\" tabindex=\"0\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">doctype</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> header <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Olá Mundo!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        header<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Grande parte do conteúdo do <em>script</em> utiliza o DOM nesse exemplo: o método\n<code>addEventListener</code> do <code>window</code>; os método <code>createElement</code> do <code>document</code> ou o\n<code>appendChild</code> do <code>header</code>. Todos esses métodos são definidos pelo DOM e\ndisponibilizados pelo navegador.</p>\n<h2 id=\"algumas-interfaces-fundamentais\" tabindex=\"-1\">Algumas interfaces fundamentais <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/o-que-e-o-dom\">#</a></h2>\n<p>Como já dito anteriormente, o DOM é uma API orientada a objetos que representa\num documento <em>web</em>. Um documento HTML, por exemplo, é representado no DOM como\num objeto que segue a interface\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document\"><code>Document</code></a> e\napresenta uma estrutura similar com uma\n<a href=\"https://pt.wikipedia.org/wiki/%C3%81rvore_(estrutura_de_dados)\">árvore</a>. Muitas\nvezes esse objeto é chamado de “Árvore DOM”. Nos navegadores você pode acessar a\ninstância desse objeto pela variável <code>document</code> (como fizemos no exemplo\nanterior).</p>\n<p>No entanto, a interface <code>Document</code> estende outra interface ainda mais genérica,\na <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node\"><code>Node</code></a>. <code>Node</code> é uma\ninterface genérica que muitas outras APIs do DOM são baseadas. Qualquer “nó” no\nDOM implementa <code>Node</code>. Alguns exemplos incluem o já mencionado <code>Document</code>, mas\ntemos também\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element\"><code>Element</code></a>, interface\nque todas as tags HTML seguem; ou também a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Text\"><code>Text</code></a>, interface\nimplementada pelos nós de texto do documento; e até mesmo a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Comment\"><code>Comment</code></a>, que\nrepresenta um comentário denotado pela marcação <code>&lt;!-- --&gt;</code> no HTML.</p>\n<p>Outra interface importante é a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a>.\nTodos os nós DOM implementam essa interface, pois <code>Node</code> é uma extensão de\n<code>EventTarget</code>. A <code>EventTarget</code> permite a criação de objetos capazes de ouvir e\ndisparar eventos. Por exemplo, se você tem a necessidade de executar um trecho\nde código quando um usuário clica em um elemento, você provavelmente utilizará\num evento e o método <code>addEventListener</code> da interface <code>EventTarget</code>.</p>\n<aside>\n  <p>\n    <code>EventTarget</code> é uma interface tão ubíqua que, inclusive, é\n    implementada por classes fora do documento <em>web</em>, como é o caso do\n    <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window\"><code>Window</code></a>\n  </p>\n</aside>\n<h2 id=\"conclusoes\" tabindex=\"-1\">Conclusões <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/o-que-e-o-dom\">#</a></h2>\n<p>Você pode ver que quase todas as características de um documento HTML são\nrepresentadas de alguma forma no DOM. Existem muitas classes e interfaces que\ncontém diversos métodos e propriedades. É colossal o tamanho da especificação do\nDOM.</p>\n<p>Você pode achar que isso é muito para aprender de uma vez e realmente é. No\nentanto, em um primeiro momento você não precisa entender tudo nos mínimos\ndetalhes, o importante é você ter noção geral de como essa tecnologia <em>web</em>\nfunciona. Eu acredito que, conforme você adquire experiência, você deve entender\no funcionamento dessa API para que você seja um bom desenvolvedor de <em>software</em>\npara a <em>web</em>.</p>\n",
			"date_published": "2016-08-05T22:15:22Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4",
			"url": "https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4",
			"title": "JavaScript Orientado a Objetos #4",
			"content_html": "<p>Hoje iremos voltar a ver sobre Construtores no contexto do JavaScript\nOrientado a Objetos, e as principais funcionalidades que a versão 2015 adicionou\nà linguagem.</p>\n<p>Para que você aproveite melhor o texto é recomendado que você tenha conhecimento\ndos conceitos básicos de orientação a objetos. Você pode ler uma pequena\nintrodução\n<a href=\"http://maxroecker.github.io/blog/javascript-orientado-a-objetos-1/\">no texto anterior dessa série</a>\ne também ver o como criar objetos com\n<a href=\"http://maxroecker.github.io/blog/javascript-orientado-a-objetos-2/\">construtores</a>\ne a alternativa à ele, as\n<a href=\"http://maxroecker.github.io/blog/javascript-orientado-a-objetos-3/\">fábricas</a>.</p>\n<h2 id=\"introducao\" tabindex=\"-1\">Introdução <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4\">#</a></h2>\n<p>Já vimos que construtores são feitos por meio de funções que recebem um contexto\nespecial em <code>this</code> e que são chamadas junto ao operador <code>new</code>. Vimos também que\nconstrutores adicionam métodos ao protótipo dos objetos criados e, por isso, são\ncapazes de compartilhar o mesmo método para qualquer instância. Relembrando o\nexemplo das publicações anteriores, temos, abaixo, o construtor <code>Person</code>:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> surname</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname <span class=\"token operator\">=</span> surname<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getFullName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Podemos utilizá-lo com o operador <code>new</code>, veja:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pedremildo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Escavadeira'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 'Pedremildo Escavadeira'</span></code></pre>\n<h2 id=\"classes-do-es2015\" tabindex=\"-1\">Classes do ES2015 <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4\">#</a></h2>\n<p>No entanto, essa notação para escrever construtores é bastante diferente de\noutras linguagens de programação, o que sempre causou um pouco de receio em\ndesenvolvedores. Com o advento do ECMA2015, o JavaScript adicionou outra forma\nde escrever construtores, muito similar a outras linguagens de programação, com\na utilização de <strong>classes</strong>. Podemos reescrever o construtor <code>Person</code> anterior\nda seguinte forma:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> surname</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname <span class=\"token operator\">=</span> surname<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Essa notação é bastante similar ao Java, C++ ou Python e utiliza a palavra-chave\n<code>class</code>. No entanto, não confunda a classe do JavaScript com a classe de outras\nlinguagens. A palavra-chave <code>class</code> nada mais é que um\n“<a href=\"https://pt.wikipedia.org/wiki/A%C3%A7%C3%BAcar_sint%C3%A1tico\">açúcar sintático</a>”\npara os construtores feitos com funções. Sua utilização é, também, idêntica aos\nconstrutores:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pedremildo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Escavadeira'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Testerson'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Trunk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Pedremildo</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Trunk</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 'Pedremildo Escavadeira'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>getFullName <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>getFullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span></code></pre>\n<p>De forma resumida, o código que antes ficava no construtor agora é colocado\ndentro do <code>constructor</code>, e os métodos que antes eram adicionados no <code>prototype</code>\ndo construtor agora são definidos no corpo da classe. Essa mudança sintática\naproxima o JavaScript de outras linguagens e torna mais fácil para pessoas com\noutras experiências animem-se com ele.</p>\n<h2 id=\"heranca\" tabindex=\"-1\">Herança <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4\">#</a></h2>\n<p>A herança, com as classes, possuem as mesmas vantagens e desvantagens da herança\ncom construtores, mas possuem uma sintaxe mais simples utilizando a\npalavra-chave <code>extends</code>. Vamos relembrar o exemplo da publicação anterior e\ncriar a classe <code>Employee</code>, que estende <code>Person</code> e adiciona a propriedade\n<code>salary</code> e o método <code>getTax</code>. Veja, abaixo, como essa herança é implementada com\nclasses:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> surname<span class=\"token punctuation\">,</span> salary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> surname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>salary <span class=\"token operator\">=</span> salary<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getTax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>salary <span class=\"token operator\">*</span> <span class=\"token number\">0.08</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Veja que o método <code>apply</code>, utilizado nos construtores, foi substituído pela\nchamada <code>super</code>. Além disso, ao utilizarmos <code>extends</code>, não precisamos adequar a\ncadeia de protótipos. Toda essa parte já é feita pelo JavaScript\nautomaticamente. A instanciação de objetos continua idêntica.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pedremildo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Escavadeira'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Testerson'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Trunk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Pedremildo</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Trunk</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 'Pedremildo Escavadeira'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>getFullName <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>getFullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">getTax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 8</span></code></pre>\n<h2 id=\"encapsulamento-e-polimorfismo\" tabindex=\"-1\">Encapsulamento e polimorfismo <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4\">#</a></h2>\n<p>Como os objetos são estruturas de dados muito parecidos com uma\n<a href=\"https://en.wikipedia.org/wiki/Associative_array\">tabela <em>hash</em></a>, todas as\npropriedades do objeto são acessíveis. As classes, até o ES2015, não\npossuem uma forma de definir que uma propriedade seja oculta ou não.</p>\n<p>Mas, assim como com os construtores, se queremos que uma propriedade do objeto\nseja “protegida” do meio externo, fazemos isso por meio de uma notação padrão,\nnormalmente prefixando o nome da propriedade com <code>_</code>.</p>\n<p>Já com relação ao polimorfismo, as mesmas regras dos construtores são aplicadas\ne é dado por meio do <a href=\"https://pt.wikipedia.org/wiki/Duck_typing\"><em lang=\"en\">duck typing</em></a>.</p>\n<h2 id=\"propriedades-e-metodos-estaticos\" tabindex=\"-1\">Propriedades e métodos estáticos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4\">#</a></h2>\n<p>Nas classes, propriedades estáticas podem ser adicionadas com prefixando-a com\na declaração <code>static</code>. Quando uma propriedade ou método é prefixado com <code>static</code>,\no JavaScript adiciona esse essa propriedade ou método na própria classe e não\nno protótipo ou nas instâncias dos objetos.</p>\n<p>Vamos exemplificar relembrando o exemplo das publicações anteriores, onde\nutilizamos uma propriedade estática para armazenar a quantidade de objetos já\ncriados pela classe ou qualquer descendente.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> surname</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Person<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname <span class=\"token operator\">=</span> surname<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Assim, podemos agora verificar quantas instâncias já foram criadas de forma\nidêntica aos construtores, veja:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 0</span>\n\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pedremildo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Escavadeira'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 1</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Testerson'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Trunk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 2</span></code></pre>\n<h2 id=\"garantias-de-instanciacao\" tabindex=\"-1\">Garantias de instanciação <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4\">#</a></h2>\n<p>É possível verificar se um objeto é uma instância de uma classe por meio do\noperador <code>instanceof</code>. Veja abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pedremildo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Escavadeira'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Testerson'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Trunk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span></code></pre>\n<p>Assim como nos construtores, o operador <code>instanceof</code> testa se a o protótipo dos\nobjetos criados pela classe à direita está na cadeia de protótipos do objeto à\nesquerda, e, com isso, determina se um objeto foi construído por aquele.</p>\n<p>No entanto, diferente dos construtores, não é necessário testar um objeto\ncriado por uma classe para saber se a classe foi chamada com <code>new</code>. Caso alguém\ntente chamar uma classe como uma função sem o <code>new</code>, o próprio JavaScript\ndispara um erro.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pedremildo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Escavadeira'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → erro!</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Testerson'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Trunk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → sucesso</span></code></pre>\n<h2 id=\"conclusoes\" tabindex=\"-1\">Conclusões <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-4\">#</a></h2>\n<p>Utilizar construtores traz várias vantagens que os construtores já possuem, como\na herança e polimorfismo simplificados e o uso eficiente de memória por meio do\ncompartilhamento de código via protótipos. Além disso, a utilização de classes\njá mitiga o cuidado que temos que ter com operadores <code>new</code> nos construtores. No\nentanto, é alguns pontos ainda permanecem no ES2015:</p>\n<ul>\n<li>Não permite um verdadeiro encapsulamento, todas as propriedades são\nacessíveis;</li>\n<li>Justamente porque os métodos são compartilhados e dependem de um contexto\nespecífico, é necessário uma atenção especial quando os métodos são chamados\npara evitar\n<a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/this\">problemas com o <code>this</code></a>.</li>\n</ul>\n<p>Podemos dizer que as classes são “construtores melhorados” e que é prudente\nfavorecer o uso de classes ao invés de construtores na medida do possível. No\nentanto, mesmo com classes disponíveis, grande parte de código escrito em\nJavaScript ainda contém construtores e, por isso, é importante saber como\nfuncionam caso você precise lidar com eles em algum momento.</p>\n<p>Essa publicação encerra, por enquanto, a série de introdução ao JavaScript\norientado a objetos. Esse não é um final definitivo. Podem existir mais\npublicações futuras com novas funcionalidades que podem ser adicionadas à\nlinguagem ou evoluções nas técnicas de desenvolvimento OO.</p>\n<p>Até mais!</p>\n",
			"date_published": "2016-04-30T17:23:39Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3",
			"url": "https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3",
			"title": "JavaScript Orientado a Objetos #3",
			"content_html": "<p>Hoje iremos compreender um pouco sobre as Fábricas no contexto do JavaScript\nOrientado a Objetos, um padrão de projeto alternativos aos construtores para a\ncriação de objetos que possui muita similaridade com programação funcional.</p>\n<aside>\n  <p>\n    <strong>fá.bri.ca:</strong> (1) estabelecimento onde ocorre a\n    fabricação ou manufatura de produtos; (2) um mecanismo que produz ou cria\n    algo.\n  </p>\n</aside>\n<p>Para que você aproveite melhor o texto é recomendado que você tenha conhecimento\ndos conceitos básicos de orientação a objetos. Você pode ler uma pequena\nintrodução\n<a href=\"http://maxroecker.github.io/blog/javascript-orientado-a-objetos-1/\">no texto anterior dessa série</a>\ne também ver o como criar objetos com\n<a href=\"http://maxroecker.github.io/blog/javascript-orientado-a-objetos-2/\">construtores</a>.\nTambém é recomendado que você conheça o comportamento e características dos\n<a href=\"http://maxroecker.github.io/blog/javascript-intermediario-4/\"><em>closures</em></a> em\nJavaScript. O texto hoje é um pouco longo porque achei importante unir os\nprincipais tópicos de cada padrão em uma só publicação.</p>\n<h2 id=\"introducao\" tabindex=\"-1\">Introdução <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3\">#</a></h2>\n<p>Já vimos, na publicação anterior, que construtores, em JavaScript, são funções\nque inicializam um objeto o qual a memória já foi alocada. Revisitando nosso\nexemplo do construtor <code>Person</code>, visto abaixo, vemos que todas as propriedades\nsão acessíveis e que os métodos são compartilhados entre todos os objetos por\nmeio da cadeia de protótipos.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> surname</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname <span class=\"token operator\">=</span> surname<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getFullName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Para nosso exemplo, vamos adicionar um novo método à <code>Person</code> chamado <code>print</code> e\nque exibe, na saída padrão, uma <em>string</em> representando o objeto.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">print</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Person [name: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Suponha que queremos chamar o método <code>print</code> duas vezes: a primeira\nimediatamente após a criação do objeto e a segunda 3 segundos depois. Podemos\nutilizar a função <code>setTimeout</code>, que recebe uma função e um número de\nmilissegundos, para fazer essa tarefa. Veja:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pedremildo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Escavadeira'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 'Person [name: Pedremildo]'</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 'Person [name: undefined]'</span></code></pre>\n<p>O que aconteceu com o método? Porque, após 5 segundos, o resultado foi\ndiferente? Na realidade, o método perdeu o contexto de onde deveria ser\nexecutado, ou seja, que objeto <code>this</code> se refere. Quando chamamos um método\ndiretamente no objeto com <code>objeto.método()</code>, o JavaScript automaticamente define\no <code>this</code> do método como o próprio objeto. Como repassamos o método para outro\nobjeto eventualmente executá-lo, o <code>this</code> do método não referencia mais <code>person</code>\ne, por isso, temos problemas.</p>\n<p>A função <code>print</code> não está amarrada ao objeto <code>person</code>, ela é compartilhada por\ntodos os objetos construídos por <code>Person</code>. E, justamente porque os métodos são\ncompartilhados é que, em certos casos, podemos ter problemas com a utilização\ndesses métodos me outros contextos, como vimos acima. Há vários problemas</p>\n<p>Uma forma de resolver esse problema é explicitamente pedir para seja criada uma\nnova função, idêntica a anterior, mas que esteja amarrada à variável <code>person</code>\npor meio do método\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>bind</code></a>.\nVeja:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pedremildo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Escavadeira'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 'Person [name: Pedremildo]'</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 'Person [name: Pedremildo]'</span></code></pre>\n<p>Resolvemos o problema criando uma cópia da função com um contexto amarrado, no\nentanto, essa não é uma das vantagens dos construtores? Porque vamos\ncompartilhar se, dependendo do caso de uso, teremos que criar cópias com\ncontexto amarrado.</p>\n<p>Este exemplo mostra bem as desvantagens que construtores possuem. O uso\nincorreto do <code>this</code> é um dos\n<a href=\"https://www.toptal.com/javascript/10-most-common-javascript-mistakes\">erros mais comuns</a>\nentre desenvolvedores JavaScript em qualquer nível de experiência e é fonte de\nmuitos <em>bugs</em>. No entanto, há uma alternativa: as <strong>fábricas</strong>.</p>\n<h2 id=\"fabricas\" tabindex=\"-1\">Fábricas <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3\">#</a></h2>\n<p>Fábricas são, como construtores, funções que inicializam objetos. No entanto,\nfábricas não só inicializam o objeto, como também são responsáveis por\ncriar a área de memória associada à ele; diferente dos construtores, que passam\nessa responsabilidade para o operador <code>new</code>. Vamos refatorar nosso construtor\npara que ele seja uma fábrica. Veja:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> surname</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  person<span class=\"token punctuation\">.</span>surname <span class=\"token operator\">=</span> surname<span class=\"token punctuation\">;</span>\n  person<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getFullName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  person<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">print</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Person [name: '</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Veja que nossa função agora, além de inicializar, cria o objeto. Além disso, não\natribuímos mais as funções no protótipo, mas no próprio objeto. Como <code>Person</code>\nnão é um construtor e sim uma função comum, invocamos-a sem o <code>new</code>. Podemos\ntambém fazer o exemplo anterior sem a necessidade do <code>bind</code>.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pedremildo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Escavadeira'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Testerson'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Trunk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Pedremildo</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Trunk</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 'Pedremildo Escavadeira'</span>\n\nb<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 'Person [name: Testerson]'</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 'Person [name: Testerson]'</span></code></pre>\n<p>Note que, como criamos o objeto, não precisamos mais utilizar <code>this</code>. Sempre\ntemos a referência do objeto criado. Isso acontece porque os métodos\n<code>getFullName</code> e <code>print</code> são <em>closures</em> e, assim, mantém a referência do escopo\nda fábrica e podem acessá-lo a qualquer momento.</p>\n<p>Entretanto, temos um preço a pagar: todos os métodos dos objetos criados são\ncópias e não são compartilhados. A cada vez que a fábrica <code>Person</code> é chamada, ela\ncria um objeto e cópias dos métodos amarrados a esse objeto. Veja:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>getFullName <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>getFullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → false</span></code></pre>\n<h2 id=\"heranca\" tabindex=\"-1\">Herança <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3\">#</a></h2>\n<p>Fábricas também podem utilizar a herança. Vamos relembrar o exemplo da\npublicação anterior, criando uma fábrica <code>Employee</code>, que estende <code>Person</code> e\nadiciona a propriedade <code>salary</code> e o método <code>getTax</code>.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> surname<span class=\"token punctuation\">,</span> salary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> employee <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> surname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  employee<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">=</span> salary<span class=\"token punctuation\">;</span>\n  employee<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getTax</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> employee<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">*</span> <span class=\"token number\">0.08</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> employee<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>De forma geral, não precisamos mais utilizar o método <code>apply</code> e, como não usamos\nprotótipos, não há necessidade de utilizar o <code>Object.create</code>, como nos\nconstrutores. No entanto, “terceirizamos” a criação do objeto para outra fábrica\nque queremos estender as propriedades e métodos.</p>\n<p>Veja que a utilização é exatamente igual à <code>Person</code>, no entanto, mais propriedades\ne métodos estão disponíveis.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pedremildo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Escavadeira'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Testerson'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Trunk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Pedremildo</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Trunk</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 'Pedremildo Escavadeira'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>getFullName <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>getFullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">getTax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 8</span></code></pre>\n<h2 id=\"encapsulamento\" tabindex=\"-1\">Encapsulamento <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3\">#</a></h2>\n<p>Apesar dos objetos serem estruturas de dados muito parecidos com uma\n<a href=\"https://en.wikipedia.org/wiki/Associative_array\">tabela <em>hash</em></a>, onde todas as\npropriedades do objeto são acessíveis. O conceito de encapsulamento, com\nfábricas, pode ser atingido por meio do <em>closure</em>.</p>\n<p>O <em>closure</em> é protegido de qualquer mudança externa além das próprias variáveis\nretornadas. Não há necessidade de convenção. Com fábricas, temos encapsulamento\nverdadeiro. Vamos refatorar o exemplo acima para adicionar uma propriedade\n“privada” que armazena a taxa do imposto de um empregado.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> surname<span class=\"token punctuation\">,</span> salary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> employee <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> surname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> rate <span class=\"token operator\">=</span> <span class=\"token number\">0.08</span><span class=\"token punctuation\">;</span>\n  employee<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">=</span> salary<span class=\"token punctuation\">;</span>\n  employee<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getTax</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> employee<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">*</span> rate<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> employee<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Veja que <code>rate</code> é uma variável que está no <code>closure</code> de <code>getTax</code>. Não há outra\nforma de acessar <code>rate</code> senão pelo método <code>getTax</code>. Ou seja, <code>rate</code> está\nencapsulada de qualquer efeito externo que não seja gerado pelo próprio objeto.</p>\n<h2 id=\"polimorfismo\" tabindex=\"-1\">Polimorfismo <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3\">#</a></h2>\n<p>Assim como em construtores, devido às características do JavaScript, o\npolimorfismo pode ser realizado sem muitos problemas, uma vez que funções são\nobjetos, objetos são mutáveis e variáveis não possuem tipos definidos.\nNormalmente o polimorfismo se dá por meio do <a href=\"https://pt.wikipedia.org/wiki/Duck_typing\"><em lang=\"en\">duck\ntyping</em></a> e que fazem o <strong>Teste do Pato</strong>.</p>\n<blockquote>\n  <p>\n    Se algo parece com um pato, nada como um pato e grasna como um pato, então\n    provavelmente é um pato\n  </p>\n</blockquote>\n<p>No contexto de programação, isso significa que não é o tipo do objeto que irá\ndefinir sua semântica, mas sim suas propriedades e métodos. Se um conjunto de\nobjetos contém um método com o nome <code>foo</code>, você pode chamá-los sem problema.</p>\n<p>Não há um contrato pré-definido entre as objetos — como é o caso das interfaces\nem Java ou classes abstratas em C++ — e por isso fica a cargo do codificador\nutilizar a mesmo protocolo nos objetos em que deve-se estabelecer um\npolimorfismo.</p>\n<figure>\n  <img src=\"https://maxroecker.github.io/img/illustrations/automata-duck.svg\" alt=\"Um automâto de pato com sistema alimentação similar ao trato digestivo\" title=\"Pato Mecânico de Jacques de Vaucanson, 1738\" decoding=\"async\" loading=\"lazy\">\n</figure>\n<h2 id=\"propriedades-e-metodos-estaticos\" tabindex=\"-1\">Propriedades e métodos estáticos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3\">#</a></h2>\n<p>De forma similar aos construtores, propriedades e métodos estáticos podem ser\ncriados atribuindo-os diretamente à fábrica. Relembrando o exemplo da publicação\nanterior, vamos criar uma propriedade estática na fábrica <code>Person</code> para\narmazenar a quantidade de objetos já criados por ele ou qualquer descendente.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> surname</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Person<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  person<span class=\"token punctuation\">.</span>surname <span class=\"token operator\">=</span> surname<span class=\"token punctuation\">;</span>\n  person<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getFullName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  person<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">print</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Person [name: '</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nPerson<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Assim, podemos agora verificar quantas instâncias já foram criadas, veja:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 0</span>\n\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pedremildo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Escavadeira'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 1</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Testerson'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Trunk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 2</span></code></pre>\n<h2 id=\"garantias-de-instanciacao\" tabindex=\"-1\">Garantias de instanciação <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3\">#</a></h2>\n<p>Como as fábricas não utilizam a cadeia de protótipos, não há como determinar se um\nobjeto foi criado ou não por uma fábrica por meio do operador <code>instanceof</code>.</p>\n<p>No entanto, também não temos a necessidade de verificar se uma função foi\nchamada da forma correta, uma vez que a própria fábrica detém o controle da\ncriação do objeto.</p>\n<h2 id=\"conclusoes\" tabindex=\"-1\">Conclusões <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-3\">#</a></h2>\n<p>Utilizar fábricas traz várias vantagens alternativas e atacam os pontos onde\nconstrutores deixam a desejar:</p>\n<ul>\n<li>Herança simplificada: basta chamar a fábrica que se deseja herdar e modificar\nseus métodos;</li>\n<li>Polimorfismo simplificado: não há contratos entre as fábricas;</li>\n<li>Encapsulamento verdadeiro: o <em>closure</em> mantém o escopo completamente isolado e\ninacessível de efeitos externos.</li>\n<li>O não compartilhamento de métodos traz vantagens uma vez que não precisamos\nnos preocupar em qual contexto um método será executado, eliminando os riscos\ncom o uso incorreto do <code>this</code>.</li>\n</ul>\n<p>Porém, há um preço a se pagar:</p>\n<ul>\n<li>Uso ineficiente da memória: cada método é alocado para cada objeto criado. Não\nhá compartilhamento entre todos os objetos através do uso de protótipos e, por\nisso, fábricas tendem a consumir muito mais memória do que construtores;</li>\n<li>Não é possível estabelecer se um objeto foi criado por uma fábrica por meio do\n<code>instanceof</code>.</li>\n</ul>\n<p>A tabela abaixo resume bem as características dos construtores e fábricas:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Característica</th>\n<th style=\"text-align:center\">Construtores</th>\n<th style=\"text-align:center\">Fábricas</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Herança</td>\n<td style=\"text-align:center\">✓</td>\n<td style=\"text-align:center\">✓</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Encapsulamento</td>\n<td style=\"text-align:center\">✗</td>\n<td style=\"text-align:center\">✓</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Verificação de instâncias</td>\n<td style=\"text-align:center\">✓</td>\n<td style=\"text-align:center\">✗</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Consistência do <code>this</code></td>\n<td style=\"text-align:center\">✗</td>\n<td style=\"text-align:center\">✓</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Uso eficiente de memória</td>\n<td style=\"text-align:center\">✓</td>\n<td style=\"text-align:center\">✗</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Propriedades estáticas</td>\n<td style=\"text-align:center\">✓</td>\n<td style=\"text-align:center\">✓</td>\n</tr>\n</tbody>\n</table>\n<p>Note que, apesar das vantagens que as fábricas trazem, alguns pontos negativos\nimpactam a sua escolha.</p>\n<p>Num geral, os desenvolvedores JavaScript preferem utilizar construtores ao invés\nde fábricas porque os próprios ambientes de execução preferem utilizar esse\npadrão. Mas, mesmo sendo menos populares, é importante entender as fábricas pois\nelas permitem compreender as limitações que os construtores possuem e\nvice-versa.</p>\n<p>No entanto, construtores contam com algumas simplificações sintáticas que\nfacilitam ainda mais seu uso, como é o caso da estrutura <code>class</code> no ES6, mas\nisso é um assunto para a próxima publicação!</p>\n<p>Até mais!</p>\n",
			"date_published": "2016-04-27T05:16:01Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2",
			"url": "https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2",
			"title": "JavaScript Orientado a Objetos #2",
			"content_html": "<p>Hoje iremos compreender um pouco sobre Construtores no contexto do JavaScript\nOrientado a Objetos, um padrão de projeto para a criação de objetos que possui\nmuita similaridade com a orientação a objetos com classes.</p>\n<aside>\n  <p>\n    <strong>cons.tru.tor:</strong> (1) que ou aquele que constrói; (2) o que\n    domina o saber de construir.\n  </p>\n</aside>\n<p>Para que você aproveite melhor o texto é recomendado que você tenha conhecimento\ndos conceitos básicos de orientação a objetos. Você pode ler uma pequena\nintrodução\n<a href=\"http://maxroecker.github.io/blog/javascript-orientado-a-objetos-1/\">no texto anterior dessa série</a>.\nTambém é recomendado que você conheça o comportamento e características dos\n<a href=\"http://maxroecker.github.io/blog/javascript-basico-5/\">objetos</a> e\n<a href=\"http://maxroecker.github.io/blog/javascript-basico-6/\">funções</a> em\nJavaScript. O texto hoje é um pouco longo porque achei importante unir os\nprincipais tópicos de cada padrão em uma só publicação.</p>\n<h2 id=\"introducao\" tabindex=\"-1\">Introdução <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2\">#</a></h2>\n<p>Na orientação a objetos, um <strong>construtor</strong> é uma rotina utilizada para\ninicializar um objeto cuja a memória para ele já foi alocada. Em linguagens com\norientação a objetos baseada em classes, como é o caso do Java e do C++, o\nconstrutor é definido na própria classe e é invocado toda vez que uma instância\ndessa classe é criada.</p>\n<p>O JavaScript não possui classes, mas o conceito de construtores é feito por meio\nde funções que inicializam objetos. Por exemplo, veja a função <code>Person</code> abaixo,\nque recebe um objeto <code>target</code>, além de um nome junto e um sobrenome em <code>name</code> e\n<code>surname</code>.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> surname</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  target<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  target<span class=\"token punctuation\">.</span>surname <span class=\"token operator\">=</span> surname<span class=\"token punctuation\">;</span>\n  target<span class=\"token punctuation\">.</span>getFullName <span class=\"token operator\">=</span> getFullName<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Veja que a função <code>Person</code> recebe o objeto alvo e inicializa-o,\natribuindo as propriedades e métodos que definem o objeto.</p>\n<aside>\n  <p>\n    Mesmo que a função <code>Person</code> seja definida antes da função\n    <code>getFullName</code>, ela ainda pode referenciá-la, pois suas\n    declarações passaram por um processo de <a href=\"https://maxroecker.github.io/blog/javascript-intermediario-4/\"><em lang=\"en\">hoist</em></a>.\n  </p>\n</aside>\n<p>Veja que podemos utilizá-la como um construtor, uma vez que ela inicializa um\nobjeto e permite a interação por meio de métodos e acesso às propriedades.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Pedremildo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Escavadeira'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Testerson'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Trunk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Pedremildo</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Trunk</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 'Pedremildo Escavadeira'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>getFullName <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>getFullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span></code></pre>\n<h2 id=\"construtores\" tabindex=\"-1\">Construtores <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2\">#</a></h2>\n<p>O exemplo anterior de um construtor está “bem comportado”, uma vez que estamos\npassando objetos “vazios” com o literal <code>{…}</code>. Quando estamos falando de\nconstrutores, normalmente estamos falando de inicializar objetos recém-criados,\nmas nada garante que alguém passe qualquer objeto como o <code>target</code> do nosso\nconstrutor.</p>\n<p>Para isso, o JavaScript fornece o operador\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code></a>.\nO <code>new</code> é um operador utilizado antes da chamada de funções e que muda alguns\ndetalhes da sua execução. Ao executar <code>new ⟨função⟩(⟨argumentos⟩)</code>, o JavaScript\nfaz os seguintes passos:</p>\n<ol>\n<li>Cria um objeto vazio com protótipo igual a propriedade <code>prototype</code> da função;</li>\n<li>“Amarra” o contexto <code>this</code> da função ao objeto criado no passo 1;</li>\n<li>Retorna o objeto criado no passo 1 caso a função retorne <code>undefined</code>.</li>\n</ol>\n<p>Assim, podemos reescrever a função <code>Person</code> acima de maneira mais simples e\nintuitiva:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> surname</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname <span class=\"token operator\">=</span> surname<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getFullName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Veja que não é mais necessário receber um objeto como parâmetro, pois o <code>this</code> é\nimplicitamente definido como o objeto recém criado pelo operador <code>new</code>. Também\nnão há necessidade de retornar um objeto, já que o <code>new</code> implicitamente fará\nisso. Além disso, não precisamos mais atribuir os métodos diretamente no objeto\ncomo antes, uma vez que utilizamos a cadeia de protótipos. O operador <code>new</code> irá\ncriar um objeto com protótipo igual a <code>Person.prototype</code>, onde nossos métodos\nsão definidos.</p>\n<p>O operador <code>new</code> garante que um objeto “novo” é fornecido, então, precisamos\ninstânciar nossos objetos utilizando ele. Veja que podemos fazer exatamente os\nmesmos testes que o exemplo anterior.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pedremildo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Escavadeira'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Testerson'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Trunk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Pedremildo</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Trunk</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 'Pedremildo Escavadeira'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>getFullName <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>getFullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span></code></pre>\n<p>Utilizar construtores com o operador <code>new</code> e a cadeia de protótipos é\nconsiderado a técnica mais comum e recomendada de desenvolver código orientado a\nobjetos em JavaScript, e é nela que iremos nos aprofundar nos próximos tópicos.</p>\n<h2 id=\"heranca\" tabindex=\"-1\">Herança <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2\">#</a></h2>\n<p>Podemos alcançar a herança ao utilizar uma chamada ao construtor qual se quer\nherdar as características com o auxílio do método\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>apply</code></a>.\nO <code>apply</code> é um método de funções (lembre-se que funções, no JavaScript, também\nsão objetos), que recebe dois parâmetros: o primeiro, um objeto, indica contexto\nem que a função deve ser aplicada, ou seja, que <code>this</code> se refere; e o segundo,\num arranjo, que recebe os argumentos que devem ser passados a função a ser\nexecutada.</p>\n<p>Vamos criar um novo construtor, <code>Employee</code>, que estende <code>Person</code> e adiciona uma\npropriedade e um método: <code>salary</code> e <code>getTax</code>, respectivamente. Veja como essa\nherança é implementada abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> surname<span class=\"token punctuation\">,</span> salary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> surname<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>salary <span class=\"token operator\">=</span> salary<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getTax</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>salary <span class=\"token operator\">*</span> <span class=\"token number\">0.08</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>De forma geral, o que o método <code>apply</code> está fazendo é executar a função <code>Person</code>\nno objeto <code>this</code> da função <code>Employee</code>, algo muito similar à chamada <code>super</code> em\nlinguagens com orientação a objetos baseada em classes. Além disso, precisamos\nadequar o protótipo de <code>Employee</code> para estender o protótipo de <code>Person</code> e,\nassim, herdar os métodos por meio da cadeia de protótipos. Para fazer isso,\nutilizamos a função <code>Object.create</code>, que cria um objeto com um protótipo\ndefinido.</p>\n<p>Veja que a utilização é exatamente igual à <code>Person</code>, no entanto, mais propriedades\ne métodos estão disponíveis.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pedremildo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Escavadeira'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Testerson'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Trunk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Pedremildo</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Trunk</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 'Pedremildo Escavadeira'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>getFullName <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>getFullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">getTax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 8</span></code></pre>\n<h2 id=\"encapsulamento\" tabindex=\"-1\">Encapsulamento <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2\">#</a></h2>\n<p>Como os objetos são estruturas de dados muito parecidos com uma\n<a href=\"https://en.wikipedia.org/wiki/Associative_array\">tabela <em>hash</em></a>, todas as\npropriedades do objeto podem ser acessadas. O conceito de encapsulamento, com\nconstrutores, não é regido pela linguagem, mas sim por convenção.</p>\n<p>Normalmente se queremos que uma propriedade do objeto seja “protegida” do meio\nexterno, fazemos isso por meio de uma notação padrão, normalmente prefixando o\nnome da propriedade com <code>_</code>. Vamos refatorar o exemplo acima para adicionar\numa propriedade “privada” que armazena a taxa do imposto de um empregado.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> surname<span class=\"token punctuation\">,</span> salary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> surname<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_rate <span class=\"token operator\">=</span> <span class=\"token number\">0.08</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>salary <span class=\"token operator\">=</span> salary<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getTax</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>salary <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_rate<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Veja que a propriedade <code>_rate</code> é adicionada ao objeto como qualquer outra, no\nentanto, como prefixamos o nome com <code>_</code>, quem utiliza esse objeto sabe que essa\npropriedade não deve ser manipulada, pois o comportamento do objeto pode se\ntornar imprevisível.</p>\n<p>Relembrando: a propriedade <code>_rate</code> é exibida e pode ser acessada como qualquer\noutra propriedade do objeto, mas, por convenção, indica-se que ela não deve ser\nmanipulada fora do próprio objeto. Esse tipo de convenção não é único da\nlinguagem JavaScript, outras linguagens dinâmicas, como o Python,\n<a href=\"https://docs.python.org/3/tutorial/classes.html#private-variables\">adotam regras similares</a>.</p>\n<h2 id=\"polimorfismo\" tabindex=\"-1\">Polimorfismo <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2\">#</a></h2>\n<p>Em JavaScript o polimorfismo pode ser realizado sem muitos problemas, uma vez\nque funções são objetos, objetos são mutáveis e variáveis não possuem tipos\ndefinidos. Normalmente o polimorfismo se dá por meio do <a href=\"https://pt.wikipedia.org/wiki/Duck_typing\"><em lang=\"en\">duck\ntyping</em></a> e que fazem o <strong>Teste do Pato</strong>.</p>\n<blockquote>\n  <p>\n    Se algo parece com um pato, nada como um pato e grasna como um pato, então\n    provavelmente é um pato\n  </p>\n</blockquote>\n<p>No contexto de programação, isso significa que não é o tipo nem a cadeia de\nherança de do objeto que irá definir sua semântica, mas sim suas propriedades e\nmétodos. Se um conjunto de objetos contém um método com o nome <code>foo</code>, você pode\nchamá-los sem problema.</p>\n<p>Não há um contrato pré-definido entre as objetos — como é o caso das interfaces\nem Java ou classes abstratas em C++ — e por isso fica a cargo do codificador\nutilizar a mesmo protocolo nos objetos em que deve-se estabelecer um\npolimorfismo.</p>\n<figure>\n  <img src=\"https://maxroecker.github.io/img/illustrations/automata-duck.svg\" alt=\"Um automâto de pato com sistema alimentação similar ao trato digestivo\" title=\"Pato Mecânico de Jacques de Vaucanson, 1738\" decoding=\"async\" loading=\"lazy\">\n</figure>\n<h2 id=\"propriedades-e-metodos-estaticos\" tabindex=\"-1\">Propriedades e métodos estáticos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2\">#</a></h2>\n<p>Propriedades estáticas são atributos/métodos que pertencem ao construtor e não a\ncada um dos objetos construídos por ele. Propriedades estáticas dos construtores\npodem ser criadas atribuindo propriedades aos próprios construtores.</p>\n<p>Vamos exemplificar a utilização de propriedades estáticas no construtor <code>Person</code>\npara armazenar a quantidade de objetos já criados por ele ou qualquer\ndescendente.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> surname</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Person<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname <span class=\"token operator\">=</span> surname<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nPerson<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getFullName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Assim, podemos agora verificar quantas instâncias já foram criadas, veja:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 0</span>\n\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pedremildo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Escavadeira'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 1</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Testerson'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Trunk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 2</span></code></pre>\n<h2 id=\"garantias-de-instanciacao\" tabindex=\"-1\">Garantias de instanciação <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2\">#</a></h2>\n<p>O JavaScript também permite verificar se um objeto é uma instância de um\nconstrutor por meio do operador <code>instanceof</code>. Veja abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pedremildo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Escavadeira'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Testerson'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Trunk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span></code></pre>\n<p>O operador <code>instanceof</code> testa se a propriedade <code>prototype</code> do construtor à\ndireita está na cadeia de protótipos do objeto à esquerda, e, com isso, determina\nse um objeto foi construído por aquele.</p>\n<p>O uso do <code>instanceof</code> é bastante utilizado para garantir a segurança de um\nconstrutor. Uma vez que um construtor é uma função qualquer que utiliza o\ncontexto <code>this</code>, o que acontece se chamar a função sem o <code>new</code>?</p>\n<p>Nesse caso, não cria-se um objeto novo e o <code>this</code> no construtor passa a ser o\ncontexto atual de onde a função foi executada. Assim, o construtor, que espera\nque o <code>this</code> seja um objeto recém-criado na verdade recebe outro e isso pode\ncausar efeitos colaterais imprevisíveis e <em lang=\"en\">bugs</em> de difícil\nlocalização. Para garantir que o construtor sempre receba no <code>this</code> o objeto\nesperado, podemos adicionar o seguinte teste:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> surname</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname <span class=\"token operator\">=</span> surname<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getFullName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Assim, se caso alguém chame <code>Person</code> sem o <code>new</code>, teremos um erro.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pedremildo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Escavadeira'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → erro!</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Testerson'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Trunk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → sucesso</span></code></pre>\n<h2 id=\"conclusoes\" tabindex=\"-1\">Conclusões <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-2\">#</a></h2>\n<p>Utilizar construtores traz várias vantagens que incluem:</p>\n<ul>\n<li>Herança simplificada: basta chamar o construtor em outro e adequar a cadeia\nherdar as propriedades;</li>\n<li>Polimorfismo simplificado: não há contratos entre diferentes construtores.</li>\n<li>Uso eficiente da memória: cada método é somente alocado uma vez e\ncompartilhado entre todos os objetos através do uso de protótipos;</li>\n</ul>\n<p>Porém, alguns pontos devem ser considerados:</p>\n<ul>\n<li>Não permite um verdadeiro encapsulamento, todas as propriedades são\nacessíveis;</li>\n<li>É necessário sempre tomar cuidado ou tratar a chamada de construtores sem o\noperador <code>new</code>;</li>\n<li>Justamente porque os métodos são compartilhados e dependem de um contexto\nespecífico, é necessário uma atenção especial quando os métodos são chamados\npara evitar\n<a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/this\">problemas com o <code>this</code></a>.</li>\n</ul>\n<p>Apesar dos pontos “negativos”, a utilização de construtores em JavaScript é tão\ncomum que grande parte das APIs fornecidas pelos ambientes de execução utilizam\nesse padrão. No entanto, há uma outro padrão para programarmos JavaScript\norientado a objetos: as Fábricas, que mitigam os pontos negativos vistos acima\nao custo de alguns dos positivos. Mas, esse assunto fica para a próxima\npublicação.</p>\n<p>Até a próxima!</p>\n",
			"date_published": "2016-04-22T21:05:36Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/javascript-orientado-a-objetos-1",
			"url": "https://maxroecker.github.io/blog/javascript-orientado-a-objetos-1",
			"title": "JavaScript Orientado a Objetos #1",
			"content_html": "<p>Hoje vamos iniciar uma nova série de publicações sobre a linguagem JavaScript\ncom foco na programação orientada a objetos. Nessa série, espero que você\ncompreenda conceitos importantes como o encapsulamento de dados, herança e\npolimorfismo em seu código. Vamos também entender mais a fundo a estrutura dos\nobjetos e compreender o estilo de programação baseado em protótipos do\nJavaScript.</p>\n<h2 id=\"introducao-rapida-a-programacao-orientada-a-objetos\" tabindex=\"-1\">Introdução rápida à Programação Orientada a Objetos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-1\">#</a></h2>\n<p>A\n<a href=\"https://en.wikipedia.org/wiki/Object-oriented_programming\">Programação Orientada a Objetos</a>\n(POO) é um paradigma de programação que favorece o uso de <strong>objetos</strong>, unidades\nde computação que contém uma combinação de variáveis e funções. Idealmente, esse\nparadigma tem o objetivo de separar um problema complexo em pequenos problemas\nisolados que são resolvidos por objetos, e fornecem um protocolo ao mundo\nexterior pelo qual o objeto pode fornecer informações.</p>\n<aside>\n  <p>\n    <strong>pa.ra.dig.ma:</strong> Exemplo, norma ou padrão estabelecido ou a\n    ser seguido.\n  </p>\n</aside>\n<p>O grande triunfo da Orientação a Objetos é que os dados e as funções que\nmanipulam esses dados estão agregados em uma mesma estrutura e podem proteger-se\ndo acesso e da manipulação direta do “mundo externo”. Os dados ficam em um\nescopo interno do objeto e são chamados de <strong>atributos</strong>. Os atributos armazenam\no <strong>estado</strong> do objeto, ou seja, o conjunto de valores que o objeto contém. Toda\nvez que o valor de algum atributo é alterado, o objeto muda de estado. Por sua\nvez, para que um objeto possa ser usado pelo mundo externo, ele deve fornecer\num protocolo. Protocolos de acesso à objetos são, em sua maioria, compostos por\n<strong>métodos</strong>. Métodos são propriedades funcionais dos objetos e que podem ser\nexecutadas para alterar ou retornar algum valor no estado de um objeto.</p>\n<p>Construir aplicações com objetos permite que os desenvolvedores adotem algumas\ntécnicas valiosas:</p>\n<ul>\n<li><strong>Herança</strong>: A herança é a capacidade de objetos poderem “copiar”\ncaracterísticas de outros objetos, ou seja, seus métodos os métodos e\npropriedades. É um recurso bastante poderoso e que permite um grande reuso de\ncódigo.</li>\n<li><strong>Encasulamento</strong>: o encasulamento é a capacidade de objetos “esconderem” suas\npropriedades do mundo externo ou restringir o acesso a eles, permitindo que\nninguém que não saiba os efeitos colaterais de uma alteração num objeto possa\ninterferir em seu funcionamento.</li>\n<li><strong>Polimorfismo</strong>: O polimorfismo pode ser definido como a habilidade de chamar\nmétodos de diferentes objetos de forma idêntica. Quando dizemos que um\nconjunto de objetos é polimórfico, significa que os objetos desse conjunto\npossuem protocolos idênticos, ou seja, aceitam as mesmas entradas e\nproporcionam a mesma saída. No entanto, sua implementação interna pode ser\ndrasticamente diferente.</li>\n</ul>\n<p>A Programação Orientada a Objetos é destinada a promover uma maior flexibilidade\ne facilidade na manutenção de código e é muito popular em aplicações de grande\nescala. Atualmente, muitas linguagens populares — como Java, C++, Python, Ruby,\nPHP entre outras — permitem programação orientada a objetos. O JavaScript também\nestá incluso nesse grupo, no entanto, possui algumas peculiaridades que em um\nprimeiro momento podem ser estranhas para a grande maioria dos desenvolvedores\nacostumados com outras linguagens.</p>\n<figure>\n  <img alt=\"Um homem opera um veículo de uma roda sentado dentro da grande roda, protegido do mau tempo por um guarda-chuva fixado no dispositivo.\" title=\"J. O. Lose of Patterson, N. J. Veículo de uma Roda. N° 325,548.\" loading=\"lazy\" decoding=\"async\" src=\"https://maxroecker.github.io/img/-E-Ftz6x5P-800.svg\" width=\"800\" height=\"600\">\n</figure>\n<h2 id=\"revisando-os-objetos-em-javascript\" tabindex=\"-1\">Revisando os Objetos em JavaScript <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-1\">#</a></h2>\n<p>A grande maioria das linguagens que utilizam Orientação a Objetos se baseiam em\n<strong>classes</strong>. Uma classe é um “modelo” ou um “<a href=\"https://pt.wikipedia.org/wiki/Blueprint\"><em lang=\"en\">blueprint</em></a>”\npara a criação de objetos. É responsabilidade da classe definir os atributos e a\ninterface dos objetos por ela criados. Objetos em uma linguagem baseada em\nclasses são <strong>instâncias das classes</strong>.</p>\n<p>Em Javascript, os objetos não são instâncias de classes. Como já vimos em\n<a href=\"http://maxroecker.github.io/blog/javascript-basico-5/\">posts anteriores</a>, um\nobjeto é uma estrutura de dados da linguagem que se assemelha a uma\n<a href=\"https://en.wikipedia.org/wiki/Associative_array\">tabela <em>hash</em></a>. Podemos\ndefinir um objeto, seus atributos e seus métodos com o literal <code>{…}</code>.\nVeja:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pessoa <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Pedro'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">'pedro@email.com'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">getUsername</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pessoa<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Pedro</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pessoa<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → pedro</span>\npessoa<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> <span class=\"token string\">'joao@exemplo.com'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pessoa<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → joao</span></code></pre>\n<p>Podemos acessar as propriedades de um objeto através do operador <code>.</code> seguido da\npropriedade ou através do operador <code>[]</code> passando a chave como uma <em lang=\"en\">string</em>. A palavra <code>this</code>, quando utilizada em um objeto,\nrefere-se ao próprio objeto, dessa forma podemos utilizar o atributo <code>email</code> do\nobjeto criado anteriormente dentro do método <code>getUsername</code>.</p>\n<p>Entretanto, objetos literais do JavaScript não possuem o conceito de\nencapsulamento como pregado pela Orientação a Objeto. Todos os atributos são\nacessíveis e visíveis pelo lado de fora do objeto.</p>\n<h2 id=\"prototipos\" tabindex=\"-1\">Protótipos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-1\">#</a></h2>\n<p><a href=\"http://maxroecker.github.io/blog/javascript-intermediario-6/\">Como visto anteriormente</a>,\no JavaScript não possui Orientação a Objetos baseado em Classes (OOC). Na\nverdade, a linguagem implementa outro “estilo” de programação orientada a\nobjetos, a <strong>Orientação a Objetos baseada em Protótipos (OOP)</strong>.</p>\n<p>Protótipos são, de forma bem simples, objetos que servem de “reserva” para outro\nobjeto. Dessa forma, quando buscamos uma propriedade em um objeto e ela não está\npresente nele, a máquina virtual vai até o protótipo desse objeto buscar essa\npropriedade. Caso o resultado seja negativo novamente, busca-se no protótipo do\nprotótipo e assim por diante até que um objeto não tenha prototótipo ou a\npropriedade seja encontrada.</p>\n<p>Compreender como os protótipos funcionam é essencial para compreender como\nprogramar em JavaScript orientado a objetos. Caso você queira se saber mais\nsobre o que são protótipos de objetos, recomendo a leitura\n<a href=\"http://maxroecker.github.io/blog/javascript-intermediario-6/\">desse texto</a> onde\ndescrevo com mais detalhes o comportamento de protótipos e suas principais\ncaracterísticas.</p>\n<h2 id=\"orientacao-a-objetos-em-javascript\" tabindex=\"-1\">Orientação a Objetos em JavaScript <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-orientado-a-objetos-1\">#</a></h2>\n<p>O JavaScript é uma linguagem muito flexível e permite que os desenvolvedores\ntenham liberdade para construir diversas soluções para problemas e objetivos que\nqueiram alcançar. Quando estamos programando em um paradigma orientado a objetos\nisso não é diferente. Há múltiplas maneiras e padrões para se programar\norientado a objetos dentro da linguagem.</p>\n<p>Cada técnica possui sua vantagem e sua desvantagem característica, e essa\nflexibilidade permite que o desenvolvedor escolha qual é a solução mais adequada\nao seu problema. Essa série de publicações pretende passar a você alguns\nconceitos e técnicas utilizadas em JavaScript para que os programas garantam as\nprincipais características da programação orientada a objetos. E justamente por\nisso iremos nos focar em dois padrões utilizados quando queremos desenvolver\naplicações em JavaScript orientado a objetos: os <strong>construtores</strong> e as\n<strong>fábricas</strong>. Ao final, também veremos as novidades do ES2015 para esse\nparadigma.</p>\n<p>Até mais!</p>\n",
			"date_published": "2016-04-15T08:49:56Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/javascript-intermediario-6",
			"url": "https://maxroecker.github.io/blog/javascript-intermediario-6",
			"title": "JavaScript Intermediário #6",
			"content_html": "<p>No último texto da série, iremos abordar um dos conceitos que mais causam\nconfusão em desenvolvedores que estão iniciando na linguagem, os <strong>protótipos</strong>.\nNo entanto, espero que ao fim dessa publicação, você compreenda que o mecanismo\nde protótipos é simples, mas muito poderoso.</p>\n<aside> <p> <strong>pro·tó·ti·po</strong>: (1) Primeiro tipo criado, original;\n(2) Algo feito pela primeira vez e, muitas vezes, copiado ou imitado; (3)\nNodelo, padrão, cânone. </p> </aside>\n<h2 id=\"metodos-de-objetos\" tabindex=\"-1\">Métodos de objetos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-6\">#</a></h2>\n<p>Em JavaScript, objetos são estruturas de dados que agrupam duplas de chave-valor\ndenominadas de propriedades. A chave de uma propriedade é um nome que aponta\npara um valor único. No entanto, um valor pode ser apontado por várias\npropriedades, do mesmo ou diferentes objetos. As propriedades de um objeto podem\nser acessadas por meio dos operadores <code>.</code> ou <code>[…]</code>. Objetos são,\nfundamentalmente, implementações de\n<a href=\"https://en.wikipedia.org/wiki/Associative_array\">arranjos associativos</a>.</p>\n<aside> <p> Se você quer compreender melhor os fundamentos de objetos em\nJavaScript, recomendo também a leitura <a href=\"http://maxroecker.github.io/blog/javascript-basico-5/\">dessa outra\npublicação do blog</a>. </p> </aside>\n<p>Mas se objetos são implementações de arranjos associativos, porque eles são\nchamados de “objetos” e não de\n<a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Map.html\">mapas</a>,\n<a href=\"https://docs.python.org/3/tutorial/datastructures.html#dictionaries\">dicionários</a>\nou\n<a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\">tabelas hash</a>,\ncomo em outras linguagens de programação?</p>\n<p>Objetos tem um comportamento bem diferente de outras implementações de arranjos\nassociativos quando estamos tratando de propriedades que apontam para funções.\nQuando uma propriedade aponta para uma função, ela recebe, inclusive, um nome\nespecial: <strong>método</strong>.</p>\n<p>Métodos são propriedades de um objeto que apontam para funções e podem\ndeclarados como uma função qualquer por meio da palavra-chave <code>function</code>. No\nentanto, métodos tem a possibilidade de utilizar um parâmetro implícito: o\n<code>this</code>, uma referência para o próprio objeto o qual o método “faz parte”. O\n<code>this</code> e não precisa ser declarado ou passado como parâmetro quando o utilizamos\nno corpo da função. Vamos ver exemplo simples de objeto com métodos no código\nabaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Pedro'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Pipoca'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">getFullName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">toString</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fullname <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'[Person: '</span> <span class=\"token operator\">+</span> fullname <span class=\"token operator\">+</span> <span class=\"token string\">']'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Como se pode ver, o objeto <code>person</code> possui duas propriedades, <code>firstName</code> e\n<code>lastName</code>, e dois métodos, <code>getFullName</code> e <code>toString</code>. As propriedades\n<code>firstName</code> e <code>lastName</code>, que indicam o nome e o sobrenome, são simples strings.\nO método <code>getFullName</code> é uma função que utiliza o <code>this</code> para acessar as\npropriedades <code>firstName</code> e <code>lastName</code> e retornar o nome completo da pessoa por\nmeio de uma concatenação de strings. Já o método <code>toString</code> é uma outra função\nque retorna o objeto uma versão serializada como string.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Pedro</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">[</span><span class=\"token string\">'lastName'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Pipoca</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>getFullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → [Function: getFullName]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">[</span><span class=\"token string\">'toString'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → [Function: toString]</span></code></pre>\n<p>Para acessar tanto propriedades quanto métodos, utilizamos o operador <code>.</code> ou\n<code>[…]</code>. No entanto, acessar um método não significa executá-lo, significa apenas\nreceber uma referência para o método. Quando queremos executar um método,\nprecisamos, além de acessá-lo, utilizar um par de parênteses.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">[</span><span class=\"token string\">'getFullName'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Pedro Pipoca</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → [Person: Pedro Pipoca]</span></code></pre>\n<p>Assim como qualquer propriedade, podemos verificar a existência de um método com\no operador <code>in</code>:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getFullName'</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toString'</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span></code></pre>\n<p>E podemos excluir métodos com o operador <code>delete</code>:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getFullName'</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toString'</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\n\n<span class=\"token keyword\">delete</span> person<span class=\"token punctuation\">.</span>getFullName<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> person<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getFullName'</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toString'</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span></code></pre>\n<p>Mas o que? Nós não excluímos o método <code>toString</code>? Porque o operador <code>in</code> ainda\nacusa que ele existe no objeto <code>person</code>? Bem, se ele ainda existe no objeto\nentão podemos executá-lo. Assim, temos:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → [object Object]</span></code></pre>\n<p>Mas que método é esse? Essa saída não condiz com a implementação que fizemos\npara o <code>toString</code> acima… Chega de mistérios! O que temos aqui é um efeito dos\n<strong>protótipos</strong> em plena ação.</p>\n<figure>\n  <img src=\"https://maxroecker.github.io/img/illustrations/airship.svg\" alt=\"Protótipo de aeronave contendo balões preenchidos com vácuo.\" title=\"Aeronave imaginada pelo italiano Francesco Lana de Terzi (1631–1687)\" decoding=\"async\" loading=\"lazy\">\n</figure>\n<h2 id=\"prototipos-de-objetos\" tabindex=\"-1\">Protótipos de objetos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-6\">#</a></h2>\n<p>Todo objeto em JavaScript pode ter um protótipo. Um protótipo é, informalmente,\num “objeto reserva” que contém propriedades e métodos e que podem ser acessadas\na partir do objeto inicial. Assim, ao acessar uma propriedade que não existe no\nobjeto primário, o JavaScript automaticamente busca a propriedade no protótipo\nantes de resultar <code>undefined</code>.</p>\n<p>Como o protótipo também é um objeto, caso a propriedade não seja encontrada no\nprotótipo então o JavaScript busca no protótipo do protótipo, e assim por\ndiante. Uma hora ou outra o protótipo de um objeto será <code>null</code> e a busca é\nencerrada. A busca pela propriedade percorre toda a <strong>cadeia de protótipos</strong>\nantes de resultar em <code>undefined</code>.</p>\n<p>Na verdade, o método <code>toString</code> misterioso que vimos acima realmente não faz\nparte do objeto <code>person</code> que declaramos, mas do protótipo dele: o\n<code>Object.prototype</code>.</p>\n<aside> <p> Todo objeto declarado com o literal <code>{…}</code> possui o\n<code>Object.prototype</code> como protótipo; <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#Object_instances_and_Object_prototype_object\">que\npossui vários métodos</a>, incluindo o <code>toString</code>. </p> </aside>\n<p>Como nós definimos um método <code>toString</code> em <code>person</code>, ao acessarmos o JavaScript\nlogo o encontra no primeiro objeto, nem necessitando iniciar a busca pela cadeia\nde protótipos. No entando esse comportamento muda a partir do momento que\nexcluímos o método <code>toString</code> de <code>person</code>. Caso acessemos o <code>toString</code>\nnovamente, o JavaScript vai encontrá-la no <code>Object.prototype</code> por meio da cadeia\nde protótipos.</p>\n<figure>  \n  <img alt=\"Ilustração do objeto person e do protótipo Object.prototype\" title=\"undefined\" loading=\"lazy\" decoding=\"async\" src=\"https://maxroecker.github.io/img/6XuHkqp03p-800.svg\" width=\"800\" height=\"450\">\n</figure>\n<p>A implementação do <code>toString</code> no <code>Object.prototype</code> é totalmente independente da\nimplementação que fizemos em <code>person</code> e isso explica a divergência na saída que\ntivemos acima.</p>\n<p>Você pode identificar o protótipo de um objeto por meio da função\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf</code></a>.\nJá vimos que o protótipo de um objeto criado com o literal <code>{…}</code> é o\n<code>Object.prototype</code> e que protótipos são opcionais. O <code>Object.prototype</code> é um\nexemplo de objeto que não tem protótipos. Podemos vamos confirmar essas\nsentenças com o exemplo abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\n\n<span class=\"token keyword\">const</span> pp <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → null</span></code></pre>\n<p>Você pode criar um objeto com qualquer protótipo por meio da função\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create</code></a>,\nque recebe como primeiro parâmetro um objeto que será o protótipo do objeto\ncriado. Veja no exemplo a seguir onde definimos um protótipo para objetos que\nrepresentam um ponto com coordenadas em duas dimensões:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> pointPrototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getDistanceFrom</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">other</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> dx <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> dy <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> distance <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>dx <span class=\"token operator\">*</span> dx <span class=\"token operator\">+</span> dy <span class=\"token operator\">*</span> dy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> distance<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> origin <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>pointPrototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\norigin<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\norigin<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> point <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>pointPrototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npoint<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\npoint<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span><span class=\"token function\">getDistanceFrom</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span><span class=\"token function\">getDistanceFrom</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 5</span></code></pre>\n<p>Veja que o protótipo possui a função <code>getDistanceFrom</code>, que recebe outro ponto\ncom parâmetro em <code>other</code> e calcula a distância entre o <code>this</code>. Por causa da\ndelegação de propriedades, o <code>this</code> de um método chamado pelo objeto primário\ninicia a busca pelo objeto primário. Por isso que o <code>this.x</code> referência o valor\nde <code>origin.x</code> ou <code>point.x</code> mas não de <code>pointPrototype.x</code>.</p>\n<aside> <p> <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\"><code>Math.abs</code></a>\ne <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\"><code>Math.sqrt</code></a>\nsão funções padrão do JavaScript que retornam, respectivamente, o valor absoluto\ne a raiz quadrada de um número. </p> </aside>\n<p>Devido a busca na cadeia de protótipos, não é preciso definir a função\n<code>getDistanceFrom</code> duas vezes. Ou seja, uma função definida apenas uma vez pode\nser utilizada por qualquer objeto que tenha <code>pointPrototype</code> como protótipo.\nIsso permite uma reutilização de código bastante poderosa. A figura abaixo\napresenta uma ilustração do protótipo compartilhado:</p>\n<figure>  \n  <img alt=\"Ilustração de objetos compartilhando um mesmo protótipo.\" title=\"undefined\" loading=\"lazy\" decoding=\"async\" src=\"https://maxroecker.github.io/img/ObN4dpWhOT-800.svg\" width=\"800\" height=\"500\">\n</figure>\n<p>Você também pode criar objetos que não tenham protótipos passando <code>null</code> para o\nprimeiro parâmetro do <code>Object.create</code>. No entanto, algumas funcionalidades\nbásicas não estarão disponíveis, como é o caso da função <code>toString</code>:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\na<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nb<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 2</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → [object Object]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Erro! \"toString\" não é uma função</span></code></pre>\n<p>É possível alterar o protótipo de um objeto após ele ser criado com a função <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf</code></a>.\nNo entanto, a forma com que as máquinas virtuais JavaScript otimizam o acesso a\npropriedades, alterar o protótipo após a criação do objeto é uma operação muito\nlenta. Além disso, os efeitos colaterais que envolvem a mudança da cadeia de\nprotótipos podem ser bastante imprevisíveis e fonte de bugs com difícil\nidentificação. Por tudo isso, alterar o protótipo de um objeto é considerado uma\nmá prática na maioria das vezes.</p>\n<h2 id=\"conclusoes\" tabindex=\"-1\">Conclusões <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-6\">#</a></h2>\n<p>A grande vantagem dos protótipos é que eles oferecem um considerável ganho de\ndesempenho e se apresentam como uma forma eficiente de utilização da memória\nquando queremos distribuir código repetido para vários objetos. Afinal, quando\nvários objetos compartilham um mesmo protótipo, há somente uma instância desse\nprotótipo na memória. No entanto, assim como qualquer recurso compartilhado, é\nnecessário ter uma atenção extra as mutações feita a um protótipo. Qualquer\nmudança no prototótipo afeta todos os objetos que o referenciam.</p>\n<p>Os protótipos são utilizados principalmente para reutilização e compartilhamento\nde código entre diversos objetos. Eles também são fundamentais para alguns\npadrões que seguem o paradigma de programação orientado a objetos.</p>\n<p>Os protótipos são responsáveis por boa parte do poder de expressividade que\nlinguagem JavaScript oferece. Sua utilização se torna ainda mais mais\nsignificativa quando aliada a outras funcionalidades presentes na linguagem,\ncomo funções de alta ordem, as <i lang=\"en\">closures</i> e a programação\norientada a eventos.</p>\n",
			"date_published": "2016-04-06T15:54:33Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/javascript-intermediario-5",
			"url": "https://maxroecker.github.io/blog/javascript-intermediario-5",
			"title": "JavaScript Intermediário #5",
			"content_html": "<p>Hoje iremos abordar a IIFE, uma prática muito utilizada no JavaScript quando\nestamos desenvolvendo aplicações ou módulos na linguagem já que ela garante um\ncódigo que não cause ou seja afetado por efeitos colaterais externos.</p>\n<h2 id=\"introducao\" tabindex=\"-1\">Introdução <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-5\">#</a></h2>\n<p>Para entender a IIFE, precisamos relembrar o que são expressões funcionais e <i lang=\"en\">closures</i> em JavaScript.</p>\n<p>Funções são tratadas como qualquer outro valor em JavaScript, e, por isso, podem\nser atribuídas em variáveis, passadas como parâmetro ou retornadas como\nresultado. Toda vez que uma expressão resulta em uma função, dizemos que temos\numa <strong>expressão funcional</strong>. Uma declaração de função utilizando a palavra-chave\n<code>function</code> sempre retorna como valor uma referência para a função definida e,\npor isso, também é considerada uma expressão funcional. Uma variável pode\nexecutar uma função que ela referencia utilizando um par de parênteses <code>(…)</code>\nentre os parâmetros da função.</p>\n<aside> <p> Caso você queira ler mais sobre o comportamento de expressões\nfuncionais em JavaScript, recomendo a leitura <a href=\"https://maxroecker.github.io/blog/javascript-basico-6/\">dessa\npublicação</a> no blog. </p> </aside>\n<p>Além disso, toda vez que uma função é definida internamente de um escopo de\noutra função e, além disso, referencia variáveis locais da função externa; temos\numa <i lang=\"en\">closure</i>. Uma <strong><i lang=\"en\">closure</i></strong>\narmazena o escopo léxico da função externa e é capaz de acessá-lo mesmo quando a\nsua execução já tenha sido finalizada. O <i lang=\"en\">closure</i> é um estado\nprivado da função e nada mais tem acesso a esse estado exceto outras funções\ndefinidas no mesmo <i lang=\"en\">closure</i>.</p>\n<aside> <p> Se você quiser entender melhor sobre o que são <i lang=\"en\">closures</i>, <a href=\"https://maxroecker.github.io/blog/javascript-intermediario-2/\">essa outra\npublicação</a> do blog pode lhe ajudar. </p> </aside>\n<h2 id=\"o-padrao-iife\" tabindex=\"-1\">O Padrão IIFE <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-5\">#</a></h2>\n<p>Com os conceitos relembrados na introdução, podemos criar uma IIFE. <strong>IIFE é uma\nexpressão funcional que é executada imediatamente após ser definida</strong>.\nNormalmente, uma IIFE (do inglês, <i lang=\"en\">Immediately-Invoked Function\nExpression</i>) é escrita como uma a definição de uma função — e sua consequente\nexpressão funcional — seguida da sua imediata execução. Você pode utilizar o\npadrão IIFE utilizando a palavra chave <code>function</code> na seguinte forma:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Veja que entre o primeiro par de parênteses externos estamos definindo uma\nfunção — que retorna uma expressão funcional — e, logo em seguida, no segundo\npar de parênteses externos, estamos invocando-a.</p>\n<p>Vamos aplicar a IIFE em um exemplo prático. Suponha que queremos definir um\ncontador global e único que somente seja acessível via três funções: <code>read</code>, que\nretorna o estado atual do contador; <code>count</code> que incrementa e retorna o valor do\ncontador e <code>reset</code> que reinicializa o contador. Você poderia implementar uma\nsolução tal como o código abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 2</span>\n<span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 0</span></code></pre>\n<p>Apesar da variável <code>state</code>, que armazena o estado atual do contador, ser global\ne única, essa solução possui problemas: a variável <code>state</code> está disponível para\ntodo e qualquer subrotina uma vez que ela é definida globalmente. Além disso, a\nvariável <code>state</code> “polui” o escopo global do código, o que pode levar a conflito\nde nomes e bugs difíceis de serem encontrados.</p>\n<p>Podemos proteger a variável <code>state</code> de efeitos colaterais externos utilizando\numa IIFE. Vamos então refatorar o código acima utilizando essa prática:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">read</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      state <span class=\"token operator\">=</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">reset</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncounter<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncounter<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 2</span>\ncounter<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 0</span></code></pre>\n<p>Agora, no código acima, a variável <code>state</code> está protegida por uma <i lang=\"en\">closure</i> e, dessa forma, não é mais acessível por nenhuma função\nexceto a <code>read</code>, <code>count</code> e <code>reset</code>. Para que tenhamos acesso a essas funções, o\nretorno da IIFE é um objeto que contém referências para as funções que acessam\n<code>state</code>. Por isso que a utilização delas é um pouco modificada na refatoração\nfinal.</p>\n<aside> <p> A IIFE também pode ser encontrado pelo nome de SEAF (do inglês, <i lang=\"en\">Self-Executing Anonymous Function</i>). No entanto, o termo IIFE, <a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/#iife\">introduzido\npor Ben Alman</a>, é considerado semanticamente mais adequado. Afinal, a prática\nnão requer utilizar somente funções anônimas. </p> </aside>\n<h2 id=\"conclusoes\" tabindex=\"-1\">Conclusões <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-5\">#</a></h2>\n<p>A IIFE é uma prática muito utilizada para proteger o escopo global da poluição e\nconflito de nomes de variáveis. Além disso, permite aliviar um pouco a confusão\nde escopos de bloco/função dados pelo\n<a href=\"http://maxroecker.github.io/blog/javascript-intermediario-4/\">mecanismo de hasteamento de variáveis e funções do JavaScript</a>.</p>\n<p>Outra comum utilização da IIFE é o construção de um estado privado e\nencapsulado, uma vez que as variáveis que são utilizadas pelas funções\nretornadas da IIFE ficam alocadas em uma <i lang=\"en\">closure</i> e somente\nessas funções possuem acesso a elas, como vimos no exemplo.</p>\n<p>O post de hoje ficou mais curto, mas, lembre-se, as IIFEs eram uma das poucas\nalternativas para a simulação de módulos em JavaScript em uma época anterior ao\nES2015. É sempre bom ter esse conhecimento no seu inventário.</p>\n",
			"date_published": "2016-04-04T14:22:21Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/javascript-intermediario-4",
			"url": "https://maxroecker.github.io/blog/javascript-intermediario-4",
			"title": "JavaScript Intermediário #4",
			"content_html": "<p>Hoje veremos uma característica bastante peculiar do JavaScript e que\nnormalmente é causa de pequenos erros quanto estamos trabalhando com a\nlinguagem: o hasteamento de variáveis, comumente chamado de <i lang=\"en\">hoisting</i>.</p>\n<aside> <p> <strong>has·te·ar</strong>: (1) Elevar ou prender ao topo de uma\nhaste. (2) Altear, içar, levantar. </p> </aside>\n<h2 id=\"hasteamento-de-variaveis\" tabindex=\"-1\">Hasteamento de variáveis <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-4\">#</a></h2>\n<p>No momento de execução de um código JavaScript, toda declaração de variável\npassam por um processo de hasteamento, isto é, a declaração da variável é\nelevada para o topo do escopo atribuído de forma automática. Esse processo é\ncomumente chamado de <i lang=\"en\">hoisting</i>. O conceito pode ser um pouco\nconfuso a princípio, então, vamos para um exemplo prático. Em JavaScript, é\npossível declarar uma função e chamá-la logo em seguida, como no exemplo abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Max'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Hello, Max!</span></code></pre>\n<p>Entretanto, você também pode chamar uma função que ainda não foi declarada. Ou\nseja, o código acima pode ser reescrito como o abaixo e ainda assim continua\nfuncionando:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Max'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Hello, Max!</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Isso acontece porque a declaração da função <code>hello</code> é hasteada ao topo do\ncódigo. O compilador faz esse processo de forma automática e, por isso, o código\ncontinua funcionando normalmente. O mesmo acontece para variáveis declaradas com\n<code>var</code>. Veja:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → undefined</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 6</span></code></pre>\n<p>Um erro não aconteceu, no entanto, porque a primeira saída foi <code>undefined</code> se a\nvariável é declarada com o valor <code>6</code>? Bem, isso acontece porque o mecanismo de\n<i lang=\"en\">hoisting</i> do JavaScript somente eleva declarações das variáveis,\nmas não a atribuíções que as inicializam. Ou seja, o código acima tem um\ncomportamento equivalente ao código abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → undefined</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 6</span></code></pre>\n<p>Declarações de variáveis locais passam pelo mesmo processo, ou seja, a saída do\ncódigo abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Será igual a:</p>\n<pre><samp>undefined\nundefined\n2\n1</samp></pre>\n<p>No entanto, o <i lang=\"en\">hoisting</i> somente é aplicado em declarações que\nutilizam <code>var</code>. O mecanismo de hasteamento de variáveis declaradas com <code>let</code> e\n<code>const</code> não permite a referência de uma variável ainda não declarada e irá\nlançar um erro do tipo\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\"><code>ReferenceError</code></a>.</p>\n<h2 id=\"conclusao\" tabindex=\"-1\">Conclusão <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-4\">#</a></h2>\n<p>Podemos resumir essa publicação como: o hasteamento de variáveis com <code>var</code> eleva\npara o topo do código somente a declaração, mas não a definição; enquanto o\nhasteamento de funções eleva para o topo do código tanto a declaração quando a\ndefinição.</p>\n<figure>\n  <img src=\"https://maxroecker.github.io/img/illustrations/hoisting.svg\" alt=\"Mecanismo para elevar água.\" decoding=\"async\" loading=\"lazy\">\n</figure>\n<p>Ainda assim, pelos exemplos anteriores, o comportamento de hastear as\ndeclarações de variáveis e funções podem levar a resultados confusos e\nproporcionar um código de difícil leitura. É importante que você siga algumas\nboas práticas no momento de escrita do código. Elevar as declarações de suas\nvariáveis para o topo do seu respectivo escopo evita confusão com o mecanismo de\n<i lang=\"en\">hoisting</i>, pois seu código deixa-o explícito.</p>\n<p>Outra prática importante é a inicialização de um valor na variável sempre que\npossível. Dessa forma, evita-se valores indefinidos durante a execução e\nsurpresas indesejadas.</p>\n",
			"date_published": "2016-01-16T18:34:26Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/javascript-intermediario-3",
			"url": "https://maxroecker.github.io/blog/javascript-intermediario-3",
			"title": "JavaScript Intermediário #3",
			"content_html": "<p>Nesse texto, vamos compreender um pouco mais sobre um paradigma importante\nquando estamos programando em JavaScript e, além disso, entender uma das\nprincipais características que levaram ao sucesso da linguagem: o seu modelo de\nconcorrência.</p>\n<aside> <p> <strong>as·sin·cro·nis·mo</strong>: 1. Qualidade ou estado de\nassíncrono; 2. Ausência de concorrência no tempo. </p> </aside>\n<h2 id=\"assincronia-em-javascript\" tabindex=\"-1\">Assincronia em JavaScript <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-3\">#</a></h2>\n<p>Programação assíncrona é um paradigma de programação onde o código pode não\nseguir o fluxo de execução “padrão”. Além disso, um código assíncrono pode\ntratar de interrupções externas ao programa, tais como a chegada de um evento,\nsinal, temporizador, entre outras.</p>\n<p>Em JavaScript, podemos escrever código assíncrono de forma fácil utilizando a\nfunção\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\"><code>setTimeout</code></a>,\nque recebe dois parâmetros: uma função a ser executada e uma quantidade de\nmilissegundos que indica o tempo de espera para iniciar a execução dessa função.\nVeja o exemplo abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'without one.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fully dressed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You know'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Smile, my dear!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'you are not'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>A saída do código acima será escrita como:</p>\n<pre><samp>Smile, my dear!\nYou know\nyou are not\nfully dressed\nwithout one.</samp></pre>\n<p>Apesar dos <i lang=\"en\">logs</i> serem colocados fora de ordem, alguns foram\ncolocados em funções que foram passadas para o <code>setTimeout</code> e que serão\nexecutadas somente após o tempo de espera for esgotado. Vamos ver outro exemplo\num pouco mais complexo. Considere o código abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">asyncCountTo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">asyncCountTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Qual é a saída do código acima? Temos um laço que dispara várias funções por\nmeio do <code>setTimeout</code> e que imprimem a variável <code>i</code>. Por maior que seja a\nsurpresa, o código acima exibe como saída:</p>\n<pre><samp>4\n4\n4\n4</samp></pre>\n<p>Por quê? A razão desse comportamento se deve à <i lang=\"en\">closure</i>\nassociada a função passada para o <code>setTimeout</code>. A variável <code>i</code> é compartilhada\npor todas as <code>closures</code> e, por isso, tem esse comportamento. O laço continua\nsendo executado e a variável <code>i</code> continua sendo incrementada até chegue ao valor\nquatro, que é quando a condição do laço falha. Só então os <i lang=\"en\">callbacks</i> do <code>setTimeout</code> são executados.</p>\n<aside> <p> Caso você não tenha familiaridade com <i lang=\"en\">closures</i>, <a href=\"https://maxroecker.github.io/blog/javascript-intermediario-2/\">essa\npublicação do blog</a> pode lhe ajudar. </p> </aside>\n<p>No entanto, você percebeu que mesmo quando o tempo de espera for zero, a função\nnão é executada imediatamente? Bem, aqui estamos de frente com um dos efeitos do\nmodelo de concorrência do JavaScript e que vamos entrar em detalhes a partir de\nagora.</p>\n<h2 id=\"programacao-orientada-a-eventos\" tabindex=\"-1\">Programação Orientada a Eventos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-3\">#</a></h2>\n<p>O JavaScript é uma linguagem que foi inicialmente desenvolvida para adicionar\nfuncionalidades as páginas HTML do navegador Netscape. É uma linguagem\nmultiparadigma que suporta programação\n<a href=\"https://en.wikipedia.org/wiki/Procedural_programming\">procedural</a>,\n<a href=\"https://en.wikipedia.org/wiki/Object-oriented_programming\">orientada a objetos</a>\ne <a href=\"https://en.wikipedia.org/wiki/Functional_programming\">funcional</a>, mas, foi\nespecialmente desenvolvida para atender a\n<a href=\"https://en.wikipedia.org/wiki/Event-driven_programming\">programação orientada a eventos</a>.</p>\n<aside> <p> Caso você queira saber um pouco mais sobre a história da linguagem,\n<a href=\"https://maxroecker.github.io/blog/javascript-basico-1/\">leia essa outra\npublicação do blog</a>. </p> </aside>\n<p>A programação orientada a eventos ajusta o fluxo do programa de acordo com\neventos, ou seja, interrupções que podem ser feitas a qualquer momento e\nnecessitam de “reações” por parte do programa. É um paradigma muito utilizado\npara o desenvolvimento de <i lang=\"en\">drivers</i> e sensores de\nmicrocontroladores. A programação orientada a eventos também predomina no\ndesenvolvimento de aplicações com GUI, pois requerem que a aplicação reaja de\nacordo com a interação do usuário. Não é por coincidência que ela seria\nutilizada em “uma linguagem que quer adicionar algumas funcionalidades em\npáginas HTML”, certo?</p>\n<p>Em uma aplicação orientada a eventos, normalmente temos um\n<a href=\"https://en.wikipedia.org/wiki/Event_loop\">Laço de Eventos</a> — comumente chamado\nde <i lang=\"en\">event loop</i> — que aguarda os eventos acontecerem para chamar\nfunções que foram designadas à responder um evento específico. E é o\ncomportamento desse laço o qual vamos detalhar daqui em diante.</p>\n<figure>\n  <img src=\"https://maxroecker.github.io/img/illustrations/steam-engine.svg\" alt=\"Máquina de ciclos a vapor\" decoding=\"async\" loading=\"lazy\">\n</figure>\n<h2 id=\"o-event-loop-do-javascript\" tabindex=\"-1\">O <i lang=\"en\">Event Loop</i> do JavaScript <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-3\">#</a></h2>\n<p>Toda máquina de execução JavaScript possui um <i lang=\"en\">event loop</i> único\nque captura os eventos disparados pelo usuário ou pelo ambiente onde a máquina\nestá alocada. Se um evento capturado pelo <i lang=\"en\">event loop</i> possuir\nalgum <i lang=\"en\">callback</i> associado — uma função que deve ser executada\nquando o evento ocorrer — então uma <strong>tarefa</strong> será enfileirada na fila de\ntarefas que irá iniciar a execução do <i lang=\"en\">callback</i> pelo motor de\nexecução JavaScript.</p>\n<p>A <strong>fila de tarefas</strong>, também chamada de <i lang=\"en\">job queue</i>, é uma\n<a href=\"https://www.ime.usp.br/~pf/algoritmos/aulas/fila.html\">estrutura de fila</a> que\narmazena referência para funções que devem ser executadas. De forma geral, o\nmotor de execução do JavaScript possui um algoritmo bastante simples:</p>\n<ol>\n<li>Aguarde a fila ter tarefas;</li>\n<li>Execute a primeira tarefa da fila até o fim, isto é, até que a pilha de\nexecução esteja vazia.</li>\n<li>Retorne ao passo 1.</li>\n</ol>\n<p>Na verdade, a função <code>setTimeout</code> que vimos anteriormente não “executa uma\nfunção após uma quantidade de tempo”, mas, adiciona no <i lang=\"en\">event\nloop</i> a função como um <i lang=\"en\">callback</i> para um sinal de um\ntemporizador que será disparado após a quantidade de tempo do segunto parâmetro.\nExistem outras formas de adicionar tarefas a fila, entre elas:</p>\n<ul>\n<li>Adicionar <i lang=\"en\">listeners</i> de eventos com\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\"><code>addEventListener</code></a>;</li>\n<li>Utilizando\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval\"><code>setInterval</code></a>\nou\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\"><code>postMessage</code></a>;</li>\n<li>Respostas de requisições HTTP utilizando as APIs\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\"><code>XMLHttpRequest</code></a>\nou <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\"><code>fetch</code></a> dos\nnavegadores.</li>\n</ul>\n<p>O <i lang=\"en\">event loop</i> é um modelo de concorrência não preemptivo. Não é\npossível interromper a execução da função corrente e retornar posteriormente.\nSomente uma função é executada por vez. Uma vez que a computação de uma função é\niniciada, ela não é mais interrompida. Assim, não há paralelismo de execução das\nfunções no <i lang=\"en\">event loop</i>.</p>\n<aside> <p> <a href=\"https://pt.wikipedia.org/wiki/Preemptividade\">Preemptividade</a> é a\ncapacidade de um sistema de interromper temporariamente uma tarefa em execução\nsem exigir cooperação, com a intenção de retomar a tarefa posteriormente. </p>\n</aside>\n<p>É por isso que, mesmo quando colocado no <code>setTimeout</code> com tempo de espera zero,\no <i lang=\"en\">callback</i> não é executado imediatamente. Ainda é necessário\nterminar a execução da função atual e, somente então, o <i lang=\"en\">callback</i> é executado. Isso explica o comportamendo da saída do\ncódigo do exemplo anterior. Na realidade, o <code>setTimeout</code> não garante que a\nfunção vai ser executada após o período, mas sim que sua tarefa será\nenfileirada.</p>\n<p>Outro efeito colateral desse modelo de concorrência é que, se alguma tarefa\ndemanda muita computação, ela inevitavelmente vai bloquear a fila de tarefas por\nmuito tempo e, assim, nenhuma outra tarefa poderá ser iniciada. Se a fila de\ntarefas está bloqueada, os <i lang=\"en\">callbacks</i> dos eventos das ações do\nusuário podem não ser respondidos em tempo adequado e a GUI apresenta estar\n“travada”, por exemplo.</p>\n<h2 id=\"indo-alem\" tabindex=\"-1\">Indo além <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-3\">#</a></h2>\n<p>Agora que você já entende o modelo de concorrência, alguns questionamentos podem\nestar perambulando pela sua cabeça:</p>\n<blockquote> <p> Mas, quando fazemos uma requisição HTTP utilizando a API fetch,\no usuário ainda é capaz de interagir com a tela mesmo que a requisição demore\nvários segundos para ser concluída… Como isso acontece se o <i lang=\"en\">event\nloop</i> está bloqueado? </p> </blockquote>\n<p>Diferentes máquinas virtuais JavaScript implementam algumas funcionalidades em\nfluxos de execução paralelos ao <i lang=\"en\">event loop</i> para não bloquear a\nfila de tarefas por muito tempo. Normalmente tais funcionalidades estão\nrelacionadas a operações de entrada e saída que, comumente, são operações\n“lentas”. Alguns exemplos de operações de entrada e saída que normalmente são\nexecutadas paralelamente ao <i lang=\"en\">event loop</i> incluem: leitura e\nescrita de arquivos, requisições de rede, <i lang=\"en\">stream</i> de multimídia,\nacesso ao banco de dados, entre outros.</p>\n<p>Essa publicação apresentou uma versão bastante simplificada de como o <i lang=\"en\">event loop</i> do JavaScript funciona. Ainda há vários pontos que\nforam deixados de lado para o bem da sanidade da explicação. No entanto,\nacredito que você tenha conseguido entender o funcionamento das máquinas\nvirtuais JavaScript e compreendido o modelo de concorrência da linguagem e as\nconsequências que surgem a partir do seu uso. Caso você tenha interesse em uma\nvisão mais completa, recomendo ler mais sobre:</p>\n<ul>\n<li>A fila de microtarefas e as <i lang=\"en\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">promises</a></i>;</li>\n<li>A instanciação de <i lang=\"en\">event loops</i> paralelos com\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\"><i lang=\"en\">Workers</i></a>;</li>\n<li>As\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\">etapas de apresentação</a>\nnos navegadores.</li>\n</ul>\n",
			"date_published": "2016-01-16T17:47:20Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/javascript-intermediario-2",
			"url": "https://maxroecker.github.io/blog/javascript-intermediario-2",
			"title": "JavaScript Intermediário #2",
			"content_html": "<p>A série <strong>JavaScript Intermediário</strong> busca passar, de maneira sólida e gradual,\ncaracterísticas fundamentais da linguagem. Neste capítulo, vamos voltar nossa\natenção para um importante, esquecido e quase mitológico aspecto da linguagem:\nas <i lang=\"en\">closures</i>, também conhecidas como fechos léxicos ou\nclausuras.</p>\n<p>Mesmo que você programe há muito tempo em JavaScript e nunca tenha ouvido nunca\nfalar em <i lang=\"en\">closures</i>, aqui vai uma revelação: <strong>elas estão em todo\nlugar</strong>. <i lang=\"en\">Closure</i> não é um tipo de opção especial da linguagem\nnem uma declaração especial ou um padrão de desenvolvimento. Para falar a\nverdade, <i lang=\"en\">closures</i> não existem apenas no JavaScript. <i lang=\"en\">Closure</i> é conceito bem mais amplo, com base na teoria de\nimplementação de linguanges de programação. Justamente por isso, é necessário\nentendê-las para que se possa compreender todas as consequências da sua\nutilização.</p>\n<p>Contudo, antes de entender o que são <i lang=\"en\">closures</i>, precisamos dar\num passo atrás e entender como as linguagens de programação são executadas e\nutilizam a memória do computador.</p>\n<h2 id=\"a-pilha-de-execucao\" tabindex=\"-1\">A pilha de execução <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-2\">#</a></h2>\n<p>A grande maioria das linguagens de programação utiliza uma estrutura para\nregistrar todas as subrotinas ativas de um programa.\n<a href=\"https://en.wikipedia.org/wiki/Stack-based_memory_allocation\">Essa estrutura normalmente é implementada como uma pilha</a>.\nEssa pilha tem várias responsabilidades que incluem: armazenar o ponto de\nexecução atual, armazenar o endereço para qual a subrotina ativa deve retornar\num valor quando terminar a execução, armazenar as variáveis locais, entre\noutras. De forma geral, podemos resumir o funcionamento da pilha de execução\ncomo:</p>\n<ul>\n<li>Toda subrotina chamada empilha um novo quadro de contexto;</li>\n<li>Quadros permanecem na pilha até o fim da execução da subrotina;</li>\n<li>Quando a subrotina termina, o quadro é desempilhado, liberando memória para a\npróxima subrotina;</li>\n<li>Quando a pilha estiver vazia, é considerado que o programa chegou ao fim da execução.</li>\n</ul>\n<aside> <p> Um estouro de pilha (<i lang=\"en\">stack overflow</i>) ocorre quando\num programa empilha mais quadros do que a quantidade de memória disponível\npermite. </p> </aside>\n<p>Em JavaScript, consideramos as funções como subrotinas. Veja o código abaixo que\ncontém três declarações de funções e a chamada de uma delas:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">div</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">/</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">div</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">avg</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 4.5</span></code></pre>\n<p>A execução do código acima fará com que a pilha de execução tenha, de forma\nsimplificada, os estados dado pela figura abaixo.</p>\n<figure>\n  <img alt=\"Sequência do empilhamento dos quadros da execução do código acima.\" title=\"undefined\" loading=\"lazy\" decoding=\"async\" src=\"https://maxroecker.github.io/img/_aNqEWT3K6-1100.svg\" width=\"1100\" height=\"850\">\n</figure>\n<ol>\n<li>Temos a chamada da função <code>avg</code> que empilha seu respectivo quadro contendo os\nparâmetros <code>x = 4</code> e <code>y = 5</code>;</li>\n<li>A partir de um ponto, a função <code>avg</code> chama a função <code>add</code>, que por sua vez\nempilha seu quadro de contexto contendo também os parâmetros <code>x = 4</code> e\n<code>y = 5</code>;</li>\n<li>Ao terminar de executar, <code>add</code> retorna o valor <code>9</code> para a variável <code>sum</code> no\nquadro de contexto da função <code>avg</code>;</li>\n<li>A função <code>avg</code> então chama <code>div</code>, que por sua vez empilha o seu respectivo\nquadro de contexto, contendo os parâmetros <code>x = 9</code> e <code>y = 2</code>;</li>\n<li>A função <code>div</code> termina sua execução e retorna um valor para uma variável\nanônima, aqui representada como um <code>~</code>;</li>\n<li>A função <code>avg</code> termina sua execução e retorna o resultado para o escopo\nglobal, aqui também representada como um <code>~</code>, e que é impressa no console.</li>\n</ol>\n<p>Agora, vamos ver um outro exemplo um pouco mais complexo. Considere o código\nabaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> double <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 4</span></code></pre>\n<p>A execução desse código terá, de forma simplificada, os seguintes estados da\npilha:</p>\n<figure>\n  <img alt=\"Sequência do empilhamento dos quadros da execução do código acima.\" title=\"undefined\" loading=\"lazy\" decoding=\"async\" src=\"https://maxroecker.github.io/img/QoGdNrLOWd-1100.svg\" width=\"1100\" height=\"700\">\n</figure>\n<ol>\n<li>Temos a chamada da função <code>mul</code> que empilha seu respectivo quadro contendo o\nparâmetro <code>x = 2</code>;</li>\n<li>Ao terminar de executar, <code>mul</code> retorna uma referência para uma função anônima\n— aqui representada como um <code>#</code> — para a variável <code>double</code> no quadro de\ncontexto global;</li>\n<li>O contexto global chama então <code>double</code>, que por sua vez empilha o seu quadro\nde contexto, contendo o parâmetro <code>y = 2</code>;</li>\n<li>Mas espere aí… para concluir sua execução a função apontada por <code>double</code>\nprecisa do parâmetro <code>x</code>, que pertencia ao quadro da função <code>mul</code>. No\nentanto, o quadro de contexto de <code>mul</code> já foi desempilhado porque sua\nexecução foi finalizada. Onde foi parar <code>x</code>?</li>\n</ol>\n<p>Bem, senhoras e senhores, aqui lhes apresento a <i lang=\"en\">closure</i>. Muito\nprazer!</p>\n<h2 id=\"closures\" tabindex=\"-1\"><i lang=\"en\">Closures</i> <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-2\">#</a></h2>\n<p><i lang=\"en\">Closures</i> nada mais são que funções que armazenam o contexto\nléxico interno para que possam ser utilizadas mesmo quando o quadro de contexto\njá não existe mais.</p>\n<p>Uma <i lang=\"en\">closure</i> acontece quando uma função é declarada dentro do\nescopo de outra e, além disso, a função interior referencia variáveis locais da\nfunção exterior. Quando a função exterior é executada, uma closure é criada\ncontendo uma referência da função interior e referências para quaisquer\nvariáveis no contexto da função exterior que a função interior necessita.</p>\n<aside> <p> <i lang=\"en\">Closures</i> são funções são capazes de “lembrar” de\nvariáveis pertencente ao escopo léxico de onde foram declaradas mesmo quando\nexecutadas fora dele. </p> </aside>\n<p>Dessa forma, vamos redesenhar o nosso esquema simplificado do estado da pilha de\nexecução contemplando também o <i lang=\"en\">heap</i>:</p>\n<figure>\n  <img alt=\"Sequência do empilhamento dos quadros da execução do código acima.\" title=\"undefined\" loading=\"lazy\" decoding=\"async\" src=\"https://maxroecker.github.io/img/9VSmed7ztd-1100.svg\" width=\"1100\" height=\"850\">\n</figure>\n<ol>\n<li>Temos a chamada da função <code>mul</code> que empilha seu respectivo quadro contendo o\nparâmetro <code>x = 2</code>;</li>\n<li>Ao terminar de executar, <code>mul</code> retorna uma referência de uma <i lang=\"en\">closure</i> anônima — aqui representada como um <code>#</code> — para a\nvariável <code>double</code> no quadro de contexto global;</li>\n<li>O contexto global chama então <code>double</code>, que por sua vez empilha o seu quadro\nde contexto, contendo o parâmetro <code>y = 2</code>;</li>\n<li>Ao executar, a <i lang=\"en\">closure</i> apontada por <code>double</code> pega o valor do\nparâmetro <code>x = 2</code> do contexto salvo e multiplica pelo parâmetro <code>y = 2</code>. O\nvalor da multiplicação é retornado e exibido pelo console.</li>\n</ol>\n<figure>\n  <img src=\"https://maxroecker.github.io/img/illustrations/lock.svg\" alt=\"Um símbolo enclausurado.\" decoding=\"async\" loading=\"lazy\">\n</figure>\n<h2 id=\"teoria-e-propriedades-das-closures\" tabindex=\"-1\">Teoria e propriedades das <i lang=\"en\">closures</i> <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-2\">#</a></h2>\n<p>Uma linguagem de programação não consegue implementar <i lang=\"en\">closures</i>\nse o seu modelo de memória apenas utiliza apenas a pilha para gerenciar a\nmemória. Em tais linguagens, as variáveis locais são automaticamente desalocadas\nquando a função termina sua execução. Entretanto, uma <i lang=\"en\">closure</i>\nrequer que as variáveis capturadas sobrevivam além da execução da função\noriginal. Por isso, essas variáveis precisam ser alocadas até que não sejam mais\nnecessárias, normalmente utilizando a\n<a href=\"https://en.wikipedia.org/wiki/Memory_management#Dynamic_memory_allocation\">memória dinâmica</a>\n— comumente chamada de <i lang=\"en\">heap</i> — ao invés da pilha. O tempo de\nvida dessas variáveis é controlado para que permançam acessíveis enquanto houver\nalguma <i lang=\"en\">closure</i> que a referencie.</p>\n<p>Isso explica por a grande maioria das linguagens de programação que suportam <i lang=\"en\">closures</i> normalmente acompanham um\n<a href=\"https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)\">coletor de lixo</a>.\nAlternativas ao uso de coletor de lixo para o gerenciamento de memória seria o\ncontrole manual ou continuar usando um espaço especial da pilha para armazenar a\n<i lang=\"en\">closure</i>, mas, ambas as estratégias podem ter um\n<a href=\"https://en.wikipedia.org/wiki/Undefined_behavior\">comportamento indefinido</a> uma\nvez podem acontecer\n“<a href=\"https://pt.wikipedia.org/wiki/Apontador_pendente\">referências selvagens</a>”.</p>\n<aside> <p> O <a href=\"https://en.wikipedia.org/wiki/Funarg_problem\">Problema\nFunarg</a> descreve essa dificuldade de implementar funções de alta ordem e <i lang=\"en\">closures</i> em linguagens de progração com memória baseada em pilha,\ntais como C e C++. </p> </aside>\n<p>É importante lembrar que o contexto salvo por uma <i lang=\"en\">closure</i> é\nimune a interferência externa além da própria <i lang=\"en\">closure</i>. Isso\ngarante uma área de memória oculta para a função e pode ser útil para\nrepresentar um estado interno privado. Além disso, em JavaScript, por <i lang=\"en\">closures</i> serem funções e funções serem objetos, <i lang=\"en\">closures</i> são identificadas apenas pela sua referência, mesmo que\nambas apontem para a mesma função. Vide o exemplo anterior, temos:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> double <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> triple <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 12</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">triple</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 12</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>double <span class=\"token operator\">==</span> triple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → false</span></code></pre>\n<h2 id=\"conclusao\" tabindex=\"-1\">Conclusão <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-2\">#</a></h2>\n<p>Para que você utilize o potencial da linguagem JavaScript ao máximo, é\nfundamental compreender as <i lang=\"en\">closures</i>. É com elas que você\nconsegue criar encapsulamento dos dados ou programar orientado a eventos de\nforma simples e declarativa. <i lang=\"en\">Closure</i> é um daqueles conceitos\ncuriosos que são paradoxalmente difíceis de compreender porque são ubíquos\ndemais e estão por toda parte. Mas, uma vez que o programador se torne apto a\nutilizá-lo a seu favor, soluções simples e concisas podem ser desenvolvidas.</p>\n<blockquote cite=\"https://www.dreamsongs.com/ObjectsHaveNotFailedNarr.html\"> <p>\nUma das conclusões que nós chegamos foi que um objeto não precisa ser um\nprimitivo conceito em uma linguagem de programação; um objeto e seu\ncomportamento pode ser construído por meio de um pouco de valores e algumas boas\ne velhas expressões lambdas. </p> <footer> <a href=\"https://www.dreamsongs.com/ObjectsHaveNotFailedNarr.html\">Guy L.\nSteele</a> </footer> </blockquote>\n",
			"date_published": "2016-01-13T18:42:06Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/javascript-intermediario-1",
			"url": "https://maxroecker.github.io/blog/javascript-intermediario-1",
			"title": "JavaScript Intermediário #1",
			"content_html": "<p>Nessa publicação, vamos focar em um dos aspectos que mais geram confusão entre\nos desenvolvedores que estão iniciando o aprendizado em JavaScript: o escopo\nléxico de variáveis. Mas, o que é escopo léxico de uma variável?</p>\n<p>Uma variável definida em um código recebe um identificador único — um nome — que\né utilizado quando queremos referenciar o valor que essa variável aponta. O\ntrecho do código em que uma variável qualquer é identificada por um nome é\ndefinido como o <strong>escopo léxico da variável</strong>. Fora desse bloco, a variável é\nindefinida ou um outro valor é identificado por esse nome.</p>\n<aside> <p> <b>lé·xi·co</b>: (1) Os vocábulos de uma língua; (2) Vocábulos\nusados num domínio especializado. </p> </aside>\n<p>Na maioria das linguagens descendentes do C, o escopo léxico de uma variável é\ndefinido pelo bloco em que ela foi declarada. Lembrando que um bloco é uma\nsequência de declarações entre um par de chaves <code>{…}</code>. No JavaScript, nem sempre\no bloco é quem define o escopo da variável, tudo depende da forma com que a\nvariável foi declarada.</p>\n<p>Antes do ECMAScript 2015, só existia uma forma de declarar variáveis: utilizando\nda palavra chave <code>var</code>. O ECMAScript 2015 trouxe mais duas alternativas, o <code>let</code>\ne o <code>const</code>, que definem um escopo léxico diferente e também ditam a\nmutabilidade da variável declarada.</p>\n<h2 id=\"declaracao-de-variaveis-com-var\" tabindex=\"-1\">Declaração de variáveis com <code>var</code> <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-1\">#</a></h2>\n<p>Declarações de variáveis com <code>var</code> definem um <strong>escopo léxico de função</strong>, ou\nseja, é a função quem define o local que uma variável é identificada por um\nnome. Essa abordagem é bastante peculiar e difere da maioria das linguagens,\nveja o exemplo abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'foobar'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → foobar</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">exemplo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → foo</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → bar</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → bar</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">exemplo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → foobar</span></code></pre>\n<p>Nota-se que, apesar da variável <code>x</code> declarada dentro da função <code>exemplo</code> ser\nredeclarada novamente dentro do laço, as alterações feitas no laço se mantém\nmesmo após a conclusão. Já para a variável <code>x</code> declarada fora da função\n<code>exemplo</code>, o valor não é alterado. Podemos ver que o bloco não definiu o escopo\nda variável <code>x</code>, mas o corpo da função sim.</p>\n<h2 id=\"declaracoes-de-variaveis-let\" tabindex=\"-1\">Declarações de variáveis <code>let</code> <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-1\">#</a></h2>\n<p>A declaração de variável <code>let</code> foi adicionada ao ECMAScript 2015 para permitir a\ndeclaração de variáveis tenham um escopo léxico de bloco, e, assim, ter um\ncomportamento de escopo semelhante ao das linguagens C e Java. Veja o mesmo\nexemplo anterior, porém agora utilizando <code>let</code> na declaração das variáveis:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'foobar'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → foobar</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">exemplo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → foo</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → bar</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → foo</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">exemplo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → foobar</span></code></pre>\n<p>A diferença de resultados se dá principalmente dentro da função, onde agora é o\nbloco que delimita o escopo léxico e não mais a função.</p>\n<h2 id=\"declaracoes-de-variaveis-const\" tabindex=\"-1\">Declarações de variáveis <code>const</code> <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-1\">#</a></h2>\n<p>A declaração de variáveis utilizando <code>const</code>, que também foi padronizada na\nECMAScript 2015, declara uma variável com escopo de bloco, porém, com uma\nreferência fixa. Ou seja, uma variável <code>const</code> não pode ser atribuída novamente\napós a declaração. Veja o exemplo abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Erro!</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Erro!</span></code></pre>\n<p>É importante ter em mente que, apesar de nome poder dar a ideia de que essa\ndeclaração cria um valor constante, o que é constante é a referência da\nvariável. Por isso, caso o valor seja um objeto, você pode mutá-lo sem qualquer\nerro. Veja:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ny<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → {name: 'bar'}</span>\n\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'foobar'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Erro!</span></code></pre>\n<p>Caso você deseje construir um objeto imutável, é necessário utilizar o\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\"><code>Object.freeze</code></a>.</p>\n<figure>\n  <img src=\"https://maxroecker.github.io/img/illustrations/turtle.svg\" alt=\"Uma tartaruga.\" decoding=\"async\" loading=\"lazy\">\n</figure>\n<h2 id=\"conclusao\" tabindex=\"-1\">Conclusão <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-intermediario-1\">#</a></h2>\n<p>Como um bom programador, uma das coisas mais importantes que você pode aprender\né sempre manter a simplicidade. Quando estamos falando sobre código, podemos\nsimplificá-lo quando utilizamos apenas variável para um único conceito.</p>\n<p>Algumas vezes podemos ser tentados &quot;reutilizar&quot; uma variável para representar\ndois conceitos diferentes. Essa prática deve ser evitada, pois leva a um código\nnão efetivo e de difícil leitura. Por isso, sempre recomendo a utilização de\n<code>const</code> e <code>let</code> quanto estiver em um código que permita seu uso, ou seja, que\nutilize o ES6. Caso você tenha uma variável que não precise que seu valor seja\nreatribuído, faça de <code>const</code> a sua escolha padrão. Seu código fica mais limpo e\ndeclarativo. Caso a reatribuíção seja necessária, como é o caso de contadores,\nacumuladores e outros mecanismos de <em>loops</em>, utilize <code>let</code>. Também vai indicar\nque a variável somente é utilizada no bloco onde ela foi declarada, e não na\nfunção inteira.</p>\n<p>Siga o princípio de que uma variável deve representar um único conceito e torne\nseu código mais legível e declarativo.</p>\n<blockquote> <p> Linguagens não servem somente para expressar pensamentos, mas\npara possibilitar pensamentos os quais não existiriam se não fossem elas. </p>\n<footer>Bertrand Russel</footer> </blockquote>\n",
			"date_published": "2015-12-15T17:37:54Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/javascript-basico-6",
			"url": "https://maxroecker.github.io/blog/javascript-basico-6",
			"title": "JavaScript Básico #6",
			"content_html": "<p>Já vimos o funcionamento de\n<a href=\"https://maxroecker.github.io/blog/javascript-basico-5/\">objetos</a> e de\n<a href=\"https://maxroecker.github.io/blog/javascript-basico-4/\">estruturas de controle</a>\nem JavaScript, ambos conceitos essenciais para a aprendizagem da linguagem e\npara a escrita de algoritmos. Agora, vamos aprofundar nosso entendimento sobre a\nunidade de computação da linguagem JavaScript: as funções.</p>\n<p>Uma função é um trecho de código que pode ser chamado por um fluxo de execução —\nincluindo por si mesma — ou por uma variável que a referencia. Quando uma função\né chamada, argumentos são passados para a função como entrada, e a função pode\nretornar opcionalmente um valor qualquer.</p>\n<aside> <p> <strong>fun.ção:</strong> (1) O que alguma coisa faz ou é usada\npara; (2) Em matemática, uma relação o qual um elemento de um conjunto é\nassociado a exatamente um outro elemento de outro conjunto. (3) Em computação,\numa rotina que pode retornar um resultado. </p> </aside>\n<p>Funções são extremamente úteis e podem ser utilizadas para reutilização de\ncódigo, encapsulamento e composição de dados em diversas linguagens de\nprogramação. No entanto, o modo como funções são tratadas em JavaScript pode ser\nestranha para a maioria dos desenvolvedores. Por isso, é importante ter um bom\nentendimento de como funções trabalham em JavaScript, para que você possa\nextrair o máximo da linguagem.</p>\n<h2 id=\"declarando-e-executando-uma-funcao\" tabindex=\"-1\">Declarando e executando uma função <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-6\">#</a></h2>\n<p>Uma função pode ser declarada com o auxílio da palavra-chave <code>function</code> seguido\nde:</p>\n<ol>\n<li>o nome da função;</li>\n<li>a lista de parâmetros da função entre parênteses e separado por vírgulas e;</li>\n<li>As declarações que definem essa função entre um par de chaves <code>{…}</code>.</li>\n</ol>\n<p>Por exemplo, o código abaixo define uma função chamada <code>quadrado</code>.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">quadrado</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> numero <span class=\"token operator\">*</span> numero<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>A função <code>quadrado</code> tem um único parâmetro — chamado <code>numero</code> — e é definida por\numa única declaração, que consiste em retornar o valor do parâmetro multiplicado\npor ele mesmo. Entretanto, definir uma função não significa executar o código\ndeclarado. Definir uma função significa dar um nome a um trecho de código que\nserá chamado quando for requisitado.</p>\n<p><strong>Chamar uma função</strong> significa realmente executar o trecho de código. Para\nchamar uma função em JavaScript, você utiliza o nome da função seguido dos\nargumentos de entrada entre um par de parênteses. No exemplo anterior, podemos\nchamar a função <code>quadrado</code> como segue:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token function\">quadrado</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nesta chamada, o parâmetro <code>numero</code> da função <code>quadrado</code> assume o valor <code>3</code>. A\nfunção é executada e o resultado, <code>9</code>, é retornado da função. Para visualizar\nesse resultado, vamos atribuí-lo em uma variável e mostrar no console.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> resultado <span class=\"token operator\">=</span> <span class=\"token function\">quadrado</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resultado<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 9</span></code></pre>\n<p>Valores primitivos, como é o caso de valores do tipo número, são passados para\nfunções &quot;por valor&quot;. Ou seja, uma cópia co valor é passada para a função quando\nela é chamada. O valor original do argumento não é alterado. Veja o exemplo\nabaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">somaUm</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">++</span>numero<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'numero dentro da função '</span><span class=\"token punctuation\">,</span> numero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> numero <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'numero antes da função '</span><span class=\"token punctuation\">,</span> numero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">somaUm</span><span class=\"token punctuation\">(</span>numero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'numero depois da função '</span><span class=\"token punctuation\">,</span> numero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>A saída desse código será:</p>\n<pre><samp>numero antes da função 0\nnumero dentro da função 1\nnumero depois da função 0\n</samp></pre>\n<p>No entanto, objetos são passados como &quot;por referência&quot;. Ou seja, o mesmo objeto\né passado para dentro da função e não uma cópia dele. Dessa forma, mutar o\nobjeto dentro da função tem efeitos colaterais em valores fora da função. Veja:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">ativar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cupom</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cupom<span class=\"token punctuation\">.</span>ativo <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> cupom <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">codigo</span><span class=\"token operator\">:</span> <span class=\"token string\">'000X'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ativo</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cupom %s - ativo: %s'</span><span class=\"token punctuation\">,</span> cupom<span class=\"token punctuation\">.</span>codigo<span class=\"token punctuation\">,</span> cupom<span class=\"token punctuation\">.</span>ativo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ativar</span><span class=\"token punctuation\">(</span>cupom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cupom %s - ativo: %s'</span><span class=\"token punctuation\">,</span> cupom<span class=\"token punctuation\">.</span>codigo<span class=\"token punctuation\">,</span> cupom<span class=\"token punctuation\">.</span>ativo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>A saída desse código será:</p>\n<pre><samp>cupom 000X - ativo: false\ncupom 000X - ativo: true</samp></pre>\n<p>Devido as características do JavaScript — mais especificamente o <i lang=\"en\">hoisting</i> — uma função não pode ser declarada condicionalmente.\nQuando temos duas funções com o mesmo nome, há conflito de referência e isso\ncausa um erro. Ou seja, <strong>não é possível escrever um código como o abaixo</strong>:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nota <span class=\"token operator\">&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">resultado</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Reprovado'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">resultado</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Aprovado'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'O resultado é: '</span> <span class=\"token operator\">+</span> <span class=\"token function\">resultado</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"aridade-de-funcoes-e-passagem-de-argumentos\" tabindex=\"-1\">Aridade de funções e passagem de argumentos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-6\">#</a></h3>\n<p>Diferente de muitas linguagens, o JavaScript não restringe a quantidade de\nargumentos que a chamada da função pode receber dada a aridade da função.\nSupondo o mesmo exemplo da função <code>quadrado</code> acima, as chamadas abaixo são\ncompletamente válidas em JavaScript:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">quadrado</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> numero <span class=\"token operator\">*</span> numero<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">quadrado</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 4</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">quadrado</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 25</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">quadrado</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → NaN</span></code></pre>\n<p>A função <code>quadrado</code> oficialmente aceita um argumento. Quando executamos a função\npassando mais argumentos que a aridade da função, a função os ignora; Se\npassamos menos argumentos que aridade da função, o JavaScript atribui\n<code>undefined</code> para os argumentos faltantes.</p>\n<aside> <p> A <a href=\"https://pt.wikipedia.org/wiki/Aridade\"><strong>aridade</strong></a> de uma\nfunção é o número de parâmetros que a função recebe. Uma função de um parâmetro\né denominada unária; de dois parâmetros, binária; com três parâmetros, ternária;\ne assim por diante. Caso uma função não receba parâmetros, a função é denominada\nnulária. </p> </aside>\n<h2 id=\"funcoes-como-valores-de-primeira-classe\" tabindex=\"-1\">Funções como valores de primeira-classe <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-6\">#</a></h2>\n<p>Funções, em JavaScript, são\n<a href=\"ttp://c2.com/cgi/wiki/?FirstClass\">valores de primeira classe</a> e, por isso, são\ntratadas como qualquer outro valor na linguagem. Assim, funções podem ser\npassadas como parâmetros ou retornadas como resultado de uma função. Funções\npodem também serem atribuídas em variáveis.</p>\n<p>Além disso, toda função em JavaScript é também um objeto e tem propriedades e\nmétodos associados. Apesar do <code>typeof</code> de uma função ser <code>&quot;function&quot;</code>, uma\nfunção é sempre instância de um objeto. Veja abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">quadrado</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> numero <span class=\"token operator\">*</span> numero<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">informacoes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">funcao</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> funcao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>funcao <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>funcao <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>funcao<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> funcao <span class=\"token operator\">=</span> quadrado<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">informacoes</span><span class=\"token punctuation\">(</span>funcao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>O código acima terá a saída</p>\n<pre><samp>function\ntrue\ntrue\nquadrado</samp></pre>\n<h2 id=\"expressoes-funcionais\" tabindex=\"-1\">Expressões funcionais <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-6\">#</a></h2>\n<p>Em JavaScript, a declaração de uma função pode ser retornada como um valor, ou\nseja, como uma expressão funcional. Podemos atribuir a função <code>quadrado</code> para\numa variável <code>potencia2</code> da seguinte forma:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">potencia2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">quadrado</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> numero <span class=\"token operator\">*</span> numero<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">quadrado</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 4</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">potencia2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 4</span></code></pre>\n<p>O JavaScript também permite que expressões funcionais sejam anônimas, ou seja,\nnão requerem um nome para serem definidas. Mais uma vez, podemos reescrever\nnossa função <code>quadrado</code> como uma expressão funcional:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">quadrado</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> numero <span class=\"token operator\">*</span> numero<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">quadrado</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 36</span></code></pre>\n<p>Apesar de ter um resultado muito semelhante, utilizar uma expressão funcional\nanônima tem um significado diferente de uma declaração de função. Um resultado\ninteressante é que expressões funcionais podem ser &quot;atribuídas condicionamente&quot;,\ndiferente das funções declaradas. Ou seja, agora, o código abaixo é válido em\nJavaScript:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> resultado<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nota <span class=\"token operator\">&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">resultado</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Reprovado'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">resultado</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Aprovado'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'O resultado é: '</span> <span class=\"token operator\">+</span> <span class=\"token function\">resultado</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Funções anônimas são frequentemente utilizadas em JavaScript e permitem escrever\num código coeso e expressivo. Em algumas referências, funções anônimas são\nchamadas apenas de <em>lambdas</em>.</p>\n<h2 id=\"funcoes-de-alta-ordem\" tabindex=\"-1\">Funções de alta ordem <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-6\">#</a></h2>\n<p>Por serem valores de primeira classe, as funções em JavaScript são\n<a href=\"http://c2.com/cgi/wiki?HigherOrderFunction\">funções de alta ordem</a>. Ou seja,\npodemos então passar funções como argumentos em outra função ou retornar funções\ncomo resultado de uma função. Veja o exemplo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">multipliquePor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> dobro <span class=\"token operator\">=</span> <span class=\"token function\">multipliquePor</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> triplo <span class=\"token operator\">=</span> <span class=\"token function\">multipliquePor</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">dobro</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 12</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">dobro</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 18</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">triplo</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 9</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">triplo</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 12</span></code></pre>\n<p>Note que a função <code>multipliquePor</code> pega um parâmetro <code>n</code> e retorna uma nova\nfunção que pega um parâmetro <code>x</code> e que então, quando for chamada, multiplica <code>x</code>\npor <code>n</code>. Dessa forma, podemos criar duas funções, uma que multiplica por dois,\nque chamamos de <code>dobro</code>; e uma que multiplica por três, que chamamos de\n<code>triplo</code>. Ao final, temos as chamadas da funções <code>dobro</code> e <code>triplo</code> para alguns\ndiferentes argumentos.</p>\n<p>Funções de alta ordem são extremamente úteis e muito utilizadas em JavaScript,\nprincipalmente quando desejamos codificar em um estilo mais próximo do paradigma\nfuncional. Entender funções de alta ordem permite entender um dos conceitos mais\nfundamentais do JavaScript: <i lang=\"en\">closures</i>.</p>\n<h2 id=\"conclusao-e-agradecimentos\" tabindex=\"-1\">Conclusão e agradecimentos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-6\">#</a></h2>\n<p>Nesse episódio aprendemos sobre funções, como declará-las e suas principais\ncaracterísticas. A palavra-chave <code>function</code> pode ser utilizada tanto em uma\ndeclaração de função quanto em uma expressão funcional. É fundamental\ncompreender que funções, em JavaScript, são valores de primeira classe.</p>\n<p>Chegamos ao fim da série JavaScript Básico, mas não no fim do conteúdo da\nlinguagem e de suas funcionalidades. Com o conteúdo visto até aqui, você já pode\ncriar de programas simples e codificar algoritmos em JavaScript. Gostaria de\nagradecer ao meu amigo Guilherme e minha amiga Mariana pela revisão dos textos e\nque permitiram uma melhor leitura desse blog.</p>\n<p>Pretendo lançar outros textos falando sobre aspectos mais profundos mas\nincrivelmente úteis do JavaScript, em termos mais técnicos tais como o processo\nde <i lang=\"en\">hoisting</i>, <i lang=\"en\">closures</i>, operações binárias,\nentre outros. Também quero escrever mais sobre a programação em paradigma\norientado a objetos e funcional.</p>\n",
			"date_published": "2015-10-23T09:21:30Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/javascript-basico-5",
			"url": "https://maxroecker.github.io/blog/javascript-basico-5",
			"title": "JavaScript Básico #5",
			"content_html": "<p>Anteriormente, aprendemos como\n<a href=\"https://maxroecker.github.io/blog/javascript-basico-4/\">controlar a execução do fluxo do código JavaScript através de declarações</a>.\nTambém vimos\n<a href=\"https://maxroecker.github.io/blog/javascript-basico-3/\">como atribuir valores primitivos a variáveis e como manipulá-los no código</a>.\nEntretanto, somente arranhamos a superfície das funcionalidades que a linguagem\noferece. Nessa publicação, vamos entender melhor sobre os objetos.</p>\n<h2 id=\"propriedades\" tabindex=\"-1\">Propriedades <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-5\">#</a></h2>\n<p>Todo valor em JavaScript — exceto o <code>null</code> e o <code>undefined</code> — possui propriedades\nque podem ser acessadas por uma chave por meio do operador <code>.</code>. Propriedades são\nvalores que recebem um nome no objeto. Veja o exemplo abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'javascript'</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">.</span>lenght<span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 10</span>\n\n<span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nnum<span class=\"token punctuation\">.</span>toFixed<span class=\"token punctuation\">;</span> <span class=\"token comment\">// → function toFixed</span></code></pre>\n<p>A propriedade <code>lenght</code> armazena um número que representa a quantidade de\ncaracteres que essa string possui, ou seja, o comprimento da cadeia. Já a\npropriedade <code>toFixed</code> é uma referência de uma função. Em JavaScript, funções são\ntratadas como valores e, por isso, podem ser atribuídas em proprieades. É comum\nchamar funções atribuídas em propriedades como <strong>métodos</strong>.</p>\n<h2 id=\"objetos\" tabindex=\"-1\">Objetos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-5\">#</a></h2>\n<p>Além de valores do tipo primitivo, o JavaScript possui também valores do tipo\n<strong>Objeto</strong>. Objetos são valores que permitem o agrupamento de outros valores\nidentificados por meio de uma chave. Em sua essência, objetos são\n<a href=\"https://en.wikipedia.org/wiki/Associative_array\">arranjos associativos</a> —\ntambém chamados de mapas, tabelas de símbolos ou dicionários — onde cada chave é\numa string única que apontam para outros valores.</p>\n<figure>\n  <img alt=\"Um objeto com propriedades apontando para seus respectivos valores.\" title=\"undefined\" loading=\"lazy\" decoding=\"async\" src=\"https://maxroecker.github.io/img/NYB-5mFFrQ-475.svg\" width=\"475\" height=\"250\">\n  <figcaption>\n    Em JavaScript, um objeto é um conjunto de vários pares de chave-valor. Cada\n    chave é única no objeto e aponta para somente um valor.\n  </figcaption>\n</figure>\n<h3 id=\"declarando-objetos\" tabindex=\"-1\">Declarando objetos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-5\">#</a></h3>\n<p>Em JavaScript, os objetos normalmente são declarados através do literal objeto\n<code>{…}</code>, que contém os pares de chave-valor do objeto são separadas por vírgulas.\nDesde o ECMAScript 2015,\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas#Objects\">a última propriedade do objeto pode também ser sucedida de uma vírgula</a>.\nAs chaves do objeto podem ter qualquer valor, mas seguem as mesmas regras de\nnomes para variáveis.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> passaro <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">nome</span><span class=\"token operator\">:</span> <span class=\"token string\">'Corruíra'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">nomeCientifico</span><span class=\"token operator\">:</span> <span class=\"token string\">'Troglodytes musculus'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"acessando-as-propriedades\" tabindex=\"-1\">Acessando as propriedades <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-5\">#</a></h3>\n<p>Como qualquer outro valor, você pode acessar as propriedades de um objeto com o\noperador <code>.</code>. Veja a continuação do exemplo anterior:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>passaro<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Corruíra</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>passaro<span class=\"token punctuation\">.</span>nomeCientifico<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Troglodytes musculus</span></code></pre>\n<p>Você também pode atribuir valores para as propriedades da mesma forma como feito\ncom variáveis.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">passaro<span class=\"token punctuation\">.</span>nome <span class=\"token operator\">=</span> <span class=\"token string\">'Bem-te-vi'</span><span class=\"token punctuation\">;</span>\npassaro<span class=\"token punctuation\">.</span>nomeCientifico <span class=\"token operator\">=</span> <span class=\"token string\">'Pitangus sulphuratus'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>passaro<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Bem-te-vi</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>passaro<span class=\"token punctuation\">.</span>nomeCientifico<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Pitangus sulphuratus</span></code></pre>\n<p>É possível também utilizar strings como chave de objetos. Utilizar strings como\nchave permite a vantagem de escrever chaves que o nome não segue as regras dos\nidentificadores de variáveis. Ou seja, você pode ter uma chave começando com\nnúmero ou contendo espaço, por exemplo. No entanto, chaves definidas por strings\npossuem sintaxe um pouco diferente, veja abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> passaro <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">'nome'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Trinca-ferro'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'nome cientifico'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Saltator similis'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Há também diferença ao acessar propriedades que a chave que não segue as regras\nde identificadores de variáveis. Nesses casos, é necessário utilizar o operador\nde acesso <code>[…]</code>. Veja os acessos do objeto do código anterior abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>passaro<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Trinca-ferro</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>passaro<span class=\"token punctuation\">[</span><span class=\"token string\">'nome'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Trinca-ferro</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>passaro<span class=\"token punctuation\">[</span><span class=\"token string\">'nome cientifico'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Saltator similis</span>\n\npassaro<span class=\"token punctuation\">.</span>nome <span class=\"token operator\">=</span> <span class=\"token string\">'Tico-tico'</span><span class=\"token punctuation\">;</span>\npassaro<span class=\"token punctuation\">[</span><span class=\"token string\">'nome cientifico'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Zonotrichia capensis'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>passaro<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Tico-tico</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>passaro<span class=\"token punctuation\">[</span><span class=\"token string\">'nome'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Zonotrichia capensis</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>passaro<span class=\"token punctuation\">[</span><span class=\"token string\">'nome cientifico'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Saltator similis</span></code></pre>\n<h3 id=\"adicionando-propriedades\" tabindex=\"-1\">Adicionando propriedades <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-5\">#</a></h3>\n<p>Por serem arranjos associativos, os objetos permite a inserção de propriedades\napós a declaração. Assim, podemos reescrever o exemplo anterior da seguinte\nforma:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> passaro <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Objeto sem propriedades declaradas</span>\npassaro<span class=\"token punctuation\">.</span>nome <span class=\"token operator\">=</span> <span class=\"token string\">'Sabiá-laranjeira'</span><span class=\"token punctuation\">;</span>\npassaro<span class=\"token punctuation\">[</span><span class=\"token string\">'nome cientifico'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Turdus rufiventris'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>passaro<span class=\"token punctuation\">[</span><span class=\"token string\">'nome'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Sabiá-laranjeira</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>passaro<span class=\"token punctuation\">[</span><span class=\"token string\">'nome cientifico'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Turdus rufiventris</span></code></pre>\n<h3 id=\"verificando-a-existencia-de-uma-propriedade\" tabindex=\"-1\">Verificando a existência de uma propriedade <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-5\">#</a></h3>\n<p>Quando acessamos uma propriedade que não existe no objeto, recebemos como\nresultado <code>undefined</code>. Agora, se uma propriedade existe seu valor é <code>undefined</code>,\nacessá-la também resulta em <code>undefined</code>. Verificar se o valor de uma propriedade\né <code>undefined</code> não é garantia que a propriedade não exista no objeto.</p>\n<p>Para verificar se uma propriedade existe em um objeto, utilizamos o operador\n<code>in</code>, que retorna <code>true</code> caso a chave a esquerda exista no objeto ou <code>false</code>\ncaso contrário.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> chave <span class=\"token operator\">=</span> <span class=\"token string\">'cor'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>chave <span class=\"token keyword\">in</span> passaro<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>passaro<span class=\"token punctuation\">[</span>chave<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → undefined</span>\n\npassaro<span class=\"token punctuation\">.</span>cor <span class=\"token operator\">=</span> <span class=\"token string\">'Amarelo'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>chave <span class=\"token keyword\">in</span> passaro<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>passaro<span class=\"token punctuation\">[</span>chave<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Amarelo</span></code></pre>\n<h3 id=\"removendo-propriedades\" tabindex=\"-1\">Removendo propriedades <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-5\">#</a></h3>\n<p>O operador <code>delete</code> remove a propriedade do objeto.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cor'</span> <span class=\"token keyword\">in</span> passaro<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\n\n<span class=\"token keyword\">delete</span> passaro<span class=\"token punctuation\">.</span>cor<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cor'</span> <span class=\"token keyword\">in</span> passaro<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → false</span></code></pre>\n<h3 id=\"iterando-sobre-as-propriedades-com-for-in\" tabindex=\"-1\">Iterando sobre as propriedades com <code>for…in</code> <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-5\">#</a></h3>\n<p>É possível também iterar em todas as chaves de um objeto por meio da declaração\n<code>for…in</code>. A cada iteração, uma das chaves é visitada pelo laço. A declaração\n<code>for…in</code> itera sobre as propriedades enumeráveis de um objeto em uma ordem\narbitrária. Veja:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> passaro <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">'nome'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Patativa'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'nome cientifico'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Sporophila leucoptera'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'id'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'extinct'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> chave <span class=\"token keyword\">in</span> passaro<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Propriedade %s - Tipo: %s'</span><span class=\"token punctuation\">,</span> chave<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> passaro<span class=\"token punctuation\">[</span>chave<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>O resultado do código acima pode ser igual ao resultado escrito abaixo, ou ter\numa ordem diferente.</p>\n<pre>\n<samp>\n  Propriedade extinct - Tipo: boolean\n  Propriedade nome cientifico - Tipo: string\n  Propriedade id - Tipo: number\n  Propriedade nome - Tipo: string\n</samp>\n</pre>\n<h2 id=\"diferencas-entre-valores-primitivos-e-objetos\" tabindex=\"-1\">Diferenças entre valores primitivos e objetos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-5\">#</a></h2>\n<p>No JavaScript, objetos e valores primitivos são categorizados da seguinte forma:</p>\n<ul>\n<li>Valores primitivos são valores do tipo booleano, número, string ou os valores\n<code>null</code> e <code>undefined</code>;</li>\n<li>Qualquer outro valor é um objeto.</li>\n</ul>\n<p>A grande diferença entre os valores primitivos e objetos é o modo como eles são\ncomparados e a mutabilidade de seus conteúdos.</p>\n<h3 id=\"comparacao\" tabindex=\"-1\">Comparação <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-5\">#</a></h3>\n<p>Os valores primitivos são comparados através do seu “conteúdo”, ou seja, se dois\nvalores primitivos tem o mesmo conteúdo, eles são iguais.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> tres <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tres <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xyz'</span> <span class=\"token operator\">==</span> <span class=\"token string\">'xyz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span></code></pre>\n<p>Já objetos são comparados através da sua referência, cada valor tem sua\nidentidade única e é somente igual a si mesmo. Objetos com o mesmo conteúdo não\nsão considerados iguais.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">prop</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">prop</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nobj1 <span class=\"token operator\">==</span> obj2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// → false</span>\nobj1 <span class=\"token operator\">==</span> obj1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\n\nobj1 <span class=\"token operator\">=</span> obj2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Atribuímos a referência de obj2 em obj1</span>\n\nobj1 <span class=\"token operator\">==</span> obj2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span></code></pre>\n<h3 id=\"mutabilidade\" tabindex=\"-1\">Mutabilidade <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-5\">#</a></h3>\n<p>Valores primitivos são considerados <strong>imutáveis</strong>, ou seja, é impossível mudar\numa propriedade ou o seu valor para esses tipos de dados. Toda vez que você os\nmanipula, na verdade você gera novos valores a partir dos antigos, mesmo que\nsejam idênticos.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>lenght<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 6</span>\n\na<span class=\"token punctuation\">.</span>lenght <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>lenght<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 6</span>\n\na <span class=\"token operator\">=</span> <span class=\"token string\">'outra string'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>lenght<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 12</span></code></pre>\n<p>Por outro lado, objetos são <strong>mutáveis</strong>. Alterar, adicionar ou remover uma\npropriedade de um objeto não gera um novo objeto a partir do antigo. O mesmo\nobjeto modificado. Ou seja, quando atribuímos objetos para variáveis ou para\npropriedades de objetos, na verdade estamos indicando somente uma referência\npara o objeto. Se duas referências diferentes direcionam a um mesmo valor,\nalterar o valor reflete em mudanças para todos os objetos que “apontam” para\nele.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> passaro <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">nome</span><span class=\"token operator\">:</span> <span class=\"token string\">'Patativa'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ave <span class=\"token operator\">=</span> passaro<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ave<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Patativa</span>\n\nave<span class=\"token punctuation\">.</span>nome <span class=\"token operator\">=</span> <span class=\"token string\">'Patativa-do-campo'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>passaro<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Patativa-do-campo</span></code></pre>\n<h2 id=\"conclusao\" tabindex=\"-1\">Conclusão <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-5\">#</a></h2>\n<p>Objetos fornecem modos de agrupar vários valores em um só &quot;conjunto&quot;. É uma das\nestruturas de dados mais básicas do JavaScript. Quase todo elemento dentro da\nlinguagem é um objeto.</p>\n<p>Apesar de possuírem o mesmo nome, objetos não devem ser confundidos com o\nconceito de objeto em programação orientada a objetos, definido como\n<a href=\"https://pt.wikipedia.org/wiki/Objeto_(ci%C3%AAncia_da_computa%C3%A7%C3%A3o)\">instância de uma classe</a>.\nComo dito anteriormente, objetos em Javascript são arranjos associativos\ndinâmicos.</p>\n<blockquote> <p> As maioria das pessoas acredita que a ciência da computação é\numa arte para gênios. Na realidade é o oposto. São somente muitas pessoas\ndesenvolvendo coisas umas sobre as outras, como um muro de pequenas pedras. </p>\n<footer> Donald Knuth </footer> </blockquote>\n",
			"date_published": "2015-10-15T17:03:34Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/javascript-basico-4",
			"url": "https://maxroecker.github.io/blog/javascript-basico-4",
			"title": "JavaScript Básico #4",
			"content_html": "<p>No <a href=\"http://maxroecker.github.io/blog/javascript-basico-3/\">artigo anterior</a>\nvimos como criar variáveis e atribuir valores à elas. Também foi mostrado alguns\natalhos de atribuição e formas de modificar os valores das variáveis. Nesse\ntexto vamos aumentar nossa compreensão de códigos em JavaScript e entender as\ndeclarações de controle que a linguagem possui.</p>\n<aside> <p> <strong>de·cla·ra·ção:</strong> (1) Ação ou efeito de declarar; (2)\nAfirmação formal; (3) Asserção explícita; </p> </aside>\n<p>A partir de agora nossos códigos começam a ficar mais extensos, contendo várias\nlinhas. O console JavaScript dos navegadores não é adequado para essas\nsituações. Salvar os códigos em arquivos JavaScript e executá-los no Node.js é\numa boa opção. Para executar, por exemplo, um arquivo chamado <code>example.js</code> no\nNode, você pode acessar o diretório do arquivo no terminal e digitar:</p>\n<pre><kbd>node example.js</kbd></pre>\n<h2 id=\"expressoes-e-declaracoes\" tabindex=\"-1\">Expressões e Declarações <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-4\">#</a></h2>\n<p><strong>Expressões</strong> são declarações de código que produzem um valor. Como visto\nanteriormente, nós utilizamos expressões a todo momento no JavaScript: uma\natribuição é uma expressão, uma comparação é uma expressão, uma operação\naritmética é uma expressão, entre outras.</p>\n<p>Todavia, somente expressões não resolvem os problemas que precisamos lidar\nquando estamos codificando. Por exemplo, muitas vezes queremos que um fragmento\ndo código seja executado dada uma condição; ou ainda, queremos que um trecho de\ncódigo seja executado múltiplas vezes. Para isso nós utilizamos as declarações\nde controle de fluxo.</p>\n<p><strong>Declarações</strong> de controle de fluxo, também chamadas de <i lang=\"en\">statements</i>, são palavras chaves que descrevem o comportamento do\ncódigo. O JavaScript possui um conjunto compacto de declarações que podem ser\ncombinadas para adicionar complexidade o seu código. Expressões também são\ndeclarações, mas possuem a diferença de que sempre retornam um valor.</p>\n<h2 id=\"declaracao-de-bloco\" tabindex=\"-1\">Declaração de bloco <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-4\">#</a></h2>\n<p>Uma das declarações mais básicas da linguagem é a de definição de bloco,\nutilizada para agrupar um conjunto de outras declarações. Todo bloco é\ndelimitado por um par de chaves <code>{…}</code>.</p>\n<pre class=\"language-text\" tabindex=\"0\"><code class=\"language-text\">{\n  [declaração 1]\n  [declaração 2]\n  [declaração 3]\n  […]\n}</code></pre>\n<p><strong>Importante:</strong> Diferente das linguagens C ou Java, no JavaScript, um bloco não\ndefine o escopo das variáveis declaradas com <code>var</code>. O escopo em JavaScript está\nintimamente ligado com a declaração de funções. Vamos aprofundar o assunto de\nescopo de variáveis em artigos futuros, mas veja o exemplo abaixo para entender\nmelhor:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 0</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 1</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 1</span></code></pre>\n<p>A variável <code>a</code> não é oculta pela segunda declaração de uma variável com mesmo\nnome. Ambas as declarações são a mesma variável. Por isso, após a saída do\nbloco, o valor alterado dentro do bloco é mantido.</p>\n<h2 id=\"declaracoes-condicionais\" tabindex=\"-1\">Declarações condicionais <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-4\">#</a></h2>\n<p>Uma declaração condicional é uma declaração de controle de fluxo que executa ou\nnão um trecho de código dependendo de uma condição booleana a ser avaliada.</p>\n<h3 id=\"condicional-unica-if-else\" tabindex=\"-1\">Condicional única <code>if … else</code> <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-4\">#</a></h3>\n<p>A declaração <code>if</code> tem o comportamento de executar a próxima declaração ou bloco\nde declarações, se a condição avaliada seja <code>true</code>. Um <code>if</code> pode ser pareado com\num <code>else</code> e assim executar a declaração que o sucede se o valor da condição for\n<code>false</code>. Você também pode encadear vários <code>if</code>, que serão testados um de cada\nvez. Veja o exemplo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condicao1<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Condição 1 verdadeira'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condicao2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bloco de declarações'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Condição 2 também verdadeira'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Condição 2 falsa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condicao3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Condição 3 verdadeira'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condicao4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Condição 3 é falsa e condição 4 verdadeira'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Condição 3 e 4 são falsas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"falsy-e-truthy\" tabindex=\"-1\"><em>Falsy</em> e <em>Truthy</em> <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-4\">#</a></h4>\n<p>Nas declarações condicionais, a condição sempre avaliada a expressão em <code>true</code>\nou <code>false</code>. No entanto, mesmo que a expressão não seja do tipo booleano, o\nJavaScript, em sua coersão de tipos, trata alguns valores especiais e os avalia\ncomo <code>false</code> quando são utilizados em um contexto booleano. Esses valores são\nchamados de <em>falsy</em>. São eles:</p>\n<ul>\n<li>Valores indefinidos <code>undefined</code> e <code>null</code>;</li>\n<li>Números <code>0</code> e <code>NaN</code>;</li>\n<li>String vazia <code>&quot;&quot;</code> e <code>''</code>.</li>\n</ul>\n<p>Qualquer outro valor da linguagem JavaScript, incluindo objetos, são avaliados\ncomo <code>true</code> e por são chamados de <em>truthy</em>. Por isso é preciso atenção especial\ncom valores primitivos <code>true</code> e <code>false</code> e com instâncias de Boolean. Veja o\nexemplo abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A condição é falsa, pois p é do tipo boolean'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A condição é verdadeira pois c é um objeto.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"condicional-multipla-switch-case\" tabindex=\"-1\">Condicional múltipla <code>switch … case</code> <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-4\">#</a></h3>\n<p>O <code>switch</code> é uma declaração condicional poderosa e complexa que permite que o\ndesenvolvedor escreva uma expressão de condição combine uma expressão com um\nvalor enumerado. Se houver combinação, o <code>switch</code> é ativado e executa as\ndeclarações que seguem. Sua sintaxe pode ser resumida em:</p>\n<pre class=\"language-text\" tabindex=\"0\"><code class=\"language-text\">switch ([expressão]) {\n  case [expressão1]:\n    [declaração]\n  case [expressão2]:\n    [declaração]\n  …\n  default:\n    [declaração]\n}</code></pre>\n<p>O <code>switch</code> possui um mecanismo de <i lang=\"en\">fall-through</i>, ou seja, a\npartir do momento que a expressão combina com um valor, todas as próximas\ndeclarações são executadas também. Veja no exemplo abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> temperatura <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>temperatura<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Temperatura: 0 graus'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">20</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Temperatura: 20 graus'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">30</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Temperatura: 30 graus'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Temperatura: acima de 30 graus'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> clima <span class=\"token operator\">=</span> <span class=\"token string\">'Nublado'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>clima<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'Sol'</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hoje está um dia de sol'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'Nublado'</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hoje o céu está nublado'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'Chuva'</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hoje está chuvoso'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Clima não informado'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Podemos ver a saída desse código abaixo:</p>\n<pre><samp>Temperatura: 20 graus\nTemperatura: 30 graus\nTemperatura: acima de 30 graus\nHoje o céu está nublado\nHoje está chuvoso\nClima não informado</samp></pre>\n<p>O JavaScript, ao se deparar com uma declaração <code>switch</code> primeiramente avalia a\nexpressão de condição e inicia uma cadeia de busca de rótulos que combinem com a\ncondição. Caso houver combinação, as declarações associadas a ele são\nexecutadas. Além disso, o mecanismo de <i lang=\"en\">fall-through</i> também é\nativado. Assim, todas as declarações abaixo do valor combinado também são\nexecutadas, inclusive a declaração <code>default</code>.</p>\n<p>Caso você não queira que o mecanismo de <i lang=\"en\">fall-through</i> tenha\nefeito, você pode utilizar a declaração <code>break</code> que força a saída do fluxo do\n<code>switch</code>. Veja o mesmo código anterior utilizando o <code>break</code> para cada uma das\ncondições:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> temperatura <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>temperatura<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Temperatura: 0 graus'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">20</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Temperatura: 20 graus'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">30</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Temperatura: 30 graus'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Temperatura: acima de 30 graus'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> clima <span class=\"token operator\">=</span> <span class=\"token string\">'Nublado'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>clima<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'Sol'</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hoje está um dia de sol'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'Nublado'</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hoje o céu está nublado'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'Chuva'</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hoje está chuvoso'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Clima não informado'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Que vai ter, como esperado, a saída:</p>\n<pre><samp>Temperatura: 20 graus\nHoje o céu está nublado</samp></pre>\n<p>Por utilidade, o <code>default</code> é sempre colocado ao final do bloco, mas não precisa\nnecessariamente ser assim. O efeito colateral de colocar o <code>default</code> antes do\nfinal é que, por ele ativar o mecanismo de <i lang=\"en\">fall-through</i>,\nqualquer declaração abaixo também será executada, o que é raramente desejado.</p>\n<h2 id=\"declaracoes-de-laco\" tabindex=\"-1\">Declarações de laço <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-4\">#</a></h2>\n<p>Declarações de laço são utilizadas para executar código repetido. Há três\nprincipais declarações de laço em JavaScript: <code>for</code>, <code>while</code>, e <code>do … while</code>.\nTambém é possível dar rótulos para esses laços e localizá-los através de um nome\ncom as declarações <code>label</code>, <code>break</code> e <code>continue</code>.</p>\n<h3 id=\"laco-condicional-simples-while\" tabindex=\"-1\">Laço condicional simples <code>while</code> <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-4\">#</a></h3>\n<p>A declaração <code>while</code>, a mais simples das declarações de laço, executa a próxima\ndeclaração enquanto o valor da expressão avaliada for <code>true</code>. Se a expressão for\n<code>false</code>, o laço para de ser executado e o fluxo segue para a próxima declaração\napós o laço. A expressão de condição é sempre testada antes das declarações\nserem executadas. Para fazer laços infinitos, ou seja, laços que nunca param,\nbasta colocar a condição como <code>true</code>.</p>\n<p>Vamos calcular <math display=\"inline\"><mrow><msup><mn>2</mn><mn>10</mn></msup></mrow></math> utilizando o <code>while</code>, veja o código abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> resultado <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> expoente <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>expoente <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  resultado <span class=\"token operator\">=</span> resultado <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  expoente<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resultado<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 1024</span></code></pre>\n<h3 id=\"laco-condicional-simples-do-while\" tabindex=\"-1\">Laço condicional simples <code>do…while</code> <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-4\">#</a></h3>\n<p>A declaração <code>do…while</code> tem um comportamento parecido com o <code>while</code>: executa uma\nenquanto uma condição booleana é <code>true</code>. A diferença entre o <code>while</code> e o\n<code>do…while</code> é a ordem de avaliação da expre ssão da condição em relação a\ndeclaração. Enquanto no <code>while</code>, se a expressão for <code>false</code>, a declaração não\nchega nem a ser executada, para o <code>do…while</code>, a declaração é sempre executada ao\nmenos uma vez, indepentende da expressão ser <code>true</code> ou <code>false</code>. Laços infinitos\ntambém podem ser feitos bastando colocar a condição como <code>true</code>.</p>\n<p>Usando o mesmo exemplo anterior, vamos calcular <math display=\"inline\"><mrow><msup><mn>2</mn><mn>10</mn></msup></mrow></math> utilizando o\n<code>do … while</code>, veja o código abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> resultado <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> expoente <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n  resultado <span class=\"token operator\">=</span> resultado <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  expoente <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>expoente <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resultado<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 1024</span></code></pre>\n<h3 id=\"lacos-completos-com-for\" tabindex=\"-1\">Laços completos com <code>for</code> <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-4\">#</a></h3>\n<p>Um laço <code>for</code> também repete a próxima declaração até que a condição dada\navaliada como <code>false</code>. Porém, junto com a condição, ela carrega outras duas\ndeclarações: a <strong>inicialização</strong> e o <strong>passo</strong>. Um <code>for</code>, ao ser executado, faz\nos seguintes passos ordenadamente:</p>\n<ol>\n<li>Executa a inicialização</li>\n<li>Se a condição é <code>true</code>, executa a declaração correspondente; se for <code>false</code>,\nsai do laço sem executar a declaração nem o passo;</li>\n<li>Executa o passo e volta ao item número 2.</li>\n</ol>\n<p>A inicialização é normalmente utilizada para atribuir valores iniciais às\nvariáveis de controle. Já o passo, indica qual o ritmo que o <code>for</code> deve ter.\nLembre-se, como a inicialização e o passo são declarações, podem ser vazias\ntambém para criar laços infinitos.</p>\n<p>Vamos ver o mesmo exemplo de cálculo de <math display=\"inline\"><mrow><msup><mn>2</mn><mn>10</mn></msup></mrow></math> escrito com <code>for</code>:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> resultado <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> expoente <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> expoente <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> expoente <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  resultado <span class=\"token operator\">=</span> resultado <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resultado<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 1024</span></code></pre>\n<p>Veja que a variável <strong>expoente</strong> foi declarada na inicialização do laço, e o seu\npasso é dado de 1 em 1.</p>\n<h3 id=\"declaracoes-de-rotulo-e-quebra-de-fluxo\" tabindex=\"-1\">Declarações de rótulo e quebra de fluxo <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-4\">#</a></h3>\n<p>O JavaScript permite a criação de rótulos que identificam uma declaração.\nQualquer declaração pode ser rotulada, porém esse recurso é mais utilizada em\nlaços aninhados. Dessa forma, você pode interromper a execução de laços\naninhados específicos de forma declarativa.</p>\n<h4 id=\"declaracoes-de-rotulo\" tabindex=\"-1\">Declarações de rótulo <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-4\">#</a></h4>\n<p>Declaração de rotulação que marca uma posição em seu código. O rótulo segue as\nmesmas regras que nomes dados para variáveis. Dada pela sintaxe:</p>\n<pre class=\"language-text\" tabindex=\"0\"><code class=\"language-text\">[rótulo]: [declaração]</code></pre>\n<h4 id=\"quebra-de-fluxo-com-break\" tabindex=\"-1\">Quebra de fluxo com <code>break</code> <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-4\">#</a></h4>\n<p>Como já vimos no exemplo do <code>switch</code>, a declaração <code>break</code> sem um rótulo\ninterrompe a execução da declaração atual. Em caso de laços, a declaração\n<code>break</code> faz que o laço atual pare de ser executado imediatamente e continue a\nexecução a partir da próxima declaração após o laço. Podemos utilizar o <code>break</code>\nacompanhado de um <code>label</code>, assim quando execução é interrompida, ela inicia a\npartir da primeira declaração após o rótulo. Sua sintaxe é simples:</p>\n<pre class=\"language-text\" tabindex=\"0\"><code class=\"language-text\">break\nbreak [rótulo]</code></pre>\n<h4 id=\"quebra-de-fluxo-com-continue\" tabindex=\"-1\">Quebra de fluxo com <code>continue</code> <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-4\">#</a></h4>\n<p>A declaração <code>continue</code> também quebra o fluxo de execução, mas só pode ser\nutilizado em laços. Enquanto o <code>break</code> para a execução do laço, o <code>continue</code>\nquebra a atual iteração do laço e inicia uma nova. Ou seja, faz com que a\ncondição seja testada novamente e, no caso do <code>for</code>, o passo seja executado\ntambém. Quando acompanhado de um rótulo, o <code>continue</code> tem o mesmo comportamento,\nmas para o laço rotulado. A sintaxe é</p>\n<pre class=\"language-text\" tabindex=\"0\"><code class=\"language-text\">continue\ncontinue [rótulo]</code></pre>\n<p>O exemplo abaixo é um modo ruim e pouco eficiente de exibir os naturais menores\nque 100 — mas auxilia a compreensão do <code>continue</code> e <code>break</code> junto a um rótulo\nmostrados.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token literal-property property\">lacoExterno</span><span class=\"token operator\">:</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span> lacoExterno<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">continue</span> lacoExterno<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"conclusao\" tabindex=\"-1\">Conclusão <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-4\">#</a></h2>\n<p>Declarações são os blocos de construção da linguagem. Utilizar declarações em\nsequência dá ao seu código novas maneiras de ser executado, permitindo\ninterferir no fluxo com que as instruções são executadas de acordo com as\ncondições que você desejar. Já os valores, que também são declarações, sempre\nresultam um valor e podem ser utilizados em variáveis e também em outras\ndeclarações.</p>\n",
			"date_published": "2015-09-15T16:25:51Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/introducao-ao-nodejs",
			"url": "https://maxroecker.github.io/blog/introducao-ao-nodejs",
			"title": "Introdução ao Node.js",
			"content_html": "<p>O <a href=\"https://nodejs.org/\">Node.js</a>, popularmente conhecido apenas como Node, é um\nambiente de execução JavaScript que não acompanha um navegador. O Node utiliza o\n<a href=\"https://developers.google.com/v8/\">V8</a> como motor de execução, o mesmo\nutilizado pelo navegador Google Chrome. O Node também possui um sistema\ngerenciador de pacotes, o <a href=\"https://www.npmjs.com/\">NPM</a>, que contém alguns\nmilhares de módulos open-source para disponíveis em repositório.</p>\n<p>Utilizando os mesmos princípios do JavaScript, o Node utiliza um modelo de\nconcorrência baseado em\n<strong><a href=\"https://pt.wikipedia.org/wiki/La%C3%A7o_de_eventos\">laço de eventos</a></strong> que\nroda em uma <em>thread</em> única. No entanto, grande parte das operações que podem\nbloquear o laço por muito tempo são implementadas de forma assíncrona, evitando\nque código JavaScript bloqueie o laço por muito tempo.</p>\n<p>Convencionalmente, as implementações de servidores em linguagens como Java e PHP\nutilizam a estratégia de criar uma <em>thread</em> para cada conexão. A criação de uma\n<em>thread</em> acompanha uma alocação de memória que chega a até alguns megabytes.\nIsso pode se tornar custoso a medida que o número de conexões paralelas aumenta.</p>\n<p>Pragmaticamente, quando o Node.js precisa executar uma operação entrada e saída\n— leituras de arquivos, rede, banco de dados, entre outras — ao invés de\nbloquear o fluxo até que o resultado esteja disponível, ele escala o fluxo em\numa fila de tarefas que volta a ser executado quando o resultado estiver\ndisponível.</p>\n<p>Esse modelo de concorrência assíncrono permite que apenas uma <em>thread</em> seja\ncapaz de manipular vários fluxos de execução diferentes sem a necessidade de\ngerenciar <em>threads</em> paralelas, uma tarefa árdua e propícia a bugs.</p>\n<p>No entanto, essa característica assíncrona do código pode parecer estranha para\ndesenvolvedores que estão acostumados com ambientes servidores que fazem\noperações síncronas. Ainda assim, a filosofia de execução assíncrona para todas\nas coisas é a chave para o sucesso do Node. Enquanto os ambientes servidores\nconvencionais forçam as conexões a se manterem em linha enquanto arquivos são\ncarregados no servidor ou requisições de rede são executadas, o Node despacha\ncada conexão recebida e continua a aceitar as próximas enquanto os eventos\nassíncronos fazem o trabalho &quot;por trás&quot;.</p>\n<p>O Node não é o único a adotar essa estratégia. Outras plataformas que\ncompartilham de um modelo de concorrência similar, como é o caso do\n<a href=\"https://twistedmatrix.com/trac/\">Twisted Python</a> e do\n<a href=\"http://www.tornadoweb.org/en/stable/\">Tornado</a> para a linguagem Python, além da\nespecificação\n<a href=\"http://www.javabeat.net/asynchronous-servlet-servlet-3-0/\">Servlets 3.0</a> para a\nlinguagem Java.</p>\n<h2 id=\"instalando-o-node-js\" tabindex=\"-1\">Instalando o Node.js <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/introducao-ao-nodejs\">#</a></h2>\n<p>Vamos instalar o Node através do <a href=\"https://github.com/creationix/nvm\">NVM</a>. No\nterminal, digite:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh <span class=\"token operator\">|</span></code></pre>\n<p>Rodando o comando acima irá fazer o download do <em>script</em> que instala o NVM e\nexecutá-lo. Esse <em>script</em> clona o repositório do NVM em uma pasta temporária\n<code>~/.nvm</code> e coloca as variáveis de ambiente em algum arquivo de perfil do\nterminal (<code>~/._profile</code>, <code>~/.zshrc</code>, <code>~/.profile</code>, ou <code>~/.rc</code>).</p>\n<p>Você pode verificar se o NVM foi instalado com sucesso utilizando o commando abaixo:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token parameter variable\">-v</span> nvm</code></pre>\n<p>Se tudo deu certo, a saída deve ser &quot;<samp>nvm</samp>&quot;.</p>\n<p>Vamos agora instalar o Node. Para rodar a última versão estável, execute o\ncommando a seguir:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">nvm <span class=\"token function\">install</span> stable</code></pre>\n<p>Após isso, ative o Node instalado utilizando.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">nvm use stable</code></pre>\n<p>Você pode aprender mais sobre o NVM na\n<a href=\"https://github.com/nvm-sh/nvm\">página do GitHub do projeto</a>. Para verificar a\ninstalação do Node, digite o comando abaixo.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">node</span> <span class=\"token parameter variable\">-v</span></code></pre>\n<h2 id=\"um-pequeno-exemplo\" tabindex=\"-1\">Um pequeno exemplo <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/introducao-ao-nodejs\">#</a></h2>\n<p>Para exemplificar a facilidade em criar servidores HTTP com o Node, vamos fazer\num em alguns minutos? Vamos criar um web server que responde &quot;Hello World&quot; em\nformato texto simples para qualquer requisição. Exemplo tirado da\n<a href=\"https://nodejs.org/\">página oficial</a>.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhttp\n  <span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/plain'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">1337</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Servidor rodando em http://127.0.0.1:1337/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Para rodar, salve o arquivo com um nome, por exemplo, <code>example.js</code> e execute-o\ncom o Node, no terminal, da seguinte forma:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">node</span> example.js</code></pre>\n<p>Você deve receber como saída a mensagem &quot;<samp>Servidor rodando em\nhttp://127.0.0.1:1337/</samp>&quot;. Com o seu navegador, digite na barra de\nendereços o endereço <code>http://127.0.0.1:1337/</code> e veja a sua mensagem.</p>\n<h2 id=\"conclusao\" tabindex=\"-1\">Conclusão <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/introducao-ao-nodejs\">#</a></h2>\n<p>O Node resolveu muitos problemas que as novas aplicações web e mobile\ndemandavam, mas não é uma bala de prata que serve para qualquer aplicação.\nCertos problemas requerem soluções difernetes e o Node pode não funcionar muito\nbem. Ainda assim, é uma ótima ferramenta para ter em seu inventário.</p>\n",
			"date_published": "2015-09-14T15:45:25Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/javascript-basico-3",
			"url": "https://maxroecker.github.io/blog/javascript-basico-3",
			"title": "JavaScript Básico #3",
			"content_html": "<p>No\n<a href=\"https://maxroecker.github.io/posts/2015-09-01-javascript-basico-2/\">artigo anterior</a>\nvemos como manipular basicamente os valores de tipo primitivo da linguagem,\nentre eles: números, strings, booleanos e valores indefinidos. Também vimos como\nfazer algumas operações aritméticas e de comparação entre expressões. No\nentanto, somente valores não são suficientes para expressar algoritmos\ncomplexos. É necessário utilizar a memória do computador para armazenar valores\ncomputados e acessá-los depois. Nesse texto vamos ver como atribuir e nomear\nvalores por meio do uso de <strong>variáveis</strong>.</p>\n<aside> <p> <strong>va·ri·á·vel:</strong> (1) Em matemática, algo que pode\nassumir um valor de um conjunto de valores; (2) Em computação, espaço reservado\nna memória de um computador, capaz de armazenar um determinado tipo de dado que\npode alterar-se durante a execução do programa. </p> </aside>\n<h2 id=\"variaveis\" tabindex=\"-1\">Variáveis <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-3\">#</a></h2>\n<p>Todo valor do JavaScript precisa ser armazenado em um local na memória do\ncomputador, para identificarmos tal local utilizamos as <strong>variáveis</strong>. Em uma\ndefinição bem simples, variáveis são nomes para os locais onde os valores são\narmazenados.</p>\n<blockquote> <p> A representação é a essência da programação. </p> <footer>Fred\nBrooks, The Mythical Man-Month</footer> </blockquote>\n<p>Para definirmos uma variável, utilizamos a palavra <code>var</code> seguida do nome\nescolhido para a variável. Variáveis podem ter qualquer nome, com exceção de\npalavras reservadas. <code>var</code> é um exemplo de palavra reservada, você não pode dar\no nome de uma variável de <code>var</code>. Outras palavras reservadas incluem controles de\nfluxo e definições do próprio JavaScript. Nomes de variáveis também não podem\nconter espaços e não podem começar com números, mas podem conter números depois\ndo primeiro caracter. Alguns símbolos também podem ser utilizados, como o <code>$</code> e\no <code>_</code>. Por exemplo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> $b <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Valor de a: '</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Valor de a: 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Valor de $b: '</span><span class=\"token punctuation\">,</span> $b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Valor de $b: 9</span></code></pre>\n<p>É importante ter em mente que variáveis não devem ser interpretadas como\n“caixas” que guardam os valores, mas sim como “placas” que apontam para onde os\nvalores estão. Assim como placas, você pode mudar a posição apontada de uma\nvariável, e por isso você pode reutilizar uma variável para outros valores. Veja\no exemplo abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> tempo <span class=\"token operator\">=</span> <span class=\"token string\">'Sol'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> temperatura <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tempo agora: %s %d°'</span><span class=\"token punctuation\">,</span> tempo<span class=\"token punctuation\">,</span> temperatura<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntempo <span class=\"token operator\">=</span> <span class=\"token string\">'Nublado'</span><span class=\"token punctuation\">;</span>\ntemperatura <span class=\"token operator\">=</span> temperatura <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tempo agora: %s %d°'</span><span class=\"token punctuation\">,</span> tempo<span class=\"token punctuation\">,</span> temperatura<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Podemos ver que mudamos o valor da variável <code>tempo</code> de <code>'Sol'</code> para <code>'Nublado'</code>.\nJá para a variável <code>temperatura</code>, mudamos o valor dela de <code>22</code> para <code>20</code>, uma\nvez que utilizamos o próprio da variável na atribuição. Percebeu que nós não\nutilizamos a palavra chave <code>var</code> quando atribuímos o segundo valor? Isso é\npossível porque a variável já foi declarada e só queremos atribuir um valor a\nela, não declarar uma nova variável.</p>\n<aside> <p> Os símbolos dentro da string na função <code>console.log</code> são\nutilizadas para a <a href=\"https://en.wikipedia.org/wiki/String_interpolation\">interpolação de\nstring</a>. Interpolação de string é uma técnica que substitui símbolos\nespeciais na string por valores passados. Cada símbolo indica uma formatação\nespecial. No exemplo, o símbolo <code>%s</code> indica que o valor é uma string,\nenquanto o <code>%d</code> indica que o valor é um número. </p> </aside>\n<h2 id=\"atalhos-de-atribuicao\" tabindex=\"-1\">Atalhos de atribuição <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-3\">#</a></h2>\n<p>Muitas vezes a mesma variável fornece e recebe o valor para uma expressão — como\né o caso da variável <code>temperatura</code> do exemplo anterior — e por isso há alguns\natalhos para o operador de atribuição que diminuem a quantidade de escrita de\ncódigo. Veja a seguir:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> tempo <span class=\"token operator\">=</span> <span class=\"token string\">'Sol'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> temperatura <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tempo agora: %s %d°'</span><span class=\"token punctuation\">,</span> tempo<span class=\"token punctuation\">,</span> temperatura<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntempo <span class=\"token operator\">+=</span> <span class=\"token string\">' com nuvens'</span><span class=\"token punctuation\">;</span>\ntemperatura <span class=\"token operator\">-=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tempo agora: %s %d°'</span><span class=\"token punctuation\">,</span> tempo<span class=\"token punctuation\">,</span> temperatura<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Na atribuição utilizando o <code>+=</code>, o JavaScript executa uma concatenação com o\nvalor a direita e depois atribui o resultado a variável tempo. Algo similar\nacontece com a atribuição utilizando <code>-=</code>, só que nesse caso o JavaScript faz\numa subtração do valor a direita e o resultado é atribuído a variável\n<code>temperatura</code>. Esses atalhos também funcionam para os operadores aritméticos\n<code>*</code>, <code>/</code> e <code>%</code>.</p>\n<p>Outros dois atalhos atribuição são o <strong>incremento</strong> (<code>++</code>) e o <strong>decremento</strong>\n(<code>--</code>). Ambos só funcionam para números inteiros e possuem um comportamento\nsimples: adicionam ou subtraem o número da variável em uma unidade e atribuem o\nresultado a própria variável. Veja o exemplo abaixo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> t1 <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> t2 <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n\nt1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nt2<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Temperatura 1: %d°'</span><span class=\"token punctuation\">,</span> t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Temperatura 1: 23°</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Temperatura 2: %d°'</span><span class=\"token punctuation\">,</span> t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Temperatura 2: 10°</span></code></pre>\n<p>Atribuições utilizando <code>++</code> e <code>--</code> também retornam um valor, então você pode\nreescrever o código acima como:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> t1 <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> t2 <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Temperatura 1: %d°'</span><span class=\"token punctuation\">,</span> t1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Temperatura 1: 22°</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Temperatura 2: %d°'</span><span class=\"token punctuation\">,</span> t2<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Temperatura 2: 11°</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Temperatura 1: %d°'</span><span class=\"token punctuation\">,</span> t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Temperatura 1: 23°</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Temperatura 2: %d°'</span><span class=\"token punctuation\">,</span> t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Temperatura 2: 10°</span></code></pre>\n<p>No entanto, atribuições <code>++</code> e <code>--</code> tem comportamento diferente dependendo da\nposição em que são colocados. Quando precedem o valor, eles retornam o valor\napós o incremento/decremento; caso eles sucedam, eles retornam o valor antes do\nincremento/decremento. Assim:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> t1 <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> t2 <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Temperatura 1: %d°'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Temperatura 1: 23°</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Temperatura 2: %d°'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">--</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Temperatura 2: 10°</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Temperatura 1: %d°'</span><span class=\"token punctuation\">,</span> t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Temperatura 1: 23°</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Temperatura 2: %d°'</span><span class=\"token punctuation\">,</span> t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → Temperatura 2: 10°</span></code></pre>\n<h2 id=\"atribuicao-condicional\" tabindex=\"-1\">Atribuição condicional <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-3\">#</a></h2>\n<p>É possível atribuir valores para varáveis de forma condicional utilizando o\noperador ternário <code>?</code>. O operador ternário possui uma sintaxe similar a:</p>\n<pre class=\"language-text\" tabindex=\"0\"><code class=\"language-text\">[condição] ? [valor caso verdadeiro] : [valor caso falso]</code></pre>\n<p>Vamos entender melhor o comportamento da atribuição condicional com um exemplo.\nSuponha que você queira exibir um texto se o número <code>n</code> é par ou ímpar. Para\nverificar que um número é ímpar, você pode testar se módulo do número por dois é\nzero (ou seja, não sobra resto da divisão do número <code>n</code> por dois). Se essa\ncondição é verdadeira, então atribuiremos <code>'par'</code> ao resultado. Caso contrário,\natribuíremos <code>'ímpar'</code>. Um código para esse pequeno algoritmo poderia ser:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pode ser qualquer número</span>\n<span class=\"token keyword\">var</span> resultado <span class=\"token operator\">=</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">'par'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'ímpar'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resultado<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Teste o código acima com outros valores para a variável <code>n</code> e veja os resultados.</p>\n<h2 id=\"conclusao\" tabindex=\"-1\">Conclusão <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-3\">#</a></h2>\n<p>Variáveis são o principal meio de acesso à memória que, quando utilizadas juntas\ncom valores, forma o fundamento da execução de qualquer código e da\nrepresentação dos dados de um algoritmo. No próximo artigo veremos as\ndeclarações de controle de fluxo de execução, como condicionais ou de\nrepetições, para evoluirmos ainda mais a nossa capacidade de desenvolver códigos\nem JavaScript.</p>\n",
			"date_published": "2015-09-09T17:00:03Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/javascript-basico-2",
			"url": "https://maxroecker.github.io/blog/javascript-basico-2",
			"title": "JavaScript Básico #2",
			"content_html": "<p><strong>Valores</strong> são os elementos mais simples dentro de uma linguagem: são\nexpressões que não podem ser reduzidas a nenhuma outra — ou seja, estão em sua\nforma normal. Por exemplo: 2 é um valor, ele é auto-contido e não há como\nsimplificar. Já (1+2) é uma expressão que não representa um valor, pois pode ser\nderivado e reduzido como 3.</p>\n<aside> <p> Em lógica matemática, um objeto encontra-se em sua <strong>forma\nnormal</strong> se este não pode ser reescrito de forma mais simples. </p>\n</aside>\n<p>Todo valor deve ser armazenado em um local na memória do computador e ocupa\nalgum espaço em bits. O JavaScript possui duas categorias de valores:\n<strong>primitivos</strong> e <strong>objetos</strong>. Nesse artigo vamos focar nos valores do tipo\nprimitivo. Valores primitivos representam os dados simples e podem ter os tipos:</p>\n<ul>\n<li>Número</li>\n<li>String</li>\n<li>Booleano</li>\n</ul>\n<p>Existem outros tipos primitivos mais avançados, mas para uma introdução à\nlinguagem, esses três são suficientes.</p>\n<h2 id=\"numero\" tabindex=\"-1\">Número <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-2\">#</a></h2>\n<p>Valores do tipo número são, surpreendentemente, valores numéricos. O JavaScript\narmazena qualquer número como um\n<a href=\"https://en.wikipedia.org/wiki/IEEE_754\">ponto flutuante de precisão dupla</a>. Ou\nseja, cada número utiliza 64 bits da memória do computador para ser armazenado.\nAlguns bits são utilizados para identificar números negativos ou também para\nindicar a fração decimal do número. Na verdade,\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\">o maior valor numérico inteiro que o JavaScript representa está próximo aos 9 quadrilhões</a>.</p>\n<p>Abra o console JavaScript do seu navegador — <kbd><kbd class=\"key\">Ctrl</kbd> +\n<kbd class=\"key\">Shift</kbd> + <kbd class=\"key\">J</kbd></kbd> — e experimente\nentrar com os números inteiros <code>0</code>, <code>3</code> e <code>16</code>, apertado <kbd class=\"key\">Enter</kbd> após cada um deles. Você pode ver que o console sempre\nirá retornar para você o valor da sua expressão informada, caso ela seja\navaliada em um valor; caso contrário, ela retorna <code>undefined</code>. Não se preocupe\nem entender o que significa isso por agora, vamos tratar sobre esse valor\nespecial daqui a pouco.</p>\n<blockquote> <p> Computadores são como os deuses do Velho Testamento: muitas\nregras e nenhuma piedade. </p> <footer> Joseph Campbell, The Power of Myth\n</footer> </blockquote>\n<p>Para representar números inteiros em base decimal, como já visto, basta\nescrevê-los <strong>sem usar zero esquerda</strong>. Números fracionais são escritos com\nponto, então o número 1,5 em JavaScript é escrito como <code>1.5</code>. Você também pode\nomitir a parte inteira quando ela é nula, assim, <strong>0,78</strong> pode ser escrito como\n<code>0.78</code> ou <code>.78</code>; No entando, é sempre recomendado que você adicione o zero. Você\ntambém pode escrever números muito grandes ou muito pequenos através de\n<a href=\"https://pt.wikipedia.org/wiki/Nota%C3%A7%C3%A3o_cient%C3%ADfica\">notação científica</a>,\nusando o <code>e</code> para indicar o expoente da base 10. Veja abaixo as diferentes\nformas de escrever o número o mesmo número:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 0.1</span>\n<span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 0.1</span>\n<span class=\"token number\">1e-1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 0.1</span></code></pre>\n<p>Há a possibilidade de escrever também números inteiros em bases\n<a href=\"https://pt.wikipedia.org/wiki/Sistema_de_numera%C3%A7%C3%A3o_hexadecimal\">hexadecimal</a>\n(16), <a href=\"https://pt.wikipedia.org/wiki/Sistema_octal\">octal</a> (8) ou\n<a href=\"https://pt.wikipedia.org/wiki/Sistema_de_numera%C3%A7%C3%A3o_bin%C3%A1rio\">binária</a>\n(2). Para escrever em base hexadecimal, basta adicionar um <code>0x</code> à frente de um\nnúmero com dígitos <code>01234567890ABCDF</code>. Já para escrever o número em octal,\nprecede-se o número com um <code>0</code> e em seguida qualquer dígito <code>01234567</code>, por\nisso, escrever <code>014</code> é diferente de <code>14</code> em JavaScript, o primeiro indica um\nnúmero em base octal e o segundo um número em base decimal.</p>\n<p>Números binários são escritos com um <code>0b</code> à frente do número com digitos <code>01</code>.\nPara mostrar a diferença na escrita, o número 42 nas diferentes bases é escrito\ncomo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token number\">42</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 42</span>\n<span class=\"token number\">0b101010</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 42</span>\n<span class=\"token number\">052</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 42</span>\n<span class=\"token number\">0x2a</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 42</span></code></pre>\n<h3 id=\"operacoes-matematicas\" tabindex=\"-1\">Operações matemáticas <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-2\">#</a></h3>\n<p>As quatro operações aritméticas básicas: <strong>adição</strong>, <strong>subtração</strong>,\n<strong>multiplicação</strong> e <strong>divisão</strong>; são dadas no JavaScript pelos símbolos <code>+</code>,\n<code>-</code>, <code>*</code> e <code>/</code>, respectivamente. Esses símbolos são chamados de operadores, e\nsempre utilizam dos números a sua direita e a sua esquerda para realizar a\noperação. Outro operador importante é o operador de <strong>módulo</strong> ou <strong>resto da\ndivisão</strong>, escrito com <code>%</code>. Experimente executar as seguintes expressões no\nconsole.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 5</span>\n<span class=\"token number\">9</span> <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 0.9</span>\n<span class=\"token number\">3</span> <span class=\"token operator\">-</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → -42</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">20</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 6.25</span>\n<span class=\"token number\">10</span> <span class=\"token operator\">%</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → 1</span></code></pre>\n<p>Como esperado, a multiplicação e a divisão tem prioridade, seguindo a\n<a href=\"https://pt.wikipedia.org/wiki/Ordem_de_opera%C3%A7%C3%B5es\">ordem de precedência</a>.\nCaso você precise da ordem explicita, você deve utilizar os parênteses.</p>\n<h3 id=\"valores-numericos-especiais\" tabindex=\"-1\">Valores numéricos especiais <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-2\">#</a></h3>\n<p>Há três valores numéricos em JavaScript que não se comportam como números\ncomuns. Os primeiros são os que representam os infinitos positivo e negativo —\nrepresentados na linguagem como <code>Infinity</code> e <code>-Infinity</code> — que apesar de não\npoderem ser utilizados em operações aritméticas, podem ser comparados com outros\nnúmeros e podem ser úteis para resolver alguns problemas.</p>\n<p>O terceiro é <code>NaN</code>, do inglês <i lang=\"en\">Not a Number</i>, ou seja, um valor\ndo tipo número mas que representa um &quot;não-número&quot;. Operações aritméticas\nindefinidas ou mal-formadas resultam em <code>NaN</code>, veja alguns exemplos:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token number\">Infinity</span> <span class=\"token operator\">-</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → NaN</span>\n<span class=\"token number\">0</span> <span class=\"token operator\">*</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → NaN</span>\n<span class=\"token number\">Infinity</span> <span class=\"token operator\">/</span> <span class=\"token operator\">-</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → NaN</span>\n<span class=\"token string\">'a'</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → NaN</span></code></pre>\n<h2 id=\"strings\" tabindex=\"-1\">Strings <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-2\">#</a></h2>\n<p><strong>Strings</strong> são cadeia de caracteres utilizadas para representar texto escrito.\nSua representação em JavaScript é dada pelo conteúdo dentro de um par de aspas\nduplas (<code>&quot;&quot;</code>) ou aspas simples (<code>''</code>). Por exemplo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token string\">'À noite, vovô Kowalsky vê o ímã cair no pé do pinguim queixoso e vovó põe açúcar no chá de tâmaras do jabuti feliz'</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'Gazeta publica hoje no jornal uma breve nota de faxina na quermesse.'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Qualquer caractere pode ser colocado entre as aspas e o JavaScript se encarrega\nde atribuir um valor para elas. No entanto, alguns caracteres especiais — como\nos que indicam uma nova linha ou um espaço de tabulação — precisam ser\nrepresentados de forma diferente. Para representar esses caracteres especiais\nutilizamos a notação contra-barra (ou <i lang=\"en\"><a href=\"https://en.wikipedia.org/wiki/Escape_character\">character escaping</a></i>).\nOu seja, quando uma contra-barra é encontrada no texto, o caractere seguinte\nindica um caractere especial. Por exemplo, uma string que contenha <code>\\n</code> indica\nque há uma quebra de linha. A lista abaixo indica os principais caracteres\nespeciais:</p>\n<ul>\n<li><code>\\n</code> — Quebra de linha</li>\n<li><code>\\&quot;</code> — Aspas duplas</li>\n<li><code>\\'</code> — Aspas simples</li>\n<li><code>\\\\</code> — Contra-barra</li>\n<li><code>\\t</code> — Espaço de tabulação</li>\n</ul>\n<p>Ou seja, para escrever a frase &quot;<em>Usamos o &quot;\\n&quot; para escrever uma quebra de\nlinha</em>&quot; em uma string no JavaScript, é necessário escrevê-la da seguinte forma:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token string\">\"Usamos o \\\"\\\\n\\\" para escrever uma quebra de linha\"</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Strings não podem ser adicionadas, divididas, multiplicas ou subtraídas. Mas\npodem ser concatenadas com o operador <code>+</code>. Por exemplo, a expressão\n<code>'ja' + 'va' + 'script'</code> produz o resultado <code>'javascript'</code>.</p>\n<h2 id=\"booleanos\" tabindex=\"-1\">Booleanos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-2\">#</a></h2>\n<p>Muitas vezes precisamos de dados tão simples que indiquem somente uma decisão:\n&quot;sim&quot; e &quot;não&quot;, &quot;ligado&quot; e &quot;desligado&quot;, &quot;ativo&quot; e &quot;inativo&quot;, entre outros.\nValores booleanos indicam exatamente isso e são representados por <code>true</code> ou\n<code>false</code>. Esses valores são chamados de booleanos em homenagem ao matemático\n<a href=\"https://pt.wikipedia.org/wiki/George_Boole\">George Boole</a>, grande contribuidor\nnos campos de lógica matemática e álgebra abstrata. Apesar de serem simples, são\nessenciais quando estamos lidando com estruturas de controle ou de laço dentro\nda linguagem.</p>\n<h3 id=\"operacoes-booleanas\" tabindex=\"-1\">Operações booleanas <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-2\">#</a></h3>\n<p>Valores booleanos podem ser operados através dos operadores lógicos\n<a href=\"https://pt.wikipedia.org/wiki/Conjun%C3%A7%C3%A3o_l%C3%B3gica\">e</a>,\n<a href=\"https://pt.wikipedia.org/wiki/Disjun%C3%A7%C3%A3o_l%C3%B3gica\">ou</a> e\n<a href=\"https://pt.wikipedia.org/wiki/Nega%C3%A7%C3%A3o\">negação</a>, escritos\nrespectivamente como <code>&amp;&amp;</code>, <code>||</code> e <code>!</code>. Note que o operador de negação <code>!</code> é\nunário, ou seja, ele inverte o próximo valor booleano informado. Exemplos:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\n<span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → false</span>\n<span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → false</span>\n<span class=\"token operator\">!</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → false</span>\n<span class=\"token operator\">!</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span></code></pre>\n<h3 id=\"comparacoes\" tabindex=\"-1\">Comparações <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-2\">#</a></h3>\n<p>A maior parte dos valores primitivos em JavaScript possui uma\n<a href=\"https://en.wikipedia.org/wiki/Total_order\">ordenação total</a>. Ou seja, possuem a\nideia de que um valor é &quot;maior que outro&quot; ou &quot;precede&quot; outro. Para avaliar essa\nrelação, utilizamos <strong>operadores de comparação</strong>, que resultam em um valor\nbooleano <code>true</code> ou <code>false</code>. Os operadores de comparação são:</p>\n<ul>\n<li><code>&gt;</code>, que indica &quot;<em>maior que</em>&quot;;</li>\n<li><code>&gt;=</code>, que indica &quot;<em>maior ou igual a</em>&quot;;</li>\n<li><code>==</code>, que indica &quot;<em>igual a</em>&quot;;</li>\n<li><code>&lt;=</code>, que indica &quot;<em>menor ou igual a</em>&quot;;</li>\n<li><code>&lt;</code>, que indica &quot;<em>menor que</em>&quot;;</li>\n<li><code>!=</code>, que indica &quot;<em>diferente de</em>&quot;;</li>\n</ul>\n<p>Alguns exemplos:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token number\">1</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → false</span>\n<span class=\"token number\">3</span> <span class=\"token operator\">===</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\n<span class=\"token operator\">-</span><span class=\"token number\">4</span> <span class=\"token operator\">!==</span> <span class=\"token number\">12</span> <span class=\"token operator\">/</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → false</span>\n<span class=\"token string\">'Alvar'</span> <span class=\"token operator\">&lt;</span> <span class=\"token string\">'Zoink'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\n<span class=\"token string\">'Jaiko'</span> <span class=\"token operator\">>=</span> <span class=\"token string\">'Jaik'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span>\n<span class=\"token boolean\">true</span> <span class=\"token operator\">></span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → true</span></code></pre>\n<p>Números são comparados de acordo com o valor real. Strings são comparadas pela\n<a href=\"https://en.wikipedia.org/wiki/Lexicographical_order\">ordem lexicográfica</a>, para\nos valores booleanos, <code>true</code> sempre sucede <code>false</code> e ambos nunca são iguais.</p>\n<p>Uma exceção a essa regra é o valor <code>NaN</code>. Na maioria das vezes um valor é igual\na ele mesmo, mas com o <code>NaN</code> isso não acontece. Em JavaScript, <code>NaN == NaN</code>\nsempre retorna <code>false</code>. A justificativa é que normalmente <code>NaN</code> indica uma\ncomputação aritmética indefinida e isso não significa que ela seja igual a outra\ncomputação inválida.</p>\n<h2 id=\"valores-indefinidos\" tabindex=\"-1\">Valores indefinidos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-2\">#</a></h2>\n<p>Há dois valores especiais, <code>null</code> e <code>undefined</code>, que são utilizados para indicar\na falta de um valor próprio — são valores que indicam que não há informação.\nMuitas operações que não resultam em um valor válido produzem o valor\n<code>undefined</code> por serem obrigadas a retornar um valor. Contextualmente, não há\ndiferença entre <code>null</code> e <code>undefined</code>, ou seja, você pode considerá-los sinônimos\nna maioria das vezes.</p>\n<p>Alguns autores chegam a afirmar que esse é um acidente dentro do projeto da\nlinguagem. Houve uma proposta de unificar esses valores, mas ela foi\n<a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3atypeof_null\">rejeitada</a>.</p>\n<p>Podemos notar uma diferença entre os dois valores quando utilizamos o operador\n<code>typeof</code> da linguagem, que fornece que fornece uma string nomeando o tipo do\npróximo valor dado à ela. Por exemplo:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token number\">3.2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → \"number\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → \"string\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → \"boolean\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → \"object\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// → \"undefined\"</span></code></pre>\n<h2 id=\"conclusao\" tabindex=\"-1\">Conclusão <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-2\">#</a></h2>\n<p>Esse artigo ficou um pouco longo, mas acho importante ter esse entendimento\ninicial de valores e operações básicas para compreensão do JavaScript. Para os\npróximos artigos, trataremos de assuntos como variáveis, atribuições e de suas\nespecialidades.</p>\n",
			"date_published": "2015-09-01T22:29:00Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/javascript-basico-1",
			"url": "https://maxroecker.github.io/blog/javascript-basico-1",
			"title": "JavaScript Básico #1",
			"content_html": "<p>O <strong>JavaScript</strong> é uma linguagem de programação criada em 1995 com o objetivo de\nadicionar dinamicidade aos documentos HTML no navegador Netscape. O JavaScript,\njunto com o HTML e o CSS, constituem os três pilares tecnológicos da <em>web</em>. O\nJavaScript permite que código seja executado nos navegadores dos usuários que\nacessam uma página <em>web</em>, adicionando interatividade e permitindo a construção\nde aplicações ricas.</p>\n<p>O JavaScript uma\n<a href=\"https://en.wikipedia.org/wiki/Scripting_language\">linguagem de script</a>\n<a href=\"https://en.wikipedia.org/wiki/Dynamic_programming_language\">dinâmica</a> com\n<a href=\"https://en.wikipedia.org/wiki/First-class_function\">funções de primeira classe</a>\ne que suporta a criação de\n<a href=\"https://en.wikipedia.org/wiki/Object-oriented_programming\">objetos</a> baseados em\n<a href=\"https://en.wikipedia.org/wiki/Prototype-based_programming\">protótipos</a>. Por\nessas características, é considerada uma linguagem de multi-paradigma,\noferecendo suporte para programação de estilo\n<a href=\"https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_imperativa\">imperativo</a>,\n<a href=\"https://pt.wikipedia.org/wiki/Orienta%C3%A7%C3%A3o_a_objetos\">orientado a objetos</a>\ne <a href=\"https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_funcional\">funcional</a>.\nMas não se preocupe em entender todos esses conceitos por agora.</p>\n<aside><p> Uma <strong>linguagem de script</strong> é uma linguagem de\nprogramação desenvolvida para um ambiente de execução específico. </p></aside>\n<p>Apesar de ter seu nascimento em navegadores, atualmente o JavaScript é uma\nlinguagem que habita também o lado do servidor. Por exemplo, a engine\n<a href=\"https://developers.google.com/v8/\">V8</a> é utilizada no navegador Google Chrome,\nmas é utilizado também pelo <a href=\"https://nodejs.org/\">Node.js</a>.</p>\n<h2 id=\"voltando-para-1995\" tabindex=\"-1\">Voltando para 1995 <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-1\">#</a></h2>\n<p>A Netscape contrata Brendan Eich para liderar o desenvolvimento de uma nova\nlinguagem de programação que permitiria que o novíssimo suporte do Navegador à\nlinguagem Java se tornasse mais acessível. Eich decide que uma linguagem de\n<em>script</em> com tipagem fraca seria ideal para o ambiente e para o público alvo da\népoca: <em>web designers</em> que desejavam adicionar algumas funcionalidades em páginas\nweb sem a necessidade de compilar código em <em>bytecode</em> ou ter conhecimento\navançado de orientação a objetos.</p>\n<p>Essa primeira versão da linguagem criada por Brendan Eich foi chamada de\n“Mocha”. No entanto, para o lançamento oficial, ela foi nomeada de “LiveScript”.\nPosteriormente, foi rebatizada JavaScript por iniciativa do setor de\n<em>marketing</em>. No entanto, isso se revelaria um erro que assombraria os\n<em>web designers</em> por muitos anos… Em 4 de Dezembro de 1995, a NetScape junto a Sun\nanunciam o JavaScript, uma nova linguagem que tinha um único objetivo: ser um\ncomplemento para o HTML e para o Java.</p>\n<p>O JavaScript rapidamente ganhou vida própria, sendo cada vez mais utilizado para\nadicionar funcionalidades à documentos HTML do que para controlar <em>applets</em>\nJava. No entanto, seu sucesso como uma linguagem de programação com uma curva de\naprendizagem baixa — não precisava de um compilador, nem de um processo de\n<em>build</em> ou de uma IDE — combinado com algumas falhas de seguranças descobertas\nnos meses seguintes construíram a imagem de que a linguagem não era séria o\nsuficiente para o desenvolvimento de aplicações complexas.</p>\n<p>Mas o sucesso do JavaScript não passou despercebido pela Microsoft, empresa por\ntrás do Internet Explorer. A Microsoft respondeu ao JavaScript da Netscape\nlançando a VBScript, que permitia a interação de componentes das páginas HTML\njunto ao sistema operacional Windows. Além disso, em 16 de Julho de 1996, a\nMicrosoft lança uma “versão do JavaScript” para o Internet Explorer 3.0, e a\nbatiza de JScript.</p>\n<p>O JScript não era totalmente compatível com o JavaScript. Códigos feitos para\numa linguagem não funcionavam na outra em grande parte das vezes. Isso acirrou\nainda mais a disputa entre ambos os navegadores. Era comum que alguns os\ndesenvolvedores abandonassem os usuários de um navegador ou outro ao invés de\nescrever um código compatível para ambos.</p>\n<p>Em Novembro de 1997, a Netscape e a Sun iniciam o processo de padronizar a\nlinguagem com a ajuda da <em>European Computer Manufacturers Association</em> (ECMA), e\ndão a ela um novo nome: ECMAScript. O processo de padronização durou vários\nanos. A ECMAScript 2 foi em Junho de 1998, a ECMAScript 3 em Dezembro de 1994 e\nos trabalhos na ECMAScript 4 começaram em 2000.</p>\n<p>Nos anos seguintes, o Java perdeu força com os <em>applets</em>, o VBScript foi\ndescontinuado pela Microsoft e o Internet Explorer ganhou a batalha contra o\nNetscape Navigator. O domínio de 95% do mercado pelo Internet Explorer no início\ndos anos 2000 fez com que o JScript se torna-se o padrão <em>de facto</em> de uma\nlinguagem que permitia “documentos HTML dinâmicos”. Eventualmente, a Microsoft,\nque inicialmente participava ativamente do processo de padronização, parou de\ncontribuir e o projeto da ECMAScript 4 foi arquivado por período indefinido.</p>\n<p>A história começou a mudar em 2004, quando a Mozilla, sucessora da Netscape,\nlança o Firefox e abocanha uma pequena mas significativa parte do mercado do\nInternet Explorer. Em 2005, a Mozilla junta-se a ECMA International, e começa a\ntrabalhar junto com a Macromedia — que desejava padronizar a linguagem\nActionScript utilizada pelo Flash — para reviver a padronização do ECMAScript 4.</p>\n<p>Nos próximos anos, o Google lança o navegador Chrome com a máquina virtual de\nJavaScript própria — a <a href=\"https://v8.dev/\">V8</a> — e a primeira a utilizar tradução\ndinâmica. Além disso, o desenvolvimento <em>web</em> popularizou-se ainda mais e\ndiversas bibliotecas e ferramentas começaram a ser disponibilizadas com código\nlivre e que prometiam acabar com a incompatibilidade do JavaScript nos diversos\nnavegadores, tais como o <a href=\"https://jquery.com/\">JQuery</a> e o\n<a href=\"https://mootools.net/\">MooTools</a>. Eventualmente chegou-se ao consenso de que\nera necessário padronizar de vez a linguagem. Assim, em Dezembro de 2009, a\nquinta e &quot;definitiva&quot; versão da ECMAScript é finalmente lançada.</p>\n<p>A partir de 2009, vários esforços foram tomados para melhorar e aumentar a\ncapacidade do ECMAScript. E, em 2015, a sexta versão da linguagem é lançada com\nmuitas novas funcionalidades, tornando-se definitivamente uma linguagem madura.\nAtualmente o JavaScript é considerado uma implementação da ECMAScript, assim\ncomo o ActionScript e o JScript.</p>\n<h2 id=\"serie-sobre-javascript\" tabindex=\"-1\">Série sobre JavaScript <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-1\">#</a></h2>\n<p>Pretendo iniciar essa série de artigos sobre JavaScript para compartilhar um\npouco do conhecimento que adquiri nos últimos anos, pois acredito que somente\naprende-se uma coisa de verdade quando você ensina-se ela. Sei que há muito\nconteúdo de qualidade sobre JavaScript pela <em>web</em> — basta uma pesquisada no\nGoogle — mas muito do conteúdo relevante é dado em língua inglesa ou apresentam\nconceitos que já são obsoletos, ou seja, um obstáculo para desenvolvedores\niniciantes e aspirantes em programação que querem aprender sobre essa poderosa\nlinguagem.</p>\n<p>Nessa série, vou exibir inicialmente aspectos primários da linguagem e aos\npoucos ir revelando detalhes importantes e complexos conforme avançamos. Vou me\nesforçar para tratar o assunto da maneira fácil para você compreender, mas é\nimportante que você já tenha algum entendimento de codificação e lógica de\nprogramação. Faço sempre uso de uma grande quantidade de exemplos, afinal, <strong>a\nmelhor forma de aprender a codificar é codificando</strong>.</p>\n<blockquote cite=\"http://lkml.org/lkml/2000/8/25/132\">\n  <p>\n    Talk is cheap, show me the code.\n  </p>\n  <footer>\n    <a href=\"http://lkml.org/lkml/2000/8/25/132\">Linus Torvalds</a>\n  </footer>\n</blockquote>\n<p>Quer começar já? Pois então vamos lá! Caso você esteja num navegador atualizado\n— como o Google Chrome ou o Mozilla Firefox — aperte <kbd><kbd class=\"key\">Ctrl</kbd> + <kbd class=\"key\">Shift</kbd> + <kbd class=\"key\">J</kbd></kbd> e você verá uma tela com um cursor. Bem vindo ao\n<strong>Console JavaScript</strong> do seu navegador! Tente digitar a seguinte expressão\nabaixo e aperte <kbd class=\"key\">Enter</kbd>:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'Olá Mundo!'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Em seguida, digite a próxima expressão e novamente aperte <kbd class=\"key\">Enter</kbd>:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Viu resultado? Parabéns! Você fez sua primeira atribuição de valor em uma\nvariável e imprimiu o resultado na tela. Simples, não? Esse é só um exemplo\nbásico de como utilizar o console para lhe auxiliar nesse período de\naprendizado, ele é seu companheiro e sua melhor ferramenta para aprender\nJavaScript.</p>\n<p>Tente agora uma coisa um pouco mais complexa, escreva a função abaixo no\nconsole. <strong>Dica</strong>: quando for pular a linha, use <kbd><kbd class=\"key\">Shift</kbd> + <kbd class=\"key\">Enter</kbd></kbd> e após de digitar\ntudo aperte <kbd class=\"key\">Enter</kbd>.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fac</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">fac</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Após isso, execute os seguintes comandos:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token function\">fac</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fac</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fac</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fac</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Viu que valores na tela? Você notou algum padrão? Compreendeu o que a função\nfaz? 😄</p>\n<h3 id=\"livros\" tabindex=\"-1\">Livros <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-1\">#</a></h3>\n<ul>\n<li><a href=\"http://jsforcats.com/\">JavaScript for Cats</a></li>\n<li><a href=\"http://eloquentjavascript.net/\">Eloquent JavaScript</a></li>\n</ul>\n<h3 id=\"links\" tabindex=\"-1\">Links <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-1\">#</a></h3>\n<ul>\n<li><a href=\"https://medium.com/javascript-scene/learn-javascript-b631a4af11f2\">Learn JavaScript Essentials</a></li>\n<li><a href=\"http://jstherightway.org/\">JavaScript: The Right Way</a></li>\n<li><a href=\"http://javascriptissexy.com/how-to-learn-javascript-properly/\">How to Learn JavaScript Properly</a></li>\n</ul>\n<h3 id=\"videos\" tabindex=\"-1\">Vídeos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-1\">#</a></h3>\n<ul>\n<li><a href=\"https://www.youtube.com/playlist?list=PLQCmSnNFVYnT1-oeDOSBnt164802rkegc\">Desvendando a linguagem JavaScript</a></li>\n<li><a href=\"https://www.codeschool.com/courses/javascript-road-trip-part-1\">Code School: JavaScript Road Trip Part 1</a></li>\n</ul>\n<h2 id=\"agradecimentos\" tabindex=\"-1\">Agradecimentos <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/javascript-basico-1\">#</a></h2>\n<p>Agradeço a <a href=\"https://www.linkedin.com/in/suzanicristina/\">Suzani Cristina</a> pela\nrevisão do texto e de algumas informações da história da linguagem. Obrigado!</p>\n",
			"date_published": "2015-08-25T09:15:25Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/porque-voce-deveria-aprender-javascript",
			"url": "https://maxroecker.github.io/blog/porque-voce-deveria-aprender-javascript",
			"title": "Porque você deveria aprender JavaScript",
			"content_html": "<p>A web se tornou a plataforma padrão de desenvolvimento nos últimos anos. Isso é\nevidenciado pelo tanto de <a href=\"https://www.npmjs.com/\">ferramentas</a>,\n<a href=\"http://www.i-programmer.info/news/167-javascript/5418-javascript-to-be-the-default-langauge-for-gnome.html\">ambientes gráficos</a>,\n<a href=\"http://electron.atom.io/\">plataformas de desenvolvimento</a> e\n<a href=\"http://www.chromium.org/chromium-os\">sistemas operacionais</a> que utilizam suas\ntecnologias para apresentar conteúdo. Hoje, até aplicações para dispositivos\nmóveis nativas incorporam tecnologias do HTML, CSS e JavaScript. Nem o hardware\ntem escapado dessa mudança. Projetos como\n<a href=\"https://lostechies.com/derickbailey/2013/07/30/let-me-teach-you-arduino-with-javascript/\">Arduino</a>,\n<a href=\"http://nodebots.io/\">NodeBots</a> e <a href=\"https://tessel.io/\">Tessel</a> vislumbram que em\num futuro próximo poderemos ter JavaScript como uma linguagem comum para\nsistemas embarcados.</p>\n<p>No entanto, ainda existe uma certa &quot;barreira&quot; aprender essa linguagem. Ela já\nfoi considerada uma linguagem brinquedo, que tinha somente a função de criar\nalguns efeitos na interface do usuário ou adicionar alguma interação. Hoje essa\nsituação mudou.</p>\n<h2 id=\"a-aurora-de-um-novo-tempo\" tabindex=\"-1\">A aurora de um novo tempo <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/porque-voce-deveria-aprender-javascript\">#</a></h2>\n<p>Em meados de 2004, o Google lança o Gmail. O serviço de e-mail ganhou destaque\npor garantir espaço quase ilimitado gratuitamente. Além disso, sua interface\ntinha uma característica interessante: partes da interface eram carregadas\ndinamicamente, sem a necessidade de um redirecionamento da página inteira. O\ncliente <em>web</em> do Gmail foi desenvolvido utilizando <strong>AJAX</strong>, do inglês <i lang=\"en\">Asynchronous Javascript And XML</i>, que permitia a troca de\ninformações com o servidor de forma assíncrona com o\n<a href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a>.\nOu seja, o AJAX permitia que conteúdo do Gmail fosse carregado de acordo com a\ndemanda do usuário, sem necessidade do recarregamento da página inteira. O\nadvento do AJAX provocou mudanças profundas no desenvolvimento de aplicações,\nadicionando dinamismo e interatividade e permitindo que aplicações <em>web</em> fossem\ncompetitivas com aplicações nativas.</p>\n<blockquote cite=\"http://www.adaptivepath.com/ideas/ajax-new-approach-web-applications/\">\n<p> AJAX não é uma tecnologia. Na verdade são muitas tecnologias, cada uma\nflorescendo por conta própria, trabalhando juntas de forma poderosa </p>\n<footer> <a href=\"http://www.adaptivepath.com/ideas/ajax-new-approach-web-applications/\">\nJesse James Garrett </a>  </footer></blockquote>\n<p>Já em 2009, o lançamento do <a href=\"https://nodejs.org/\">Node.js</a> permitiu que o\nJavaScript, aliado a um\n<a href=\"https://en.wikipedia.org/wiki/Asynchronous_I/O\">I/O não bloqueante</a> e\n<a href=\"https://en.wikipedia.org/wiki/Event-driven_programming\">orientado a eventos</a>,\nganhasse espaço no lado do servidor das aplicações. Sua adoção foi muito rápida,\nprincipalmente para atender a nova demanda de aplicativos <em>web</em> e mobile que\nexigiam grandes quantidades de respostas em tempo real. Dois anos mais tarde, em\n2011, foi lançado o <a href=\"https://www.npmjs.com/\">NPM</a>, gerenciador de pacotes e de\nbibliotecas para o Node, causando uma explosão em sua popularidade. Atualmente,\n<a href=\"http://www.modulecounts.com/\">o NPM é o repositório de pacotes com maior quantidade de módulos disponíveis</a>.</p>\n<h2 id=\"vantagens\" tabindex=\"-1\">Vantagens <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/porque-voce-deveria-aprender-javascript\">#</a></h2>\n<h3 id=\"performance\" tabindex=\"-1\">Performance <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/porque-voce-deveria-aprender-javascript\">#</a></h3>\n<p>Nos navegadores e ambientes modernos, a maioria dos códigos JavaScript é\nexecutado de\n<a href=\"https://hacks.mozilla.org/2017/02/a-crash-course-in-just-in-time-jit-compilers/\">forma bastante otimizada</a>.\nApesar de ser uma linguagem de <i lang=\"en\">script</i>, e, por isso, utilizar\numa máquina virtual em tempo de execução, o JavaScript possui um desempenho\nótimo para o desenvolvimento de aplicações.</p>\n<h4 id=\"multiparadigma\" tabindex=\"-1\">Multiparadigma <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/porque-voce-deveria-aprender-javascript\">#</a></h4>\n<p>O JavaScript é uma linguagem multiparadigma, o que aumenta a flexibilidade do\ndesenvolvimento. Caso você queira trabalhar com orientação à objetos, a\nlinguagem possui um modelo de herança baseada em protótipo. É possível também\nutilizar os conceitos como encapsulamento, polimorfismo e composição de forma\nbastante simples.</p>\n<p>No entanto, se você prefere uma abordagem mais funcional, o JavaScript contém\nvárias características herdadas das linguagens funcionais que incluem: funções\nde alta ordem e <i lang=\"en\">closures</i>. Alguns métodos clássicos das\nlinguagens funcionais estão presentes no JavaScript, tais como <span lang=\"en\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>Array#map</code></a></span>,\n<span lang=\"en\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>Array#filter</code></a></span>\ne <span lang=\"en\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\"><code>Array#reduce</code></a></span>.</p>\n<h4 id=\"reusabilidade\" tabindex=\"-1\">Reusabilidade <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/porque-voce-deveria-aprender-javascript\">#</a></h4>\n<p>Código escrito em JavaScript é portável e facilmente reusável em outros locais.\nA linguagem segue um princípio forte de retrocompatibilidade, então é bem\npossível você pegar um código de dez anos atrás e executá-lo com sucesso em\nqualquer máquina virtual recente.</p>\n<p>Além disso, possibilidade de executar o mesmo código tanto no cliente quanto em\nservidores <em>web</em> permite um ganho de produtividade imenso. Outro destaque da\nlinguagem é a facilidade e disponibilidade de utilizar códigos de terceiros com\na utilização do NPM.</p>\n<h2 id=\"conclusao\" tabindex=\"-1\">Conclusão <a class=\"header-anchor\" href=\"https://maxroecker.github.io/blog/porque-voce-deveria-aprender-javascript\">#</a></h2>\n<p>Hoje, a <strong>Lei de Atwood</strong> nunca pareceu ser tão verdadeira. O JavaScript tem\ndominado todas as áreas de desenvolvimento de aplicações, desde\n<a href=\"https://developers.facebook.com/docs/javascript\">aplicativos sociais</a>,\n<a href=\"https://www.google.com/docs/about/\">suítes de programas de escritório</a> ou\n<a href=\"http://phaser.io/\">jogos</a> com grande processamento gráfico.</p>\n<blockquote cite=\"http://blog.codinghorror.com/the-principle-of-least-power/\">\n<p> Qualquer aplicação que possa ser escrita em JavaScript, eventualmente será\nescrita em JavaScript. </p> <footer> <a href=\"http://blog.codinghorror.com/the-principle-of-least-power/\"> Jeff Atwood\n</a> </footer> </blockquote>\n<p>Aprender JavaScript pode lhe abrir várias oportunidades e, além disso, nunca é\ndemais possuir mais uma habilidade no seu inventário.</p>\n",
			"date_published": "2015-08-21T00:50:01Z"
		},
		{
			"id": "https://maxroecker.github.io/blog/hello-world",
			"url": "https://maxroecker.github.io/blog/hello-world",
			"title": "Hello World",
			"content_html": "<p>Era quarta-feira, dia 12 de agosto, quando estava conversando com meu grande\namigo João Luiz, entusiasmado com um <em>framework</em> para <em>node.js</em> que acabávamos\nde fazer funcionar e de como foi sofrido para reconfigurá-lo, pois nem eu ou ele\nlembramos de anotar os passos. E então surgiu a ideia de fazer anotações sobre o\nque aprendemos, para facilitar encontrar essas informações depois — e com isso a\nideia de um blog.</p>\n<p>Resolvi bater uma aposta comigo mesmo em manter a regularidade de posts nesse\nblog, escrevendo sobre coisas que eu tenho mais interesse: computadores e web.\nAinda tem muito o que melhorar por aqui, mas para um começo está bom.</p>\n",
			"date_published": "2015-08-15T10:25:33Z"
		}
	]
}
